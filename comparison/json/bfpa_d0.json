[
{
"method_signature": "antlr.CharScanner::testLiteralsTable(java.lang.String, int)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.ASTNULLType::setText(java.lang.String)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.CharScanner::match(antlr.collections.impl.BitSet)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::getIndexOfChild(java.lang.Object, java.lang.Object)",
"vars": {
"parent": [],
"child": []
}
},
{
"method_signature": "antlr.debug.InputBufferListener::inputBufferConsume(antlr.debug.InputBufferEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeTraceListener(antlr.debug.TraceListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::<init>(java.lang.Object, int, int, java.lang.Object, java.lang.String, int, boolean, boolean)",
"vars": {
"source": [],
"text": [],
"target": []
}
},
{
"method_signature": "antlr.debug.Event::<init>(java.lang.Object, int)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.debug.NewLineEvent::<init>(java.lang.Object, int)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getLookaheadTestExpression(Lookahead[], int)",
"vars": {
"look": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genElementAST(antlr.AlternativeElement)",
"vars": {
"el": []
}
},
{
"method_signature": "antlr.GrammarElement::<init>(antlr.Grammar, antlr.Token)",
"vars": {
"g": [],
"start": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
"vars": {
"v": []
}
},
{
"method_signature": "antlr.debug.NewLineListener::hitNewLine(antlr.debug.NewLineEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::<init>(antlr.LexerSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.TokenRangeElement)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.RuleSymbol::<init>(java.lang.String)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::<init>(java.io.Reader)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.CharRangeElement)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.debug.ParserMatchListener::parserMismatchNot(antlr.debug.ParserMatchEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::lookaheadEquivForApproxAndFullAnalysis(antlr.Lookahead[], int)",
"vars": {
"bset": []
}
},
{
"method_signature": "antlr.debug.misc.ASTFrame::<init>(java.lang.String, antlr.collections.AST)",
"vars": {
"r": [],
"lab": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.TreeElement)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.CommonAST::initialize(int, java.lang.String)",
"vars": {
"txt": []
}
},
{
"method_signature": "antlr.collections.impl.BitSet::andInPlace(antlr.collections.impl.BitSet)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.ANTLRParser::<init>(antlr.TokenBuffer, int)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.ActionElement)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.CodeGenerator::_println(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.collections.AST::equalsList(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::<init>(antlr.TokenStream)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::<init>(antlr.Tool)",
"vars": {
"tool_": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMatch(char, java.lang.String, int)",
"vars": {
"target": []
}
},
{
"method_signature": "antlr.debug.MessageEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refAction(antlr.Token)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.MakeGrammar::refTokenRange(antlr.Token, antlr.Token, antlr.Token, int, boolean)",
"vars": {
"label": [],
"t1": [],
"t2": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.TreeElement)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::altUsesWildcardDefault(antlr.Alternative)",
"vars": {
"alt": []
}
},
{
"method_signature": "antlr.TreeSpecifierNode::<init>(antlr.Token)",
"vars": {
"tok_": []
}
},
{
"method_signature": "antlr.RuleBlock::findExceptionSpec(java.lang.String)",
"vars": {
"label": []
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::<init>(antlr.TokenBuffer, int)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::addParserListener(antlr.debug.ParserListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getASTCreateString(java.lang.String)",
"vars": {
"astCtorArgs": ["String"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::genInitFactory(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.CharLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.ASTFactory::create(java.lang.Class)",
"vars": {
"c": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::defineRuleName(antlr.Token, java.lang.String, boolean, java.lang.String)",
"vars": {
"r": [],
"access": [],
"docComment": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::subruleCanBeInverted(antlr.AlternativeBlock, boolean)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.ASTFactory::create(int, java.lang.String, java.lang.String)",
"vars": {
"txt": [],
"className": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genTokenTypes(antlr.TokenManager)",
"vars": {
"tm": []
}
},
{
"method_signature": "antlr.CommonAST::initialize(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::getHeaderAction(java.lang.String)",
"vars": {
"name": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::setupDebugging(antlr.TokenStream)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::setValues(int, int, java.lang.Object, java.lang.String, int, boolean, boolean)",
"vars": {
"text": [],
"target": []
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateListener::syntacticPredicateStarted(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.ASTNULLType::setNextSibling(antlr.collections.AST)",
"vars": {
"n": []
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::<init>(antlr.TokenStream, int)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMismatch(int, antlr.collections.impl.BitSet, java.lang.String, int)",
"vars": {
"b": [],
"text": []
}
},
{
"method_signature": "antlr.debug.TraceAdapter::exitRule(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.NameSpace::<init>(java.lang.String)",
"vars": {
"name": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genLookaheadSetForAlt(antlr.Alternative)",
"vars": {
"alt": []
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::<init>(antlr.TokenBuffer)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.Parser::match(antlr.collections.impl.BitSet)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::<init>(antlr.LexerSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.ANTLRException::<init>(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::syntacticPredicateFailed(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::<init>(antlr.TokenBuffer, int)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.ASTIterator::isSubtree(antlr.collections.AST, antlr.collections.AST)",
"vars": {
"sub": [],
"t": []
}
},
{
"method_signature": "antlr.ANTLRParser::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.TreeElement)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::reportError(antlr.RecognitionException)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genSemPred(java.lang.String, int)",
"vars": {
"pred": ["String"]
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::getChild(java.lang.Object, int)",
"vars": {
"parent": []
}
},
{
"method_signature": "antlr.preprocessor.GrammarFile::nameForExpandedGrammarFile(java.lang.String)",
"vars": {
"f": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.LexerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.StringLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.OneOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.CodeGenerator::extractIdOfAction(antlr.Token)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.MismatchedCharException::appendCharName(java.lang.StringBuffer, int)",
"vars": {
"sb": []
}
},
{
"method_signature": "antlr.SemanticException::<init>(java.lang.String, java.lang.String, int)",
"vars": {
"fileName": [],
"s": []
}
},
{
"method_signature": "antlr.collections.impl.LList::append(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::removeSemanticPredicateListener(antlr.debug.SemanticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.FileLineFormatter::getFormatString(java.lang.String, int, int)",
"vars": {
"fileName": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::addSyntacticPredicateListener(antlr.debug.SyntacticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.RuleRefElement)",
"vars": {
"rr": []
}
},
{
"method_signature": "antlr.AlternativeBlock::<init>(antlr.Grammar, antlr.Token, boolean)",
"vars": {
"g": [],
"start": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::GenRuleInvocation(antlr.RuleRefElement)",
"vars": {
"rr": []
}
},
{
"method_signature": "antlr.CommonAST::initialize(antlr.Token)",
"vars": {
"tok": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
"vars": {
"tInfo": [],
"id": []
}
},
{
"method_signature": "antlr.JavaBlockFinishingInfo::<init>(java.lang.String, boolean, boolean, boolean)",
"vars": {
"ps": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.StringLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireEvents(int, java.util.Vector)",
"vars": {
"listeners": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genBody(antlr.TreeWalkerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.CodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
"vars": {
"tInfo": [],
"id": []
}
},
{
"method_signature": "antlr.build.ANTLR::build(antlr.build.Tool)",
"vars": {
"tool": []
}
},
{
"method_signature": "antlr.GrammarAtom::setASTNodeType(java.lang.String)",
"vars": {
"type": []
}
},
{
"method_signature": "antlr.BaseAST::decode(java.lang.String)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.MakeGrammar::refArgAction(antlr.Token)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.CharRangeElement)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::addTraceListener(antlr.debug.TraceListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::match(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.MakeGrammar::refStringLiteral(antlr.Token, antlr.Token, int, boolean)",
"vars": {
"lit": [],
"label": []
}
},
{
"method_signature": "antlr.ASTNULLType::initialize(int, java.lang.String)",
"vars": {
"txt": []
}
},
{
"method_signature": "antlr.CharScanner::panic(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.Parser::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::setupGrammarParameters(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.collections.AST::initialize(antlr.Token)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.debug.MessageAdapter::reportError(antlr.debug.MessageEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.BaseAST::equalsTreePartial(antlr.collections.AST)",
"vars": {
"sub": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.RuleRefElement)",
"vars": {
"rr": []
}
},
{
"method_signature": "antlr.ANTLRStringBuffer::append(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::reportError(antlr.RecognitionException)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.Tool::copyFile(java.lang.String, java.lang.String)",
"vars": {
"dest_name": [],
"source_name": []
}
},
{
"method_signature": "antlr.StringUtils::stripBack(java.lang.String, char)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.debug.DebuggingInputBuffer::<init>(antlr.InputBuffer)",
"vars": {
"buffer": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::lookaheadIsEmpty(antlr.Alternative, int)",
"vars": {
"alt": []
}
},
{
"method_signature": "antlr.ImportVocabTokenManager::define(java.lang.String, int)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.preprocessor.Grammar::addRule(antlr.preprocessor.Rule)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genElementAST(antlr.AlternativeElement)",
"vars": {
"el": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genMatchUsingAtomText(antlr.GrammarAtom)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.debug.InputBufferListener::inputBufferMark(antlr.debug.InputBufferEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::addSemPred(java.lang.String)",
"vars": {
"predicate": []
}
},
{
"method_signature": "antlr.Parser::setASTFactory(antlr.ASTFactory)",
"vars": {
"f": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genBlockInitAction(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
"vars": {
"v": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::OctalToUnicode(java.lang.String)",
"vars": {
"str": []
}
},
{
"method_signature": "antlr.Tool::toolError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.collections.impl.BitSet::toString(java.lang.String)",
"vars": {
"separator": []
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::<init>(antlr.InputBuffer)",
"vars": {
"ib": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.TreeElement)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.SemanticException::<init>(java.lang.String, java.lang.String, int, int)",
"vars": {
"fileName": [],
"s": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genMatchUsingAtomTokenType(antlr.GrammarAtom)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.debug.ParserMatchAdapter::parserMismatch(antlr.debug.ParserMatchEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.WildcardElement)",
"vars": {
"wc": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::addSemPred(java.lang.String)",
"vars": {
"predicate": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.SimpleTokenManager::mapToTokenSymbol(java.lang.String, antlr.TokenSymbol)",
"vars": {
"sym": [],
"name": []
}
},
{
"method_signature": "antlr.FileCopyException::<init>(java.lang.String)",
"vars": {
"msg": []
}
},
{
"method_signature": "antlr.debug.Event::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::enterRule(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.ASTNULLType::equalsTree(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.MakeGrammar::endRule(java.lang.String)",
"vars": {
"rule": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.CharStreamIOException::<init>(java.io.IOException)",
"vars": {
"io": []
}
},
{
"method_signature": "antlr.CodeGenerator::getFIRSTBitSet(java.lang.String, int)",
"vars": {
"ruleName": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genErrorTryForElement(antlr.AlternativeElement)",
"vars": {
"el": []
}
},
{
"method_signature": "antlr.preprocessor.Grammar::setMemberAction(java.lang.String)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.BaseAST::xmlSerializeRootClose(java.io.Writer)",
"vars": {
"out": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getRangeExpression(int, int[])",
"vars": {
"elems": []
}
},
{
"method_signature": "antlr.TokenStreamSelector::select(java.lang.String)",
"vars": {
"sname": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genBody(antlr.ParserGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.Parser::removeParserTokenListener(antlr.debug.ParserTokenListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
"vars": {
"currentRule": [],
"tInfo": [],
"actionStr": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.StringLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::beginTree(antlr.Token)",
"vars": {
"tok": []
}
},
{
"method_signature": "antlr.BaseAST::setVerboseStringConversion(boolean, String[])",
"vars": {
"names": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::printAction(antlr.Token)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.ANTLRParser::<init>(antlr.ParserSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.Tool::reportProgress(java.lang.String)",
"vars": {
"message": []
}
},
{
"method_signature": "antlr.build.Tool::error(java.lang.String, java.lang.Exception)",
"vars": {
"msg": [],
"e": []
}
},
{
"method_signature": "antlr.debug.ParserReporter::parserMismatch(antlr.debug.ParserMatchEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.preprocessor.Grammar::inherit(java.lang.String, antlr.preprocessor.Grammar)",
"vars": {
"memberAction": [],
"superG": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::<init>(antlr.InputBuffer)",
"vars": {
"ib": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addSyntacticPredicateListener(antlr.debug.SyntacticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genCases(antlr.collections.impl.BitSet)",
"vars": {
"p": []
}
},
{
"method_signature": "antlr.NoViableAltForCharException::<init>(char, java.lang.String, int, int)",
"vars": {
"fileName": []
}
},
{
"method_signature": "antlr.Parser::setASTNodeClass(java.lang.String)",
"vars": {
"cl": []
}
},
{
"method_signature": "antlr.CharRangeElement::setLabel(java.lang.String)",
"vars": {
"label_": []
}
},
{
"method_signature": "antlr.RuleRefElement::<init>(antlr.Grammar, antlr.Token, int)",
"vars": {
"t": [],
"g": []
}
},
{
"method_signature": "antlr.preprocessor.GrammarFile::setOptions(antlr.collections.impl.IndexedVector)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.preprocessor.Rule::narrowerVisibility(antlr.preprocessor.Rule)",
"vars": {
"rule": []
}
},
{
"method_signature": "antlr.RuleEndElement::<init>(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genAlt(antlr.Alternative, antlr.AlternativeBlock)",
"vars": {
"blk": [],
"alt": []
}
},
{
"method_signature": "antlr.Parser::addSyntacticPredicateListener(antlr.debug.SyntacticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateAdapter::syntacticPredicateStarted(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.ActionElement)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::getAltLookahead(antlr.AlternativeBlock, int, int)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.TreeParser::setASTFactory(antlr.ASTFactory)",
"vars": {
"f": []
}
},
{
"method_signature": "antlr.Parser::addSemanticPredicateListener(antlr.debug.SemanticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.collections.impl.BitSet::toString(java.lang.String, antlr.collections.impl.Vector)",
"vars": {
"vocabulary": [],
"separator": []
}
},
{
"method_signature": "antlr.TokenSymbol::setParaphrase(java.lang.String)",
"vars": {
"p": []
}
},
{
"method_signature": "antlr.preprocessor.Option::setEnclosingGrammar(antlr.preprocessor.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.MakeGrammar::labelElement(antlr.AlternativeElement, antlr.Token)",
"vars": {
"el": [],
"label": []
}
},
{
"method_signature": "antlr.StringLiteralSymbol::setLabel(java.lang.String)",
"vars": {
"label": []
}
},
{
"method_signature": "antlr.BaseAST::setNextSibling(antlr.collections.AST)",
"vars": {
"n": []
}
},
{
"method_signature": "antlr.debug.InputBufferListener::inputBufferLA(antlr.debug.InputBufferEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.NameSpace::parse(java.lang.String)",
"vars": {
"name": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
"vars": {
"transInfo": [],
"idParam": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::syntacticPredicateSucceeded(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.debug.ParserReporter::semanticPredicateEvaluated(antlr.debug.SemanticPredicateEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.MakeGrammar::beginSubRule(antlr.Token, antlr.Token, boolean)",
"vars": {
"start": [],
"label": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genErrorHandler(antlr.ExceptionSpec)",
"vars": {
"ex": []
}
},
{
"method_signature": "antlr.ASTFactory::dup(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.CharRangeElement)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::getLookaheadTestExpression(antlr.Alternative, int)",
"vars": {
"alt": []
}
},
{
"method_signature": "antlr.ANTLRLexer::<init>(antlr.InputBuffer)",
"vars": {
"ib": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refHeaderAction(antlr.Token, antlr.Token)",
"vars": {
"act": [],
"name": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refMemberAction(antlr.Token)",
"vars": {
"act": []
}
},
{
"method_signature": "antlr.collections.AST::equalsListPartial(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.MakeGrammar::refCharRange(antlr.Token, antlr.Token, antlr.Token, int, boolean)",
"vars": {
"label": [],
"t1": [],
"t2": []
}
},
{
"method_signature": "antlr.Tool::setFileLineFormatter(antlr.FileLineFormatter)",
"vars": {
"formatter": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genSemPredMap(java.lang.String)",
"vars": {
"prefix": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::addParserMatchListener(antlr.debug.ParserMatchListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMatch(int, antlr.collections.impl.BitSet, java.lang.String, int)",
"vars": {
"b": [],
"text": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::deterministic(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.collections.List::includes(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.debug.ParserMatchListener::parserMatch(antlr.debug.ParserMatchEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.TokenRangeElement)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::match(antlr.collections.impl.BitSet)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::printSet(int, int, antlr.Lookahead)",
"vars": {
"lookahead": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refToken(antlr.Token, antlr.Token, antlr.Token, antlr.Token, boolean, int, boolean)",
"vars": {
"args": [],
"t": [],
"label": [],
"assignId": []
}
},
{
"method_signature": "antlr.CharScanner::<init>(antlr.LexerSharedInputState)",
"vars": {
"sharedState": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.ActionElement)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMismatch(char, antlr.collections.impl.BitSet, int)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.ASTNULLType::equalsList(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.CharRangeElement)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.Tool::setOutputDirectory(java.lang.String)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.WildcardElement)",
"vars": {
"wc": []
}
},
{
"method_signature": "antlr.CharScanner::setText(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.collections.AST::setFirstChild(antlr.collections.AST)",
"vars": {
"c": []
}
},
{
"method_signature": "antlr.debug.MessageListener::reportError(antlr.debug.MessageEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.SynPredBlock::<init>(antlr.Grammar, antlr.Token)",
"vars": {
"g": [],
"start": []
}
},
{
"method_signature": "antlr.RuleBlock::setOption(antlr.Token, antlr.Token)",
"vars": {
"value": [],
"key": []
}
},
{
"method_signature": "antlr.GrammarElement::<init>(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::setUserExceptions(java.lang.String)",
"vars": {
"thr": []
}
},
{
"method_signature": "antlr.ANTLRParser::treeParserSpec(java.lang.String)",
"vars": {
"doc": []
}
},
{
"method_signature": "antlr.collections.impl.VectorEnumerator::<init>(antlr.collections.impl.Vector)",
"vars": {
"v": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::_printAction(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.collections.impl.BitSet::<init>(long[])",
"vars": {
"bits_": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addDoneListener(antlr.debug.ListenerBase)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.ASTFactory::make(AST[])",
"vars": {
"nodes": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refTreeSpecifier(antlr.Token)",
"vars": {
"treeSpec": []
}
},
{
"method_signature": "antlr.BaseAST::setFirstChild(antlr.collections.AST)",
"vars": {
"c": []
}
},
{
"method_signature": "antlr.Tool::reportException(java.lang.Exception, java.lang.String)",
"vars": {
"e": [],
"message": []
}
},
{
"method_signature": "antlr.ANTLRParser::notTerminal(antlr.Token)",
"vars": {
"label": []
}
},
{
"method_signature": "antlr.AlternativeBlock::removeTrackingOfRuleRefs(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addParserListener(antlr.debug.ParserListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMismatch(int, int, java.lang.String, int)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.TreeWalkerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.SimpleTokenManager::tokenDefined(java.lang.String)",
"vars": {
"symbol": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genCases(antlr.collections.impl.BitSet)",
"vars": {
"p": []
}
},
{
"method_signature": "antlr.Parser::addTraceListener(antlr.debug.TraceListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.SemanticPredicateAdapter::semanticPredicateEvaluated(antlr.debug.SemanticPredicateEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.TokenRangeElement)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.CSharpCharFormatter::literalString(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::printSet(int, int, antlr.Lookahead)",
"vars": {
"lookahead": []
}
},
{
"method_signature": "antlr.debug.InputBufferReporter::inputBufferMark(antlr.debug.InputBufferEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.debug.SemanticPredicateAdapter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.OneOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genGenericBlock(antlr.AlternativeBlock, java.lang.String)",
"vars": {
"blk": [],
"blkOp": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::removeSyntacticPredicateListener(antlr.debug.SyntacticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genMatch(antlr.collections.impl.BitSet)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.CommonAST::setText(java.lang.String)",
"vars": {
"text_": []
}
},
{
"method_signature": "antlr.debug.GuessingEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.SimpleTokenManager::<init>(java.lang.String, antlr.Tool)",
"vars": {
"tool_": [],
"name_": []
}
},
{
"method_signature": "antlr.MakeGrammar::refReturnAction(antlr.Token)",
"vars": {
"returnAction": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.OneOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.OneOrMoreBlock::<init>(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addSemanticPredicateListener(antlr.debug.SemanticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.collections.Stack::push(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.preprocessor.Rule::setVisibility(java.lang.String)",
"vars": {
"v": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::removeSyntacticPredicateListener(antlr.debug.SyntacticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.Parser::setFilename(java.lang.String)",
"vars": {
"f": []
}
},
{
"method_signature": "antlr.Token::setText(java.lang.String)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.debug.ParserReporter::reportError(antlr.debug.MessageEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
"vars": {
"v": []
}
},
{
"method_signature": "antlr.ASTNULLType::equals(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refCharRange(antlr.Token, antlr.Token, antlr.Token, int, boolean)",
"vars": {
"label": [],
"t1": [],
"t2": []
}
},
{
"method_signature": "antlr.DefaultToolErrorHandler::warnAltAmbiguity(antlr.Grammar, antlr.AlternativeBlock, boolean, int, Lookahead[], int, int)",
"vars": {
"blk": [],
"grammar": [],
"sets": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genSynPred(antlr.SynPredBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.OneOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.Tool::getLanguage(antlr.MakeGrammar)",
"vars": {
"behavior": []
}
},
{
"method_signature": "antlr.MakeGrammar::refTreeSpecifier(antlr.Token)",
"vars": {
"treeSpec": []
}
},
{
"method_signature": "antlr.preprocessor.GrammarFile::addGrammar(antlr.preprocessor.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.preprocessor.Rule::setArgs(java.lang.String)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.collections.impl.Vector::removeElement(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::valueForPathChanged(javax.swing.tree.TreePath, java.lang.Object)",
"vars": {
"path": [],
"newValue": []
}
},
{
"method_signature": "antlr.debug.ParserReporter::parserLA(antlr.debug.ParserTokenEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
"vars": {
"tInfo": [],
"id": []
}
},
{
"method_signature": "antlr.NoViableAltForCharException::<init>(char, antlr.CharScanner)",
"vars": {
"scanner": []
}
},
{
"method_signature": "antlr.ANTLRParser::<init>(antlr.TokenStream)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::getASTCreateString(java.lang.String)",
"vars": {
"astCtorArgs": ["String"]
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.TreeElement)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.BlockEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.preprocessor.Grammar::setOptions(antlr.collections.impl.IndexedVector)",
"vars": {
"options": []
}
},
{
"method_signature": "antlr.TokenStreamSelector::push(antlr.TokenStream)",
"vars": {
"stream": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.CharLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genBody(antlr.TreeWalkerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.LLkParser::<init>(antlr.ParserSharedInputState, int)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genInclude(antlr.LexerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::getLookaheadTestExpression(antlr.Lookahead[], int)",
"vars": {
"look": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genCommonBlock(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.TokenStreamSelector::getStream(java.lang.String)",
"vars": {
"sname": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.BlockEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.StringLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genRule(antlr.RuleSymbol, boolean, int, java.lang.String)",
"vars": {
"s": [],
"prefix": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genBlockInitAction(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genTokenTypes(antlr.TokenManager)",
"vars": {
"tm": []
}
},
{
"method_signature": "antlr.TreeParser::matchNot(antlr.collections.AST, int)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::lookaheadIsEmpty(antlr.Alternative, int)",
"vars": {
"alt": []
}
},
{
"method_signature": "antlr.debug.ListenerBase::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::endRule(java.lang.String)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.preprocessor.GrammarFile::<init>(antlr.Tool, java.lang.String)",
"vars": {
"f": [],
"tool": []
}
},
{
"method_signature": "antlr.TokenManager::define(antlr.TokenSymbol)",
"vars": {
"ts": []
}
},
{
"method_signature": "antlr.TokenManager::mapToTokenSymbol(java.lang.String, antlr.TokenSymbol)",
"vars": {
"sym": [],
"name": []
}
},
{
"method_signature": "antlr.CodeGenerator::markBitsetForGen(antlr.collections.impl.BitSet)",
"vars": {
"p": []
}
},
{
"method_signature": "antlr.MakeGrammar::addElementToCurrentAlt(antlr.AlternativeElement)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.collections.impl.LLCell::<init>(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genLookaheadSetForBlock(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::parserMatchNot(antlr.debug.ParserMatchEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::GenRuleInvocation(antlr.RuleRefElement)",
"vars": {
"rr": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genBitsets(antlr.collections.impl.Vector, int, java.lang.String)",
"vars": {
"prefix": [],
"bitsetList": []
}
},
{
"method_signature": "antlr.Parser::removeTraceListener(antlr.debug.TraceListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::removeTraceListener(antlr.debug.TraceListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refCharLiteral(antlr.Token, antlr.Token, boolean, int, boolean)",
"vars": {
"lit": [],
"label": []
}
},
{
"method_signature": "antlr.AlternativeBlock::addAlternative(antlr.Alternative)",
"vars": {
"alt": []
}
},
{
"method_signature": "antlr.Parser::addParserMatchListener(antlr.debug.ParserMatchListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genBlockFinish(antlr.CSharpBlockFinishingInfo, java.lang.String)",
"vars": {
"noViableAction": [],
"howToFinish": []
}
},
{
"method_signature": "antlr.CodeGenerator::getFOLLOWBitSet(java.lang.String, int)",
"vars": {
"ruleName": []
}
},
{
"method_signature": "antlr.BlockContext::addAlternativeElement(antlr.AlternativeElement)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.LexerGrammar::setCharVocabulary(antlr.collections.impl.BitSet)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.Tool::processArguments(java.lang.String[])",
"vars": {
"args": []
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::<init>(antlr.LexerSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.MakeGrammar::refCharLiteral(antlr.Token, antlr.Token, boolean, int, boolean)",
"vars": {
"lit": [],
"label": []
}
},
{
"method_signature": "antlr.debug.misc.ASTFrame::main(String[])",
"vars": {
"args": []
}
},
{
"method_signature": "antlr.TokenStreamIOException::<init>(java.io.IOException)",
"vars": {
"io": []
}
},
{
"method_signature": "antlr.Parser::traceIn(java.lang.String)",
"vars": {
"rname": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::<init>(antlr.ParserSharedInputState, int)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.OneOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.preprocessor.Rule::setInitAction(java.lang.String)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.CodeGenerator::extractIdOfAction(java.lang.String, int, int)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CharRangeElement::<init>(antlr.LexerGrammar, antlr.Token, antlr.Token, int)",
"vars": {
"g": [],
"t1": [],
"t2": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refReturnAction(antlr.Token)",
"vars": {
"returnAction": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::<init>(antlr.Tool, java.lang.String[], antlr.LLkAnalyzer)",
"vars": {
"analyzer_": [],
"tool_": [],
"args_": []
}
},
{
"method_signature": "antlr.LexerGrammar::<init>(java.lang.String, antlr.Tool, java.lang.String)",
"vars": {
"tool_": [],
"superClass": [],
"className_": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::addParserListener(antlr.debug.ParserListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.Tool::doEverything(java.lang.String[])",
"vars": {
"args": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genAlt(antlr.Alternative, antlr.AlternativeBlock)",
"vars": {
"blk": [],
"alt": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::removeNewLineListener(antlr.debug.NewLineListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.ParserTokenAdapter::parserConsume(antlr.debug.ParserTokenEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTPanel::<init>(javax.swing.tree.TreeModel, javax.swing.event.TreeSelectionListener)",
"vars": {
"listener": [],
"tm": []
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::<init>(java.io.Reader)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.Token::<init>(int, java.lang.String)",
"vars": {
"txt": ["String"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::processStringForASTConstructor(java.lang.String)",
"vars": {
"str": []
}
},
{
"method_signature": "antlr.RuleSymbol::setBlock(antlr.RuleBlock)",
"vars": {
"rb": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::mangleLiteral(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.LexerGrammar::processArguments(java.lang.String[])",
"vars": {
"args": []
}
},
{
"method_signature": "antlr.TokenSymbol::<init>(java.lang.String)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.TreeWalkerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.Tool::warning(java.lang.String, java.lang.String, int, int)",
"vars": {
"s": [],
"file": []
}
},
{
"method_signature": "antlr.ANTLRLexer::<init>(antlr.LexerSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.MakeGrammar::<init>(antlr.Tool, java.lang.String[], antlr.LLkAnalyzer)",
"vars": {
"analyzer_": [],
"tool_": [],
"args_": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeSemanticPredicateListener(antlr.debug.SemanticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.collections.impl.LList::add(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.RuleEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.MismatchedTokenException::<init>(String[], antlr.collections.AST, int, int, boolean)",
"vars": {
"tokenNames_": [],
"node_": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genInitFactory(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genRule(antlr.RuleSymbol, boolean, int)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.BaseAST::initialize(antlr.Token)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.ASTFactory::dupList(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refTokensSpecElementOption(antlr.Token, antlr.Token, antlr.Token)",
"vars": {
"tok": [],
"value": [],
"option": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.CharRangeElement)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.AlternativeElement::<init>(antlr.Grammar, antlr.Token, int)",
"vars": {
"g": [],
"start": []
}
},
{
"method_signature": "antlr.AlternativeElement::setLabel(java.lang.String)",
"vars": {
"label": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::parserMismatchNot(antlr.debug.ParserMatchEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.TokenBuffer::<init>(antlr.TokenStream)",
"vars": {
"input_": []
}
},
{
"method_signature": "antlr.collections.impl.ASTArray::add(antlr.collections.AST)",
"vars": {
"node": []
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::rule(antlr.preprocessor.Grammar)",
"vars": {
"gr": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String, java.lang.String)",
"vars": {
"node_type": [],
"el": [],
"var_name": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genBody(antlr.LexerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.WildcardElement)",
"vars": {
"wc": []
}
},
{
"method_signature": "antlr.ASTFactory::<init>(java.util.Hashtable)",
"vars": {
"tokenTypeToClassMap": []
}
},
{
"method_signature": "antlr.LLkParser::<init>(antlr.TokenBuffer, int)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genSynPred(antlr.SynPredBlock, java.lang.String)",
"vars": {
"blk": [],
"lookaheadExpr": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeNewLineListener(antlr.debug.NewLineListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.MessageAdapter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.BaseAST::equalsListPartial(antlr.collections.AST)",
"vars": {
"sub": []
}
},
{
"method_signature": "antlr.ASTNULLType::equalsTreePartial(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.ASTFactory::createUsingCtor(antlr.Token, java.lang.String)",
"vars": {
"className": [],
"token": []
}
},
{
"method_signature": "antlr.debug.TraceEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.StringLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireReportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::<init>(antlr.InputBuffer)",
"vars": {
"ib": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genBitsetsHeader(antlr.collections.impl.Vector, int)",
"vars": {
"bitsetList": []
}
},
{
"method_signature": "antlr.build.Tool::antlr(java.lang.String)",
"vars": {
"fullyQualifiedFilename": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refTokenRange(antlr.Token, antlr.Token, antlr.Token, int, boolean)",
"vars": {
"label": [],
"t1": [],
"t2": []
}
},
{
"method_signature": "antlr.debug.ParserTokenEvent::<init>(java.lang.Object, int, int, int)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.ASTNULLType::findAllPartial(antlr.collections.AST)",
"vars": {
"subtree": []
}
},
{
"method_signature": "antlr.BaseAST::encode(java.lang.String)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refSemPred(antlr.Token)",
"vars": {
"pred": []
}
},
{
"method_signature": "antlr.build.Tool::log(java.lang.String)",
"vars": {
"cmd": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::removeCompetingPredictionSets(antlr.collections.impl.BitSet, antlr.AlternativeElement)",
"vars": {
"b": [],
"el": []
}
},
{
"method_signature": "antlr.CodeGenerator::_print(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.LexerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.collections.impl.LList::push(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::getASTCreateString(java.lang.String)",
"vars": {
"str": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeParserTokenListener(antlr.debug.ParserTokenListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.ParserGrammar::setOption(java.lang.String, antlr.Token)",
"vars": {
"value": [],
"key": []
}
},
{
"method_signature": "antlr.CommonToken::<init>(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genInclude(antlr.ParserGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.debug.ParserReporter::parserConsume(antlr.debug.ParserTokenEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.collections.impl.IndexedVector::appendElement(java.lang.Object, java.lang.Object)",
"vars": {
"value": [],
"key": []
}
},
{
"method_signature": "antlr.ToolErrorHandler::warnAltAmbiguity(antlr.Grammar, antlr.AlternativeBlock, boolean, int, Lookahead[], int, int)",
"vars": {
"blk": [],
"grammar": [],
"sets": []
}
},
{
"method_signature": "antlr.MismatchedTokenException::<init>(java.lang.String[], antlr.Token, int, boolean, java.lang.String)",
"vars": {
"token_": [],
"fileName_": [],
"tokenNames_": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.CharLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String)",
"vars": {
"node_type": [],
"el": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refAction(antlr.Token)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.ANTLRHashString::<init>(antlr.CharScanner)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.debug.GuessingEvent::<init>(java.lang.Object, int)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.MakeGrammar::refWildcard(antlr.Token, antlr.Token, int)",
"vars": {
"t": [],
"label": []
}
},
{
"method_signature": "antlr.Tool::warning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.TreeWalkerGrammar::<init>(java.lang.String, antlr.Tool, java.lang.String)",
"vars": {
"tool_": [],
"superClass": [],
"className_": []
}
},
{
"method_signature": "antlr.WildcardElement::<init>(antlr.Grammar, antlr.Token, int)",
"vars": {
"t": [],
"g": []
}
},
{
"method_signature": "antlr.CodeGenerator::removeAssignmentFromDeclaration(java.lang.String)",
"vars": {
"d": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refTreeSpecifier(antlr.Token)",
"vars": {
"treeSpec": []
}
},
{
"method_signature": "antlr.MakeGrammar::setArgOfRuleRef(antlr.Token)",
"vars": {
"argAction": []
}
},
{
"method_signature": "antlr.TreeParser::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.ANTLRParser::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.TreeWalkerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.ASTNULLType::initialize(antlr.Token)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
"vars": {
"currentRule": [],
"tInfo": [],
"actionStr": []
}
},
{
"method_signature": "antlr.collections.impl.BitSet::and(antlr.collections.impl.BitSet)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genMatch(antlr.collections.impl.BitSet)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::fireEvent(int, antlr.debug.ListenerBase)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.WildcardElement)",
"vars": {
"wc": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genAlt(antlr.Alternative)",
"vars": {
"alt": []
}
},
{
"method_signature": "antlr.collections.impl.ASTEnumerator::<init>(antlr.collections.impl.Vector)",
"vars": {
"v": []
}
},
{
"method_signature": "antlr.build.StreamScarfer::<init>(java.io.InputStream, java.lang.String, antlr.build.Tool)",
"vars": {
"is": [],
"type": [],
"tool": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::beginExceptionSpec(antlr.Token)",
"vars": {
"label": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::<init>(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::<init>(antlr.ParserSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.BaseAST::setText(java.lang.String)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.Tool::factory(java.lang.String)",
"vars": {
"p": []
}
},
{
"method_signature": "antlr.BaseAST::addChild(antlr.collections.AST)",
"vars": {
"node": []
}
},
{
"method_signature": "antlr.Grammar::hasOption(java.lang.String)",
"vars": {
"key": []
}
},
{
"method_signature": "antlr.debug.misc.#Anonymous.999067991::windowClosing(java.awt.event.WindowEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.MakeGrammar::refExceptionHandler(antlr.Token, antlr.Token)",
"vars": {
"action": [],
"exTypeAndName": []
}
},
{
"method_signature": "antlr.ASTFactory::create(antlr.Token, java.lang.String)",
"vars": {
"tok": [],
"className": []
}
},
{
"method_signature": "antlr.collections.impl.VectorEnumeration::<init>(antlr.collections.impl.Vector)",
"vars": {
"v": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refPreambleAction(antlr.Token)",
"vars": {
"act": []
}
},
{
"method_signature": "antlr.SimpleTokenManager::setName(java.lang.String)",
"vars": {
"name_": []
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::removeTreeModelListener(javax.swing.event.TreeModelListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genFollowSetForRuleBlock(antlr.RuleBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.build.Tool::stderr(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CommonToken::<init>(int, java.lang.String)",
"vars": {
"txt": []
}
},
{
"method_signature": "antlr.SynPredBlock::<init>(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.CharScanner::consumeUntil(antlr.collections.impl.BitSet)",
"vars": {
"set": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::setGrammar(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireReportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::deterministic(antlr.OneOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.debug.InputBufferAdapter::inputBufferLA(antlr.debug.InputBufferEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateListener::syntacticPredicateSucceeded(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.TreeParser::reportError(antlr.RecognitionException)",
"vars": {
"ex": []
}
},
{
"method_signature": "antlr.collections.impl.LLEnumeration::<init>(antlr.collections.impl.LList)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
"vars": {
"currentRule": [],
"tInfo": [],
"actionStr": []
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::setTool(antlr.Tool)",
"vars": {
"tool": []
}
},
{
"method_signature": "antlr.build.ANTLR::rootIsValidANTLRDir(antlr.build.Tool)",
"vars": {
"tool": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genSynPred(antlr.SynPredBlock, java.lang.String)",
"vars": {
"blk": [],
"lookaheadExpr": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.TokenRefElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
"vars": {
"astCtorArgs": [],
"atom": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, java.lang.String)",
"vars": {
"rule": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.Parser::removeMessageListener(antlr.debug.MessageListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CharScanner::reportError(antlr.RecognitionException)",
"vars": {
"ex": []
}
},
{
"method_signature": "antlr.collections.List::append(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.Parser::setASTNodeType(java.lang.String)",
"vars": {
"nodeType": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.WildcardElement)",
"vars": {
"wc": []
}
},
{
"method_signature": "antlr.TreeParser::setASTNodeClass(java.lang.String)",
"vars": {
"nodeType": []
}
},
{
"method_signature": "antlr.debug.ParserReporter::syntacticPredicateSucceeded(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genLineNo(antlr.GrammarElement)",
"vars": {
"el": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.BlockEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMatch(char, antlr.collections.impl.BitSet, int)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genCommonBlock(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.LexerGrammar::setOption(java.lang.String, antlr.Token)",
"vars": {
"value": [],
"key": []
}
},
{
"method_signature": "antlr.collections.impl.BitSet::subset(antlr.collections.impl.BitSet)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.debug.MessageEvent::setValues(int, java.lang.String)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genMatch(antlr.collections.impl.BitSet)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.RuleBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.MakeGrammar::setSubruleOption(antlr.Token, antlr.Token)",
"vars": {
"value": [],
"key": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::setupGrammarParameters(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::startLexer(java.lang.String, antlr.Token, java.lang.String, java.lang.String)",
"vars": {
"file": [],
"superClass": [],
"name": [],
"doc": []
}
},
{
"method_signature": "antlr.build.#Anonymous.1959690207::accept(java.io.File, java.lang.String)",
"vars": {
"name": [],
"dir": []
}
},
{
"method_signature": "antlr.MakeGrammar::refAction(antlr.Token)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.RuleRefElement::setLabel(java.lang.String)",
"vars": {
"label_": []
}
},
{
"method_signature": "antlr.AlternativeElement::<init>(antlr.Grammar, antlr.Token)",
"vars": {
"g": [],
"start": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genMatchUsingAtomTokenType(antlr.GrammarAtom)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.TokenQueue::append(antlr.Token)",
"vars": {
"tok": []
}
},
{
"method_signature": "antlr.AlternativeBlock::setAlternatives(antlr.collections.impl.Vector)",
"vars": {
"v": []
}
},
{
"method_signature": "antlr.ANTLRParser::reportError(antlr.RecognitionException)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.collections.AST::findAllPartial(antlr.collections.AST)",
"vars": {
"subtree": []
}
},
{
"method_signature": "antlr.preprocessor.Tool::processArguments(java.lang.String[])",
"vars": {
"incomingArgs": []
}
},
{
"method_signature": "antlr.Parser::consumeUntil(antlr.collections.impl.BitSet)",
"vars": {
"set": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.OneOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.ZeroOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.debug.SemanticPredicateEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::findRoot(antlr.preprocessor.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::<init>(antlr.ParserSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.ASTIterator::next(antlr.collections.AST)",
"vars": {
"template": []
}
},
{
"method_signature": "antlr.RuleBlock::addExceptionSpec(antlr.ExceptionSpec)",
"vars": {
"ex": []
}
},
{
"method_signature": "antlr.debug.ParserTokenAdapter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.preprocessor.Rule::setOptions(antlr.collections.impl.IndexedVector)",
"vars": {
"options": []
}
},
{
"method_signature": "antlr.TokenStreamSelector::select(antlr.TokenStream)",
"vars": {
"stream": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.BlockEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.ASTNULLType::findAll(antlr.collections.AST)",
"vars": {
"tree": []
}
},
{
"method_signature": "antlr.debug.ParserTokenAdapter::parserLA(antlr.debug.ParserTokenEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
"vars": {
"str": [],
"atom": []
}
},
{
"method_signature": "antlr.debug.SemanticPredicateEvent::<init>(java.lang.Object, int)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.SynPredBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
"vars": {
"astCtorArgs": [],
"atom": []
}
},
{
"method_signature": "antlr.Grammar::<init>(java.lang.String, antlr.Tool, java.lang.String)",
"vars": {
"tool_": [],
"superClass": [],
"className_": []
}
},
{
"method_signature": "antlr.AlternativeBlock::setLabel(java.lang.String)",
"vars": {
"label_": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genFollowSetForRuleBlock(antlr.RuleBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::removeTraceListener(antlr.debug.TraceListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.BaseAST::equalsTree(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.PreservingFileWriter::<init>(java.lang.String)",
"vars": {
"file": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireReportError(java.lang.Exception)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::<init>(java.lang.String, antlr.RuleBlock, antlr.CodeGenerator, antlr.ActionTransInfo)",
"vars": {
"currentRule": [],
"s": [],
"transInfo": [],
"generator": []
}
},
{
"method_signature": "antlr.ASTFactory::setTokenTypeASTNodeType(int, java.lang.String)",
"vars": {
"className": []
}
},
{
"method_signature": "antlr.CommonHiddenStreamToken::setHiddenAfter(antlr.CommonHiddenStreamToken)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.CodeGenerator::print(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.TreeWalkerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.CharScanner::setFilename(java.lang.String)",
"vars": {
"f": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.StringLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.debug.DebuggingInputBuffer::addInputBufferListener(antlr.debug.InputBufferListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::fixNameSpaceOption(java.lang.String)",
"vars": {
"ns": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMismatchNot(int, int, java.lang.String, int)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::setupOutput(java.lang.String)",
"vars": {
"className": []
}
},
{
"method_signature": "antlr.ImportVocabTokenManager::<init>(antlr.Grammar, java.lang.String, java.lang.String, antlr.Tool)",
"vars": {
"tool_": [],
"grammar": [],
"filename_": [],
"name_": []
}
},
{
"method_signature": "antlr.MakeGrammar::refTokensSpecElementOption(antlr.Token, antlr.Token, antlr.Token)",
"vars": {
"tok": [],
"value": [],
"option": []
}
},
{
"method_signature": "antlr.NameSpace::emitClosures(java.io.PrintWriter)",
"vars": {
"out": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refTokensSpecElementOption(antlr.Token, antlr.Token, antlr.Token)",
"vars": {
"tok": [],
"value": [],
"option": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::HTMLEncode(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.ParserGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.Tool::error(java.lang.String, java.lang.String, int, int)",
"vars": {
"s": [],
"file": []
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::class_def(java.lang.String, antlr.preprocessor.Hierarchy)",
"vars": {
"file": [],
"hier": []
}
},
{
"method_signature": "antlr.FileLineFormatter::setFormatter(antlr.FileLineFormatter)",
"vars": {
"f": []
}
},
{
"method_signature": "antlr.BaseAST::initialize(int, java.lang.String)",
"vars": {
"txt": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
"vars": {
"str": [],
"atom": []
}
},
{
"method_signature": "antlr.Tool::setNameSpace(java.lang.String)",
"vars": {
"name": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.CharLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genErrorCatchForElement(antlr.AlternativeElement)",
"vars": {
"el": []
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateAdapter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.ANTLRParser::parserSpec(java.lang.String)",
"vars": {
"doc": []
}
},
{
"method_signature": "antlr.preprocessor.Rule::setReturnValue(java.lang.String)",
"vars": {
"ret": []
}
},
{
"method_signature": "antlr.StringLiteralSymbol::<init>(java.lang.String)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genErrorHandler(antlr.ExceptionSpec)",
"vars": {
"ex": []
}
},
{
"method_signature": "antlr.BaseAST::equals(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.GrammarAtom)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refTokenRange(antlr.Token, antlr.Token, antlr.Token, int, boolean)",
"vars": {
"label": [],
"t1": [],
"t2": []
}
},
{
"method_signature": "antlr.ASTFactory::makeASTRoot(antlr.ASTPair, antlr.collections.AST)",
"vars": {
"root": [],
"currentAST": []
}
},
{
"method_signature": "antlr.TreeParser::traceOut(java.lang.String, antlr.collections.AST)",
"vars": {
"rname": [],
"t": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeParserListener(antlr.debug.ParserListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.ActionElement)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
"vars": {
"tInfo": [],
"id": []
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateAdapter::syntacticPredicateFailed(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::beginSubRule(antlr.Token, antlr.Token, boolean)",
"vars": {
"start": [],
"label": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::defineToken(antlr.Token, antlr.Token)",
"vars": {
"tokliteral": [],
"tokname": []
}
},
{
"method_signature": "antlr.GrammarAtom::setOption(antlr.Token, antlr.Token)",
"vars": {
"value": [],
"option": []
}
},
{
"method_signature": "antlr.CSharpNameSpace::emitDeclarations(java.io.PrintWriter)",
"vars": {
"out": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.RuleRefElement)",
"vars": {
"rr": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::printSet(int, int, antlr.Lookahead)",
"vars": {
"lookahead": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::addParserMatchListener(antlr.debug.ParserMatchListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.InputBufferReporter::inputBufferChanged(antlr.debug.InputBufferEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.ExceptionSpec::<init>(antlr.Token)",
"vars": {
"label_": []
}
},
{
"method_signature": "antlr.LLkParser::trace(java.lang.String, java.lang.String)",
"vars": {
"ee": [],
"rname": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::HTMLEncode(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::addNewLineListener(antlr.debug.NewLineListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CommonASTWithHiddenTokens::<init>(antlr.Token)",
"vars": {
"tok": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genRule(antlr.RuleSymbol, boolean, int, antlr.TokenManager)",
"vars": {
"s": [],
"tm": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::addSemanticPredicateListener(antlr.debug.SemanticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.InputBufferAdapter::inputBufferConsume(antlr.debug.InputBufferEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.MismatchedTokenException::<init>(String[], antlr.Token, antlr.collections.impl.BitSet, boolean, java.lang.String)",
"vars": {
"token_": [],
"set_": [],
"fileName_": [],
"tokenNames_": []
}
},
{
"method_signature": "antlr.ASTFactory::error(java.lang.String)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::<init>(antlr.TokenStream, int)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genBitsets(antlr.collections.impl.Vector, int)",
"vars": {
"bitsetList": []
}
},
{
"method_signature": "antlr.preprocessor.Grammar::<init>(antlr.Tool, java.lang.String, java.lang.String, antlr.collections.impl.IndexedVector)",
"vars": {
"name": [],
"rules": [],
"superGrammar": [],
"tool": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::defineRuleName(antlr.Token, java.lang.String, boolean, java.lang.String)",
"vars": {
"r": [],
"access": [],
"docComment": []
}
},
{
"method_signature": "antlr.preprocessor.Grammar::setType(java.lang.String)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.MakeGrammar::beginExceptionSpec(antlr.Token)",
"vars": {
"label": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::refresh(java.util.Vector)",
"vars": {
"listeners": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addNewLineListener(antlr.debug.NewLineListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genErrorHandler(antlr.ExceptionSpec)",
"vars": {
"ex": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::setRuleOption(antlr.Token, antlr.Token)",
"vars": {
"value": [],
"key": []
}
},
{
"method_signature": "antlr.CharScanner::traceIn(java.lang.String)",
"vars": {
"rname": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::lookaheadIsEmpty(antlr.Alternative, int)",
"vars": {
"alt": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::setCharVocabulary(antlr.collections.impl.BitSet)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refPreambleAction(antlr.Token)",
"vars": {
"act": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
"vars": {
"v": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::deterministic(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genLookaheadSetForBlock(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::setArgOfRuleRef(antlr.Token)",
"vars": {
"argaction": []
}
},
{
"method_signature": "antlr.collections.AST::findAll(antlr.collections.AST)",
"vars": {
"tree": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genBitSet(antlr.collections.impl.BitSet, int)",
"vars": {
"p": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::semanticPredicateEvaluated(antlr.debug.SemanticPredicateEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CharStreamException::<init>(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.ASTFactory::setASTNodeClass(java.lang.String)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.TokenRefElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.Parser::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.collections.impl.Vector::appendElement(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.Parser::addParserListener(antlr.debug.ParserListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::countLines(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refHeaderAction(antlr.Token, antlr.Token)",
"vars": {
"act": [],
"name": []
}
},
{
"method_signature": "antlr.Token::setFilename(java.lang.String)",
"vars": {
"name": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::endRule(java.lang.String)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.TokenStreamSelector::addInputStream(antlr.TokenStream, java.lang.String)",
"vars": {
"stream": [],
"key": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::setupDebugging(antlr.TokenBuffer)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.StringLiteralElement::<init>(antlr.Grammar, antlr.Token, int)",
"vars": {
"t": [],
"g": []
}
},
{
"method_signature": "antlr.preprocessor.Rule::sameSignature(antlr.preprocessor.Rule)",
"vars": {
"rule": []
}
},
{
"method_signature": "antlr.MakeGrammar::refMemberAction(antlr.Token)",
"vars": {
"act": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::reportError(antlr.RecognitionException)",
"vars": {
"ex": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::<init>(java.lang.String, antlr.RuleBlock, antlr.CodeGenerator, antlr.ActionTransInfo)",
"vars": {
"currentRule": [],
"s": [],
"transInfo": [],
"generator": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
"vars": {
"currentRule": [],
"tInfo": [],
"actionStr": []
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::addTreeModelListener(javax.swing.event.TreeModelListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genMatchUsingAtomText(antlr.GrammarAtom)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::startTreeWalker(java.lang.String, antlr.Token, java.lang.String, java.lang.String)",
"vars": {
"file": [],
"superClass": [],
"name": [],
"doc": []
}
},
{
"method_signature": "antlr.StringUtils::stripFront(java.lang.String, char)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.BlockEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.DefaultToolErrorHandler::warnAltExitAmbiguity(antlr.Grammar, antlr.BlockWithImpliedExitPath, boolean, int, Lookahead[], int)",
"vars": {
"blk": [],
"grammar": [],
"sets": []
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::<init>(java.io.InputStream)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.debug.misc.MyTreeSelectionListener::valueChanged(javax.swing.event.TreeSelectionEvent)",
"vars": {
"event": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::addParserTokenListener(antlr.debug.ParserTokenListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.Parser::addMessageListener(antlr.debug.MessageListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.ImportVocabTokenManager::define(antlr.TokenSymbol)",
"vars": {
"ts": []
}
},
{
"method_signature": "antlr.ToolErrorHandler::warnAltExitAmbiguity(antlr.Grammar, antlr.BlockWithImpliedExitPath, boolean, int, Lookahead[], int)",
"vars": {
"blk": [],
"grammar": [],
"sets": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String)",
"vars": {
"node_type": [],
"el": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::addMessageListener(antlr.debug.MessageListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.TreeWalkerGrammar::setOption(java.lang.String, antlr.Token)",
"vars": {
"value": [],
"key": []
}
},
{
"method_signature": "antlr.DefaultToolErrorHandler::<init>(antlr.Tool)",
"vars": {
"tool": []
}
},
{
"method_signature": "antlr.preprocessor.Option::setName(java.lang.String)",
"vars": {
"n": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::getRangeExpression(int, int[])",
"vars": {
"elems": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::<init>(antlr.InputBuffer)",
"vars": {
"ib": []
}
},
{
"method_signature": "antlr.TreeParser::setASTNodeType(java.lang.String)",
"vars": {
"nodeType": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::defineToken(antlr.Token, antlr.Token)",
"vars": {
"tokliteral": [],
"tokname": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::setFileOption(antlr.Token, antlr.Token, java.lang.String)",
"vars": {
"filename": [],
"value": [],
"key": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::addSyntacticPredicateListener(antlr.debug.SyntacticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genASTDeclaration(antlr.AlternativeElement)",
"vars": {
"el": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::mangleLiteral(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.debug.ParserMatchAdapter::parserMatch(antlr.debug.ParserMatchEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.Tool::openOutputFile(java.lang.String)",
"vars": {
"f": []
}
},
{
"method_signature": "antlr.AlternativeElement::<init>(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.ANTLRParser::<init>(antlr.TokenStream, int)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.NoViableAltException::<init>(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::grammarFile(antlr.preprocessor.Hierarchy, java.lang.String)",
"vars": {
"file": [],
"hier": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genBody(antlr.LexerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.ANTLRLexer::escapeCharValue(java.lang.String)",
"vars": {
"cs": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::<init>(java.io.Reader)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.CharFormatter::literalString(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genMatchUsingAtomText(antlr.GrammarAtom)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.BaseAST::findAll(antlr.collections.AST)",
"vars": {
"target": []
}
},
{
"method_signature": "antlr.RuleBlock::findExceptionSpec(antlr.Token)",
"vars": {
"label": []
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getLookaheadTestTerm(int, antlr.collections.impl.BitSet)",
"vars": {
"p": []
}
},
{
"method_signature": "antlr.CodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
"vars": {
"v": []
}
},
{
"method_signature": "antlr.StringUtils::stripFront(java.lang.String, java.lang.String)",
"vars": {
"s": [],
"remove": []
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateAdapter::syntacticPredicateSucceeded(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.MismatchedTokenException::<init>(String[], antlr.collections.AST, antlr.collections.impl.BitSet, boolean)",
"vars": {
"set_": [],
"tokenNames_": [],
"node_": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::mapTreeVariable(antlr.AlternativeElement, java.lang.String)",
"vars": {
"e": [],
"name": []
}
},
{
"method_signature": "antlr.LLkParser::<init>(antlr.TokenStream, int)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genSemPred(java.lang.String, int)",
"vars": {
"pred": ["String"]
}
},
{
"method_signature": "antlr.MismatchedCharException::<init>(char, char, boolean, antlr.CharScanner)",
"vars": {
"scanner_": []
}
},
{
"method_signature": "antlr.Lookahead::combineWith(antlr.Lookahead)",
"vars": {
"q": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.OneOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.ExceptionSpec::addHandler(antlr.ExceptionHandler)",
"vars": {
"handler": []
}
},
{
"method_signature": "antlr.ANTLRParser::range(antlr.Token)",
"vars": {
"label": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::suitableForCaseExpression(antlr.Alternative)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::getLookaheadTestTerm(int, antlr.collections.impl.BitSet)",
"vars": {
"p": []
}
},
{
"method_signature": "antlr.TokenStreamBasicFilter::discard(antlr.collections.impl.BitSet)",
"vars": {
"mask": []
}
},
{
"method_signature": "antlr.Parser::traceOut(java.lang.String)",
"vars": {
"rname": []
}
},
{
"method_signature": "antlr.MakeGrammar::setBlock(antlr.AlternativeBlock, antlr.AlternativeBlock)",
"vars": {
"b": [],
"src": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genRuleHeader(antlr.RuleSymbol, boolean)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.Parser::removeSemanticPredicateListener(antlr.debug.SemanticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::FOLLOW(int, antlr.RuleEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.CharLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genBlockPreamble(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.debug.ParserMatchListener::parserMismatch(antlr.debug.ParserMatchEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.SemanticException::<init>(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.TokenRefElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.CppCharFormatter::literalString(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.TokenRangeElement)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.LexerSharedInputState::<init>(antlr.InputBuffer)",
"vars": {
"inbuf": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refReturnAction(antlr.Token)",
"vars": {
"returnAction": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::<init>(antlr.InputBuffer)",
"vars": {
"ib": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeParserMatchListener(antlr.debug.ParserMatchListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.preprocessor.Tool::<init>(antlr.Tool, String[])",
"vars": {
"args": [],
"t": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genGenericBlock(antlr.AlternativeBlock, java.lang.String)",
"vars": {
"blk": [],
"blkOp": []
}
},
{
"method_signature": "antlr.TreeParser::traceIn(java.lang.String, antlr.collections.AST)",
"vars": {
"rname": [],
"t": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genBlockPreamble(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genTokenTypes(antlr.TokenManager)",
"vars": {
"tm": []
}
},
{
"method_signature": "antlr.TokenSymbol::setASTNodeType(java.lang.String)",
"vars": {
"type": []
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::reportError(antlr.RecognitionException)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.collections.impl.LList::includes(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.collections.impl.Vector::setElementAt(java.lang.Object, int)",
"vars": {
"obj": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::startTreeWalker(java.lang.String, antlr.Token, java.lang.String, java.lang.String)",
"vars": {
"file": [],
"superClass": [],
"name": [],
"doc": []
}
},
{
"method_signature": "antlr.CommonToken::setText(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.collections.impl.BitSet::toString(java.lang.String, antlr.CharFormatter)",
"vars": {
"formatter": [],
"separator": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.GrammarAtom)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.StringLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::setTool(antlr.Tool)",
"vars": {
"tool": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.ActionElement)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.TreeElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genBlockFinish(antlr.CppBlockFinishingInfo, java.lang.String)",
"vars": {
"noViableAction": [],
"howToFinish": []
}
},
{
"method_signature": "antlr.debug.ParserMatchAdapter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refExceptionHandler(antlr.Token, antlr.Token)",
"vars": {
"action": [],
"exTypeAndName": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::setTool(antlr.Tool)",
"vars": {
"tool": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::setTool(antlr.Tool)",
"vars": {
"tool": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.debug.InputBufferReporter::inputBufferConsume(antlr.debug.InputBufferEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refRule(antlr.Token, antlr.Token, antlr.Token, antlr.Token, int)",
"vars": {
"args": [],
"r": [],
"idAssign": [],
"label": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.RuleRefElement)",
"vars": {
"rr": []
}
},
{
"method_signature": "antlr.debug.InputBufferAdapter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.GrammarAtom::setLabel(java.lang.String)",
"vars": {
"label_": []
}
},
{
"method_signature": "antlr.ASTNULLType::initialize(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.Tool::fileMinusPath(java.lang.String)",
"vars": {
"f": []
}
},
{
"method_signature": "antlr.ANTLRError::<init>(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.MakeGrammar::createOptionalRuleRef(java.lang.String, antlr.Token)",
"vars": {
"start": [],
"rule": []
}
},
{
"method_signature": "antlr.collections.AST::equalsTree(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.MakeGrammar::refSemPred(antlr.Token)",
"vars": {
"pred": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
"vars": {
"currentRule": [],
"tInfo": [],
"actionStr": []
}
},
{
"method_signature": "antlr.CommonHiddenStreamToken::<init>(int, java.lang.String)",
"vars": {
"txt": []
}
},
{
"method_signature": "antlr.ANTLRParser::checkForMissingEndRule(antlr.Token)",
"vars": {
"label": []
}
},
{
"method_signature": "antlr.build.ANTLR::jar(antlr.build.Tool)",
"vars": {
"tool": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.debug.InputBufferAdapter::inputBufferMark(antlr.debug.InputBufferEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::_print(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.ASTFactory::setTokenTypeToASTClassMap(java.util.Hashtable)",
"vars": {
"tokenTypeToClassMap": []
}
},
{
"method_signature": "antlr.CharScanner::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::setSubruleOption(antlr.Token, antlr.Token)",
"vars": {
"value": [],
"key": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::parserMismatch(antlr.debug.ParserMatchEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genMatch(antlr.GrammarAtom)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.LexerSharedInputState::<init>(java.io.Reader)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.Parser::removeParserMatchListener(antlr.debug.ParserMatchListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.TokenStreamHiddenTokenFilter::getHiddenBefore(antlr.CommonHiddenStreamToken)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.MismatchedCharException::<init>(char, antlr.collections.impl.BitSet, boolean, antlr.CharScanner)",
"vars": {
"scanner_": [],
"set_": []
}
},
{
"method_signature": "antlr.MakeGrammar::createNextTokenRule(antlr.Grammar, antlr.collections.impl.Vector, java.lang.String)",
"vars": {
"rname": [],
"g": [],
"lexRules": []
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::<init>(antlr.LexerSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.JavaCharFormatter::escapeString(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refExceptionHandler(antlr.Token, antlr.Token)",
"vars": {
"action": [],
"exTypeAndName": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.TokenRefElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.AlternativeBlock::setInitAction(java.lang.String)",
"vars": {
"initAction_": []
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::addGrammar(antlr.preprocessor.Grammar)",
"vars": {
"gr": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.BlockEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::getRangeExpression(int, int[])",
"vars": {
"elems": []
}
},
{
"method_signature": "antlr.debug.InputBufferAdapter::inputBufferRewind(antlr.debug.InputBufferEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::setTarget(java.lang.Object)",
"vars": {
"target": []
}
},
{
"method_signature": "antlr.Grammar::define(antlr.RuleSymbol)",
"vars": {
"rs": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::removeMessageListener(antlr.debug.MessageListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::expandGrammarsInFile(java.lang.String)",
"vars": {
"fileName": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::getLookaheadTestExpression(antlr.Lookahead[], int)",
"vars": {
"look": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.WildcardElement)",
"vars": {
"wc": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::parserMatch(antlr.debug.ParserMatchEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMatchNot(int, int, java.lang.String, int)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.preprocessor.Grammar::setTokenSection(java.lang.String)",
"vars": {
"tk": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genTokenTypes(antlr.TokenManager)",
"vars": {
"tm": []
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateListener::syntacticPredicateFailed(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.BaseAST::xmlSerializeRootOpen(java.io.Writer)",
"vars": {
"out": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::setGrammarOption(antlr.Token, antlr.Token)",
"vars": {
"value": [],
"key": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String)",
"vars": {
"node_type": [],
"el": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::setRuleOption(antlr.Token, antlr.Token)",
"vars": {
"value": [],
"key": []
}
},
{
"method_signature": "antlr.ParserGrammar::processArguments(java.lang.String[])",
"vars": {
"args": []
}
},
{
"method_signature": "antlr.LLkParser::traceOut(java.lang.String)",
"vars": {
"rname": []
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::getChildCount(java.lang.Object)",
"vars": {
"parent": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
"vars": {
"str": [],
"atom": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.RuleRefElement)",
"vars": {
"rr": []
}
},
{
"method_signature": "antlr.preprocessor.GrammarFile::addHeaderAction(java.lang.String)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::FOLLOW(int, antlr.RuleEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.debug.ParserReporter::syntacticPredicateStarted(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.CharLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genCommonBlock(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genErrorCatchForElement(antlr.AlternativeElement)",
"vars": {
"el": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::beginSubRule(antlr.Token, antlr.Token, boolean)",
"vars": {
"start": [],
"label": []
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::setTool(antlr.Tool)",
"vars": {
"tool": []
}
},
{
"method_signature": "antlr.CodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
"vars": {
"str": [],
"atom": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.RuleRefElement)",
"vars": {
"rr": []
}
},
{
"method_signature": "antlr.Tool::parseSeparatedList(java.lang.String, char)",
"vars": {
"list": []
}
},
{
"method_signature": "antlr.debug.ParserTokenListener::parserConsume(antlr.debug.ParserTokenEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genCases(antlr.collections.impl.BitSet)",
"vars": {
"p": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.LexerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.StringLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::suitableForCaseExpression(antlr.Alternative)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
"vars": {
"transInfo": [],
"idParam": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refArgAction(antlr.Token)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.TreeElement)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::parserLA(antlr.debug.ParserTokenEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CodeGenerator::extractTypeOfAction(antlr.Token)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.build.Tool::perform(java.lang.String, java.lang.String)",
"vars": {
"app": [],
"action": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genTokenTypes(antlr.TokenManager)",
"vars": {
"tm": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genInclude(antlr.TreeWalkerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::setupGrammarParameters(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::<init>(antlr.TokenStream, int)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.preprocessor.Rule::<init>(java.lang.String, java.lang.String, antlr.collections.impl.IndexedVector, antlr.preprocessor.Grammar)",
"vars": {
"b": [],
"options": [],
"gr": [],
"n": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
"vars": {
"currentRule": [],
"tInfo": [],
"actionStr": []
}
},
{
"method_signature": "antlr.ANTLRParser::reportError(antlr.RecognitionException, java.lang.String)",
"vars": {
"s": [],
"e": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::<init>(antlr.InputBuffer)",
"vars": {
"cb": []
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::getFile(java.lang.String)",
"vars": {
"fileName": []
}
},
{
"method_signature": "antlr.build.Tool::error(java.lang.String)",
"vars": {
"msg": []
}
},
{
"method_signature": "antlr.DefaultToolErrorHandler::dumpSets(String[], int, antlr.Grammar, boolean, int, Lookahead[])",
"vars": {
"output": [],
"grammar": [],
"sets": []
}
},
{
"method_signature": "antlr.debug.TraceListener::exitRule(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.ANTLRParser::lexerSpec(java.lang.String)",
"vars": {
"doc": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::_refToken(antlr.Token, antlr.Token, antlr.Token, antlr.Token, boolean, int, boolean)",
"vars": {
"args": [],
"t": [],
"label": [],
"assignId": []
}
},
{
"method_signature": "antlr.ASTFactory::create(java.lang.String)",
"vars": {
"className": []
}
},
{
"method_signature": "antlr.CharFormatter::escapeString(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.Lookahead::<init>(antlr.collections.impl.BitSet)",
"vars": {
"p": []
}
},
{
"method_signature": "antlr.AlternativeBlock::setOption(antlr.Token, antlr.Token)",
"vars": {
"value": [],
"key": []
}
},
{
"method_signature": "antlr.CodeGenerator::setGrammar(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genBody(antlr.ParserGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genTokenTypes(antlr.TokenManager)",
"vars": {
"tm": []
}
},
{
"method_signature": "antlr.debug.InputBufferListener::inputBufferRewind(antlr.debug.InputBufferEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.debug.MessageEvent::<init>(java.lang.Object, int, java.lang.String)",
"vars": {
"source": [],
"text": []
}
},
{
"method_signature": "antlr.TreeBlockContext::addAlternativeElement(antlr.AlternativeElement)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::<init>(java.io.Reader)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.preprocessor.Grammar::inherit(antlr.preprocessor.Rule, antlr.preprocessor.Grammar)",
"vars": {
"r": [],
"superG": []
}
},
{
"method_signature": "antlr.DumpASTVisitor::visit(antlr.collections.AST)",
"vars": {
"node": []
}
},
{
"method_signature": "antlr.TokenManager::tokenDefined(java.lang.String)",
"vars": {
"symbol": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.BlockEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genAlt(antlr.Alternative, antlr.AlternativeBlock)",
"vars": {
"blk": [],
"alt": []
}
},
{
"method_signature": "antlr.debug.ParserReporter::parserMatchNot(antlr.debug.ParserMatchEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genTokenDefinitions(antlr.TokenManager)",
"vars": {
"tm": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.ParserGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::setArgOfRuleRef(antlr.Token)",
"vars": {
"argaction": []
}
},
{
"method_signature": "antlr.debug.ParserMatchAdapter::parserMatchNot(antlr.debug.ParserMatchEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.OneOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.preprocessor.Grammar::setHierarchy(antlr.preprocessor.Hierarchy)",
"vars": {
"hier": []
}
},
{
"method_signature": "antlr.preprocessor.Grammar::setFileName(java.lang.String)",
"vars": {
"f": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genBitSet(antlr.collections.impl.BitSet, int)",
"vars": {
"p": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.TokenRangeElement)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.ANTLRHashString::<init>(java.lang.String, antlr.CharScanner)",
"vars": {
"s": [],
"lexer": []
}
},
{
"method_signature": "antlr.GrammarAtom::<init>(antlr.Grammar, antlr.Token, int)",
"vars": {
"t": [],
"g": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refInitAction(antlr.Token)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.Alternative::<init>(antlr.AlternativeElement)",
"vars": {
"firstElement": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, java.lang.String)",
"vars": {
"rule": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::deterministic(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::setGrammar(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.LLkParser::traceIn(java.lang.String)",
"vars": {
"rname": []
}
},
{
"method_signature": "antlr.BaseAST::findAllPartial(antlr.collections.AST)",
"vars": {
"sub": []
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::readGrammarFile(java.lang.String)",
"vars": {
"file": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::setupOutput(java.lang.String)",
"vars": {
"className": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::mapTreeVariable(antlr.AlternativeElement, java.lang.String)",
"vars": {
"e": [],
"name": []
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::addInputBufferListener(antlr.debug.InputBufferListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genMatch(antlr.GrammarAtom)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::addGrammarFile(antlr.preprocessor.GrammarFile)",
"vars": {
"gf": []
}
},
{
"method_signature": "antlr.BaseAST::initialize(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::refresh(java.util.Vector)",
"vars": {
"listeners": []
}
},
{
"method_signature": "antlr.Tool::checkForInvalidArguments(java.lang.String[], antlr.collections.impl.BitSet)",
"vars": {
"args": [],
"cmdLineArgValid": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refElementOption(antlr.Token, antlr.Token)",
"vars": {
"value": [],
"option": []
}
},
{
"method_signature": "antlr.ASTNULLType::equalsListPartial(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.ASTNULLType::addChild(antlr.collections.AST)",
"vars": {
"c": []
}
},
{
"method_signature": "antlr.Parser::removeParserListener(antlr.debug.ParserListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.OneOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.RuleRefElement)",
"vars": {
"rr": []
}
},
{
"method_signature": "antlr.Parser::setInputState(antlr.ParserSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.CodeGenerator::reverseLexerRuleName(java.lang.String)",
"vars": {
"id": []
}
},
{
"method_signature": "antlr.TreeParser::match(antlr.collections.AST, antlr.collections.impl.BitSet)",
"vars": {
"b": [],
"t": []
}
},
{
"method_signature": "antlr.CodeGenerator::decodeLexerRuleName(java.lang.String)",
"vars": {
"id": []
}
},
{
"method_signature": "antlr.Lookahead::intersection(antlr.Lookahead)",
"vars": {
"q": []
}
},
{
"method_signature": "antlr.StringUtils::stripBack(java.lang.String, java.lang.String)",
"vars": {
"s": [],
"remove": []
}
},
{
"method_signature": "antlr.CharLiteralElement::<init>(antlr.LexerGrammar, antlr.Token, boolean, int)",
"vars": {
"t": [],
"g": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
"vars": {
"v": []
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateEvent::<init>(java.lang.Object, int)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.collections.AST::addChild(antlr.collections.AST)",
"vars": {
"c": []
}
},
{
"method_signature": "antlr.collections.impl.BitSet::toStringWithRanges(java.lang.String, antlr.CharFormatter)",
"vars": {
"formatter": [],
"separator": []
}
},
{
"method_signature": "antlr.SimpleTokenManager::getTokenSymbol(java.lang.String)",
"vars": {
"sym": []
}
},
{
"method_signature": "antlr.ANTLRHashString::<init>(char[], int, antlr.CharScanner)",
"vars": {
"buf": [],
"lexer": []
}
},
{
"method_signature": "antlr.MakeGrammar::beginTree(antlr.Token)",
"vars": {
"tok": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.ParserGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::startParser(java.lang.String, antlr.Token, java.lang.String, java.lang.String)",
"vars": {
"file": [],
"superClass": [],
"name": [],
"doc": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::removeParserListener(antlr.debug.ParserListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.collections.AST::equalsTreePartial(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.ANTLRHashString::setBuffer(char[], int)",
"vars": {
"buf": []
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::fireEvents(int, java.util.Vector)",
"vars": {
"listeners": []
}
},
{
"method_signature": "antlr.Grammar::setFilename(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genASTDeclaration(antlr.AlternativeElement)",
"vars": {
"el": []
}
},
{
"method_signature": "antlr.Tool::main(java.lang.String[])",
"vars": {
"args": []
}
},
{
"method_signature": "antlr.CharScanner::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CSharpBlockFinishingInfo::<init>(java.lang.String, boolean, boolean, boolean)",
"vars": {
"ps": []
}
},
{
"method_signature": "antlr.MakeGrammar::setUserExceptions(java.lang.String)",
"vars": {
"thr": []
}
},
{
"method_signature": "antlr.CodeGenerator::setBehavior(antlr.DefineGrammarSymbols)",
"vars": {
"behavior_": []
}
},
{
"method_signature": "antlr.Tool::pathToFile(java.lang.String)",
"vars": {
"f": []
}
},
{
"method_signature": "antlr.StringUtils::stripFrontBack(java.lang.String, java.lang.String, java.lang.String)",
"vars": {
"head": [],
"src": [],
"tail": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genLookaheadSetForAlt(antlr.Alternative)",
"vars": {
"alt": []
}
},
{
"method_signature": "antlr.BaseAST::xmlSerializeNode(java.io.Writer)",
"vars": {
"out": []
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::optionSpec(antlr.preprocessor.Grammar)",
"vars": {
"gr": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addParserMatchListener(antlr.debug.ParserMatchListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.MismatchedTokenException::<init>(String[], antlr.collections.AST, int, boolean)",
"vars": {
"tokenNames_": [],
"node_": []
}
},
{
"method_signature": "antlr.Parser::reportError(antlr.RecognitionException)",
"vars": {
"ex": []
}
},
{
"method_signature": "antlr.collections.AST::initialize(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.CharScanner::<init>(antlr.InputBuffer)",
"vars": {
"cb": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::removeParserMatchListener(antlr.debug.ParserMatchListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::isLeaf(java.lang.Object)",
"vars": {
"node": []
}
},
{
"method_signature": "antlr.preprocessor.Option::setRHS(java.lang.String)",
"vars": {
"rhs": []
}
},
{
"method_signature": "antlr.CppCharFormatter::escapeString(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.ZeroOrMoreBlock::<init>(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.TreeWalkerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::_refStringLiteral(antlr.Token, antlr.Token, int, boolean)",
"vars": {
"lit": [],
"label": []
}
},
{
"method_signature": "antlr.Parser::<init>(antlr.ParserSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.JavaCharFormatter::literalString(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.ASTNULLType::setFirstChild(antlr.collections.AST)",
"vars": {
"c": []
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::printHeaderAction(java.lang.String)",
"vars": {
"name": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.CharRangeElement)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.debug.TraceListener::enterRule(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.NoViableAltForCharException::<init>(char, java.lang.String, int)",
"vars": {
"fileName": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.RuleRefElement)",
"vars": {
"rr": []
}
},
{
"method_signature": "antlr.build.Tool::system(java.lang.String)",
"vars": {
"cmd": []
}
},
{
"method_signature": "antlr.TokenManager::getTokenSymbol(java.lang.String)",
"vars": {
"sym": []
}
},
{
"method_signature": "antlr.ANTLRParser::tokensSpecOptions(antlr.Token)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.RuleRefElement::setIdAssign(java.lang.String)",
"vars": {
"id": []
}
},
{
"method_signature": "antlr.collections.AST::setNextSibling(antlr.collections.AST)",
"vars": {
"n": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.ActionElement)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.ParserGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::QuoteForId(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.collections.List::add(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.CharRangeElement)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::addParserTokenListener(antlr.debug.ParserTokenListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.ZeroOrMoreBlock::<init>(antlr.Grammar, antlr.Token)",
"vars": {
"g": [],
"start": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::deterministic(antlr.OneOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.LexerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.MakeGrammar::refRule(antlr.Token, antlr.Token, antlr.Token, antlr.Token, int)",
"vars": {
"args": [],
"r": [],
"idAssign": [],
"label": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.TokenStreamException::<init>(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.TokenStreamHiddenTokenFilter::hide(antlr.collections.impl.BitSet)",
"vars": {
"mask": []
}
},
{
"method_signature": "antlr.TokenRangeElement::setLabel(java.lang.String)",
"vars": {
"label_": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::reportError(antlr.MismatchedCharException)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CodeGenerator::encodeLexerRuleName(java.lang.String)",
"vars": {
"id": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::getLookaheadTestTerm(int, antlr.collections.impl.BitSet)",
"vars": {
"p": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
"vars": {
"transInfo": [],
"idParam": []
}
},
{
"method_signature": "antlr.Parser::addParserTokenListener(antlr.debug.ParserTokenListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.ParserMatchListener::parserMatchNot(antlr.debug.ParserMatchEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.NameSpace::emitDeclarations(java.io.PrintWriter)",
"vars": {
"out": []
}
},
{
"method_signature": "antlr.TreeParser::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::setSubruleOption(antlr.Token, antlr.Token)",
"vars": {
"value": [],
"key": []
}
},
{
"method_signature": "antlr.preprocessor.Option::<init>(java.lang.String, java.lang.String, antlr.preprocessor.Grammar)",
"vars": {
"gr": [],
"rhs": [],
"n": []
}
},
{
"method_signature": "antlr.BlockWithImpliedExitPath::<init>(antlr.Grammar, antlr.Token)",
"vars": {
"g": [],
"start": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refWildcard(antlr.Token, antlr.Token, int)",
"vars": {
"t": [],
"label": []
}
},
{
"method_signature": "antlr.ANTLRLexer::<init>(java.io.InputStream)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::<init>(antlr.TokenBuffer)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.Grammar::setGrammarAnalyzer(antlr.LLkGrammarAnalyzer)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.Lookahead::toString(java.lang.String, antlr.CharFormatter, antlr.Grammar)",
"vars": {
"formatter": [],
"g": [],
"separator": []
}
},
{
"method_signature": "antlr.CharScanner::traceOut(java.lang.String)",
"vars": {
"rname": []
}
},
{
"method_signature": "antlr.RuleBlock::<init>(antlr.Grammar, java.lang.String, int, boolean)",
"vars": {
"r": [],
"g": []
}
},
{
"method_signature": "antlr.CodeGenerator::println(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.ANTLRHashString::setString(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.debug.Tracer::exitRule(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.GrammarSymbol::<init>(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::deterministicImpliedPath(antlr.BlockWithImpliedExitPath)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.RuleBlock::<init>(antlr.Grammar, java.lang.String)",
"vars": {
"r": [],
"g": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeDoneListener(antlr.debug.ListenerBase)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::addTraceListener(antlr.debug.TraceListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::setTool(antlr.Tool)",
"vars": {
"antlrTool": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refMemberAction(antlr.Token)",
"vars": {
"act": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.LexerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeMessageListener(antlr.debug.MessageListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CSharpNameSpace::<init>(java.lang.String)",
"vars": {
"name": []
}
},
{
"method_signature": "antlr.CodeGenerator::setTool(antlr.Tool)",
"vars": {
"tool": []
}
},
{
"method_signature": "antlr.preprocessor.Grammar::addOption(antlr.preprocessor.Option)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.preprocessor.Rule::setEnclosingGrammar(antlr.preprocessor.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.WildcardElement)",
"vars": {
"wc": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genASTDeclaration(antlr.AlternativeElement)",
"vars": {
"el": []
}
},
{
"method_signature": "antlr.Lookahead::<init>(java.lang.String)",
"vars": {
"c": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refToken(antlr.Token, antlr.Token, antlr.Token, antlr.Token, boolean, int, boolean)",
"vars": {
"args": [],
"t": [],
"label": [],
"assignId": []
}
},
{
"method_signature": "antlr.BaseAST::xmlSerialize(java.io.Writer)",
"vars": {
"out": []
}
},
{
"method_signature": "antlr.build.Tool::main(String[])",
"vars": {
"args": []
}
},
{
"method_signature": "antlr.debug.TraceAdapter::enterRule(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::processStringForASTConstructor(java.lang.String)",
"vars": {
"str": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::_println(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.Grammar::isDefined(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.Tool::panic(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.ExceptionHandler::<init>(antlr.Token, antlr.Token)",
"vars": {
"exceptionTypeAndName_": [],
"action_": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refSemPred(antlr.Token)",
"vars": {
"pred": []
}
},
{
"method_signature": "antlr.debug.ParserController::setParserEventSupport(antlr.debug.ParserEventSupport)",
"vars": {
"p": []
}
},
{
"method_signature": "antlr.collections.impl.BitSet::getRanges(int[])",
"vars": {
"elems": []
}
},
{
"method_signature": "antlr.ANTLRParser::<init>(antlr.TokenBuffer, antlr.ANTLRGrammarParseBehavior, antlr.Tool)",
"vars": {
"tool_": [],
"behavior_": [],
"tokenBuf": []
}
},
{
"method_signature": "antlr.debug.InputBufferReporter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::match(antlr.collections.impl.BitSet)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::removeParserMatchListener(antlr.debug.ParserMatchListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.ParserReporter::syntacticPredicateFailed(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.TokenStreamHiddenTokenFilter::<init>(antlr.TokenStream)",
"vars": {
"input": []
}
},
{
"method_signature": "antlr.BaseAST::equalsList(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.TreeSpecifierNode::setFirstChild(antlr.TreeSpecifierNode)",
"vars": {
"child": []
}
},
{
"method_signature": "antlr.CommonHiddenStreamToken::setHiddenBefore(antlr.CommonHiddenStreamToken)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.TreeWalkerGrammar::processArguments(String[])",
"vars": {
"args": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::removeCompetingPredictionSetsFromWildcard(Lookahead[], antlr.AlternativeElement, int)",
"vars": {
"el": [],
"look": []
}
},
{
"method_signature": "antlr.debug.ParserReporter::parserMismatchNot(antlr.debug.ParserMatchEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.TreeElement)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.Parser::setTokenBuffer(antlr.TokenBuffer)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genLookaheadSetForBlock(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.SimpleTokenManager::define(antlr.TokenSymbol)",
"vars": {
"ts": []
}
},
{
"method_signature": "antlr.debug.NewLineEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::<init>(java.io.InputStream)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.RuleRefElement::setArgs(java.lang.String)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireEvent(int, antlr.debug.ListenerBase)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.MismatchedCharException::<init>(char, char, char, boolean, antlr.CharScanner)",
"vars": {
"scanner_": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.RuleRefElement)",
"vars": {
"rr": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.TreeWalkerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genSemPred(java.lang.String, int)",
"vars": {
"pred": ["String"]
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
"vars": {
"currentRule": [],
"tInfo": [],
"actionStr": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.RuleEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.CharLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.RuleSymbol::addReference(antlr.RuleRefElement)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.ASTFactory::create(int, java.lang.String)",
"vars": {
"txt": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.ParserGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.Tool::doEverythingWrapper(String[])",
"vars": {
"args": []
}
},
{
"method_signature": "antlr.ASTIterator::<init>(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.collections.impl.IndexedVector::removeElement(java.lang.Object)",
"vars": {
"key": []
}
},
{
"method_signature": "antlr.LexerSharedInputState::<init>(java.io.InputStream)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::beginTree(antlr.Token)",
"vars": {
"tok": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::exitRule(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.Grammar::getSymbol(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.collections.impl.BitSet::or(antlr.collections.impl.BitSet)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::<init>(antlr.LexerSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::addSemPred(java.lang.String)",
"vars": {
"predicate": []
}
},
{
"method_signature": "antlr.Tool::parent(java.io.File)",
"vars": {
"f": []
}
},
{
"method_signature": "antlr.TokenStreamHiddenTokenFilter::getHiddenAfter(antlr.CommonHiddenStreamToken)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.debug.InputBufferEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genBlockFinish(antlr.JavaBlockFinishingInfo, java.lang.String)",
"vars": {
"noViableAction": [],
"howToFinish": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genRule(antlr.RuleSymbol)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::subruleCanBeInverted(antlr.AlternativeBlock, boolean)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::<init>(java.lang.String, antlr.RuleBlock, antlr.CodeGenerator, antlr.ActionTransInfo)",
"vars": {
"currentRule": [],
"s": [],
"transInfo": [],
"generator": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.CharRangeElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::file(antlr.ImportVocabTokenManager)",
"vars": {
"tm": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::setupDebugging(antlr.TokenStream, antlr.TokenBuffer)",
"vars": {
"lexer": [],
"tokenBuf": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.SynPredBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::getGrammar(java.lang.String)",
"vars": {
"gr": []
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.Grammar::setOption(java.lang.String, antlr.Token)",
"vars": {
"value": [],
"key": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.ZeroOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.TokenStreamSelector::push(java.lang.String)",
"vars": {
"sname": []
}
},
{
"method_signature": "antlr.CodeGenerator::processStringForASTConstructor(java.lang.String)",
"vars": {
"str": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genAlt(antlr.Alternative)",
"vars": {
"alt": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genElementAST(antlr.AlternativeElement)",
"vars": {
"el": []
}
},
{
"method_signature": "antlr.Tool::warning(String[], java.lang.String, int, int)",
"vars": {
"s": [],
"file": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.WildcardElement)",
"vars": {
"wc": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMismatch(java.lang.String, java.lang.String, int)",
"vars": {
"text": [],
"value": []
}
},
{
"method_signature": "antlr.Parser::removeSyntacticPredicateListener(antlr.debug.SyntacticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::removeParserTokenListener(antlr.debug.ParserTokenListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refWildcard(antlr.Token, antlr.Token, int)",
"vars": {
"t": [],
"label": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refStringLiteral(antlr.Token, antlr.Token, int, boolean)",
"vars": {
"lit": [],
"label": []
}
},
{
"method_signature": "antlr.ASTFactory::create(antlr.collections.AST)",
"vars": {
"tr": []
}
},
{
"method_signature": "antlr.CommonASTWithHiddenTokens::initialize(antlr.Token)",
"vars": {
"tok": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genTokenStrings(java.lang.String)",
"vars": {
"prefix": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.TokenRefElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::setText(java.lang.String)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genErrorCatchForElement(antlr.AlternativeElement)",
"vars": {
"el": []
}
},
{
"method_signature": "antlr.collections.impl.IndexedVector::getElement(java.lang.Object)",
"vars": {
"key": []
}
},
{
"method_signature": "antlr.OneOrMoreBlock::<init>(antlr.Grammar, antlr.Token)",
"vars": {
"g": [],
"start": []
}
},
{
"method_signature": "antlr.debug.ParserReporter::reportWarning(antlr.debug.MessageEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.StringLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::mangleLiteral(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.debug.MessageListener::reportWarning(antlr.debug.MessageEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::<init>(antlr.TokenStream)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.debug.TraceAdapter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
"vars": {
"str": [],
"atom": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genBlockPreamble(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.RuleBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.NoViableAltException::<init>(antlr.Token, java.lang.String)",
"vars": {
"t": [],
"fileName_": []
}
},
{
"method_signature": "antlr.CodeGenerator::elementsAreRange(int[])",
"vars": {
"elems": []
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.collections.AST::setText(java.lang.String)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::<init>(antlr.TokenBuffer, int)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::removeParserListener(antlr.debug.ParserListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.ParserGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeSyntacticPredicateListener(antlr.debug.SyntacticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.InputBufferEvent::<init>(java.lang.Object, int, char, int)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String, java.lang.String)",
"vars": {
"node_type": [],
"el": [],
"var_name": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genMatch(antlr.GrammarAtom)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genErrorTryForElement(antlr.AlternativeElement)",
"vars": {
"el": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genBlockInitAction(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.ANTLRLexer::tokenTypeForCharLiteral(java.lang.String)",
"vars": {
"lit": []
}
},
{
"method_signature": "antlr.Tool::fatalError(java.lang.String)",
"vars": {
"message": []
}
},
{
"method_signature": "antlr.GrammarSymbol::setId(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.CharLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::addSemanticPredicateListener(antlr.debug.SemanticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.MismatchedTokenException::<init>(String[], antlr.Token, int, int, boolean, java.lang.String)",
"vars": {
"token_": [],
"fileName_": [],
"tokenNames_": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::<init>(java.io.InputStream)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.BlockEndElement::<init>(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genErrorTryForElement(antlr.AlternativeElement)",
"vars": {
"el": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refStringLiteral(antlr.Token, antlr.Token, int, boolean)",
"vars": {
"lit": [],
"label": []
}
},
{
"method_signature": "antlr.TokenRangeElement::<init>(antlr.Grammar, antlr.Token, antlr.Token, int)",
"vars": {
"g": [],
"t1": [],
"t2": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
"vars": {
"v": []
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::<init>(antlr.Tool)",
"vars": {
"tool": []
}
},
{
"method_signature": "antlr.TokenStreamRecognitionException::<init>(antlr.RecognitionException)",
"vars": {
"re": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::println(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genFollowSetForRuleBlock(antlr.RuleBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::<init>(java.io.InputStream)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.ASTFactory::make(antlr.collections.impl.ASTArray)",
"vars": {
"nodes": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::getLookaheadTestExpression(antlr.Alternative, int)",
"vars": {
"alt": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.LexerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refArgAction(antlr.Token)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.BlockWithImpliedExitPath::<init>(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::GenRuleInvocation(antlr.RuleRefElement)",
"vars": {
"rr": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genLookaheadSetForAlt(antlr.Alternative)",
"vars": {
"alt": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::beginExceptionSpec(antlr.Token)",
"vars": {
"label": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genMatchUsingAtomTokenType(antlr.GrammarAtom)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.MakeGrammar::setRuleOption(antlr.Token, antlr.Token)",
"vars": {
"value": [],
"key": []
}
},
{
"method_signature": "antlr.RecognitionException::<init>(java.lang.String, java.lang.String, int, int)",
"vars": {
"s": [],
"fileName_": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refRule(antlr.Token, antlr.Token, antlr.Token, antlr.Token, int)",
"vars": {
"r": [],
"idAssign": [],
"arg": [],
"label": []
}
},
{
"method_signature": "antlr.CharScanner::setInputState(antlr.LexerSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.MakeGrammar::refElementOption(antlr.Token, antlr.Token)",
"vars": {
"value": [],
"option": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.CharLiteralElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refElementOption(antlr.Token, antlr.Token)",
"vars": {
"value": [],
"option": []
}
},
{
"method_signature": "antlr.MakeGrammar::refInitAction(antlr.Token)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.CodeGenerator::setAnalyzer(antlr.LLkGrammarAnalyzer)",
"vars": {
"analyzer_": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.BlockEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.TreeWalkerGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.debug.InputBufferReporter::inputBufferLA(antlr.debug.InputBufferEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.preprocessor.Tool::main(String[])",
"vars": {
"args": []
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::<init>(java.io.Reader)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.ByteBuffer::<init>(java.io.InputStream)",
"vars": {
"input_": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genAlt(antlr.Alternative)",
"vars": {
"alt": []
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::optionsToString(antlr.collections.impl.IndexedVector)",
"vars": {
"options": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refInitAction(antlr.Token)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.debug.ParserTokenEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.CharBuffer::<init>(java.io.Reader)",
"vars": {
"input_": []
}
},
{
"method_signature": "antlr.ANTLRHashString::equals(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.build.Tool::stdout(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genSynPred(antlr.SynPredBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.ASTFactory::addASTChild(antlr.ASTPair, antlr.collections.AST)",
"vars": {
"currentAST": [],
"child": []
}
},
{
"method_signature": "antlr.ASTFactory::create(antlr.Token)",
"vars": {
"tok": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getLookaheadTestExpression(antlr.Alternative, int)",
"vars": {
"alt": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.ActionElement)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genBlockPreamble(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genHeader(java.lang.String)",
"vars": {
"fileName": []
}
},
{
"method_signature": "antlr.Grammar::setTokenManager(antlr.TokenManager)",
"vars": {
"tokenManager_": []
}
},
{
"method_signature": "antlr.debug.MessageAdapter::reportWarning(antlr.debug.MessageEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.AlternativeBlock::<init>(antlr.Grammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.ANTLRParser::terminal(antlr.Token)",
"vars": {
"label": []
}
},
{
"method_signature": "antlr.Lookahead::toString(java.lang.String, antlr.collections.impl.Vector)",
"vars": {
"vocab": [],
"separator": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.TokenRefElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.debug.ParserReporter::parserMatch(antlr.debug.ParserMatchEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.TokenRangeElement)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::removeInputBufferListener(antlr.debug.InputBufferListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::removeMessageListener(antlr.debug.MessageListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::removeSemanticPredicateListener(antlr.debug.SemanticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CppBlockFinishingInfo::<init>(java.lang.String, boolean, boolean, boolean)",
"vars": {
"ps": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addParserTokenListener(antlr.debug.ParserTokenListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::line(antlr.ImportVocabTokenManager)",
"vars": {
"tm": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.TreeElement)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::parserConsume(antlr.debug.ParserTokenEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::<init>(antlr.LexerSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.CSharpNameSpace::emitClosures(java.io.PrintWriter)",
"vars": {
"out": []
}
},
{
"method_signature": "antlr.ASTVisitor::visit(antlr.collections.AST)",
"vars": {
"node": []
}
},
{
"method_signature": "antlr.CodeGenerator::_printAction(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.TokenRangeElement)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refCharLiteral(antlr.Token, antlr.Token, boolean, int, boolean)",
"vars": {
"lit": [],
"label": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genLineNo(antlr.Token)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.debug.ParserTokenListener::parserLA(antlr.debug.ParserTokenEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.CharRangeElement)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genRule(antlr.RuleSymbol)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::reportError(antlr.RecognitionException)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::setCharVocabulary(antlr.collections.impl.BitSet)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.CodeGenerator::extractTypeOfAction(java.lang.String, int, int)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CharScanner::setTokenObjectClass(java.lang.String)",
"vars": {
"cl": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refCharRange(antlr.Token, antlr.Token, antlr.Token, int, boolean)",
"vars": {
"label": [],
"t1": [],
"t2": []
}
},
{
"method_signature": "antlr.ANTLRParser::ebnf(antlr.Token, boolean)",
"vars": {
"label": []
}
},
{
"method_signature": "antlr.TreeSpecifierNode::setNextSibling(antlr.TreeSpecifierNode)",
"vars": {
"sibling": []
}
},
{
"method_signature": "antlr.Parser::defaultDebuggingSetup(antlr.TokenStream, antlr.TokenBuffer)",
"vars": {
"tokBuf": [],
"lexer": []
}
},
{
"method_signature": "antlr.DefaultFileLineFormatter::getFormatString(java.lang.String, int, int)",
"vars": {
"fileName": []
}
},
{
"method_signature": "antlr.BaseAST::doWorkForFindAll(antlr.collections.impl.Vector, antlr.collections.AST, boolean)",
"vars": {
"v": [],
"target": []
}
},
{
"method_signature": "antlr.ANTLRLexer::<init>(java.io.Reader)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::startParser(java.lang.String, antlr.Token, java.lang.String, java.lang.String)",
"vars": {
"file": [],
"superClass": [],
"name": [],
"doc": []
}
},
{
"method_signature": "antlr.Grammar::getOption(java.lang.String)",
"vars": {
"key": []
}
},
{
"method_signature": "antlr.debug.SemanticPredicateListener::semanticPredicateEvaluated(antlr.debug.SemanticPredicateEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.preprocessor.Grammar::inherit(antlr.preprocessor.Option, antlr.preprocessor.Grammar)",
"vars": {
"superG": [],
"o": []
}
},
{
"method_signature": "antlr.debug.TraceEvent::<init>(java.lang.Object, int, int, int, int)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genBitsets(antlr.collections.impl.Vector, int)",
"vars": {
"bitsetList": []
}
},
{
"method_signature": "antlr.TokenRefElement::<init>(antlr.Grammar, antlr.Token, boolean, int)",
"vars": {
"t": [],
"g": []
}
},
{
"method_signature": "antlr.debug.Tracer::enterRule(antlr.debug.TraceEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::textOrChar(java.lang.String)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMismatch(char, java.lang.String, int)",
"vars": {
"target": []
}
},
{
"method_signature": "antlr.collections.impl.BitSet::subtractInPlace(antlr.collections.impl.BitSet)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addMessageListener(antlr.debug.MessageListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::setFileOption(antlr.Token, antlr.Token, java.lang.String)",
"vars": {
"filename": [],
"value": [],
"key": []
}
},
{
"method_signature": "antlr.MakeGrammar::refToken(antlr.Token, antlr.Token, antlr.Token, antlr.Token, boolean, int, boolean)",
"vars": {
"args": [],
"t": [],
"idAssign": [],
"label": []
}
},
{
"method_signature": "antlr.ParserGrammar::<init>(java.lang.String, antlr.Tool, java.lang.String)",
"vars": {
"tool_": [],
"superClass": [],
"className_": []
}
},
{
"method_signature": "antlr.CommonAST::<init>(antlr.Token)",
"vars": {
"tok": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::suitableForCaseExpression(antlr.Alternative)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.collections.impl.BitSet::equals(java.lang.Object)",
"vars": {
"obj": []
}
},
{
"method_signature": "antlr.ASTFactory::dupTree(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.preprocessor.Rule::setThrowsSpec(java.lang.String)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.MakeGrammar::defineRuleName(antlr.Token, java.lang.String, boolean, java.lang.String)",
"vars": {
"r": [],
"access": [],
"docComment": []
}
},
{
"method_signature": "antlr.Lookahead::toString(java.lang.String, antlr.CharFormatter)",
"vars": {
"formatter": [],
"separator": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.ActionElement)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.ParserGrammar)",
"vars": {
"g": []
}
},
{
"method_signature": "antlr.Grammar::getIntegerOption(java.lang.String)",
"vars": {
"key": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::reportError(antlr.debug.MessageEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.TokenManager::setName(java.lang.String)",
"vars": {
"n": []
}
},
{
"method_signature": "antlr.debug.ParserMatchAdapter::parserMismatchNot(antlr.debug.ParserMatchEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::reportError(antlr.RecognitionException)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genSynPred(antlr.SynPredBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.CSharpCharFormatter::escapeString(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.ActionElement)",
"vars": {
"action": []
}
},
{
"method_signature": "antlr.ANTLRParser::<init>(antlr.TokenBuffer)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.CharScanner::append(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::startLexer(java.lang.String, antlr.Token, java.lang.String, java.lang.String)",
"vars": {
"file": [],
"superClass": [],
"name": [],
"doc": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.BlockEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.RecognitionException::<init>(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.debug.InputBufferReporter::inputBufferRewind(antlr.debug.InputBufferEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::<init>(java.io.InputStream)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::addMessageListener(antlr.debug.MessageListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.RuleBlock::setEndElement(antlr.RuleEndElement)",
"vars": {
"re": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMatch(int, java.lang.String, int)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.collections.impl.BitSet::orInPlace(antlr.collections.impl.BitSet)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.TokenStreamBasicFilter::<init>(antlr.TokenStream)",
"vars": {
"input": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::setGrammarOption(antlr.Token, antlr.Token)",
"vars": {
"value": [],
"key": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.TokenRangeElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.Grammar::setCodeGenerator(antlr.CodeGenerator)",
"vars": {
"gen": []
}
},
{
"method_signature": "antlr.WildcardElement::setLabel(java.lang.String)",
"vars": {
"label_": []
}
},
{
"method_signature": "antlr.CharScanner::match(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addTraceListener(antlr.debug.TraceListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::setUserExceptions(java.lang.String)",
"vars": {
"thr": []
}
},
{
"method_signature": "antlr.collections.impl.LList::insertHead(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.CodeGenerator::genTokenInterchange(antlr.TokenManager)",
"vars": {
"tm": []
}
},
{
"method_signature": "antlr.Tool::error(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.TokenRangeElement)",
"vars": {
"r": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::syntacticPredicateStarted(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.Alternative::addElement(antlr.AlternativeElement)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::mapTreeVariable(antlr.AlternativeElement, java.lang.String)",
"vars": {
"e": [],
"name": []
}
},
{
"method_signature": "antlr.MakeGrammar::refPreambleAction(antlr.Token)",
"vars": {
"act": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.TokenRefElement)",
"vars": {
"atom": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMatch(java.lang.String, int)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genRule(antlr.RuleSymbol)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.ASTFactory::setASTNodeType(java.lang.String)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.preprocessor.Grammar::setPreambleAction(java.lang.String)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::deterministic(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String, java.lang.String)",
"vars": {
"node_type": [],
"el": [],
"var_name": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::removeParserTokenListener(antlr.debug.ParserTokenListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.DebuggingInputBuffer::removeInputBufferListener(antlr.debug.InputBufferListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::reportWarning(antlr.debug.MessageEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.collections.AST::equals(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.Grammar::processArguments(String[])",
"vars": {
"args": []
}
},
{
"method_signature": "antlr.RecognitionException::<init>(java.lang.String, java.lang.String, int)",
"vars": {
"s": [],
"fileName_": []
}
},
{
"method_signature": "antlr.collections.AST::initialize(int, java.lang.String)",
"vars": {
"txt": []
}
},
{
"method_signature": "antlr.CommonHiddenStreamToken::<init>(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.debug.MessageEvent::setText(java.lang.String)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genSynPred(antlr.SynPredBlock, java.lang.String)",
"vars": {
"blk": [],
"lookaheadExpr": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.WildcardElement)",
"vars": {
"wc": []
}
},
{
"method_signature": "antlr.CodeGenerator::printAction(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.TreeElement::<init>(antlr.Grammar, antlr.Token)",
"vars": {
"g": [],
"start": []
}
},
{
"method_signature": "antlr.ActionElement::<init>(antlr.Grammar, antlr.Token)",
"vars": {
"t": [],
"g": []
}
},
{
"method_signature": "antlr.TreeParser::match(antlr.collections.AST, int)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.LexerGrammar)",
"vars": {
"g": []
}
}
]
