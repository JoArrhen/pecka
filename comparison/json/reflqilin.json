[
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.AlternativeBlock::toString()",
    "vars": {
      "s": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.Token::getText()>() <antlr.actions.java.ActionLexer::mTEXT_ITEM(boolean)",
    "vars": {
      "rule": []
    }
  },
  {
    "method_signature": "antlr.preprocessor.Grammar::inherit(java.lang.String, antlr.preprocessor.Grammar)",
    "vars": {
      "memberAction": ["String", "Map"],
      "superG": ["Grammar"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genBody(antlr.ParserGrammar)",
    "vars": {
      "rs": ["RuleSymbol", "AlternativeBlock"],
      "g": ["ParserGrammar"],
      "sym": ["RuleSymbol", "AlternativeBlock"],
      "sup": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genBitsets(antlr.collections.impl.Vector, int)",
    "vars": {
      "bitsetList": ["Vector"],
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.GrammarFile::toString()",
    "vars": {
      "h": ["String"],
      "g": ["Grammar"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::terminal(antlr.Token)",
    "vars": {
      "label": ["CommonToken", "Token", "Object"],
      "args": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::gen(antlr.WildcardElement)",
    "vars": {
      "wc": ["WildcardElement"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.NoViableAltForCharException::getMessage()",
    "vars": {
      "mesg": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::refExceptionHandler(antlr.Token, antlr.Token)",
    "vars": {
      "action": ["CommonToken", "Token", "Object"],
      "exTypeAndName": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::refToken(antlr.Token, antlr.Token, antlr.Token, antlr.Token, boolean, int, boolean)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"],
      "label": ["CommonToken", "Token", "Object"],
      "assignId": ["CommonToken", "Token", "Object"],
      "args": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::genNextToken()",
    "vars": {
      "errFinish": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.Lookahead::toString(java.lang.String, antlr.CharFormatter)",
    "vars": {
      "d": ["StringIndexOutOfBoundsException", "IllegalArgumentException"],
      "f": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.WildcardElement::toString()",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::labelElement(antlr.AlternativeElement, antlr.Token)",
    "vars": {
      "el": ["TreeElement", "TokenRangeElement", "StringLiteralElement", "RuleRefElement", "WildcardElement", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "RuleBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"],
      "label": ["CommonToken", "Token", "Object"],
      "altEl": ["TreeElement", "TokenRangeElement", "StringLiteralElement", "RuleRefElement", "WildcardElement", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "RuleBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.AlternativeBlock::<init>(antlr.Grammar, antlr.Token, boolean)",
    "vars": {
      "start": ["CommonToken", "Token", "Object"],
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.ImportVocabTokenManager::<init>(antlr.Grammar, java.lang.String, java.lang.String, antlr.Tool)",
    "vars": {
      "grammarFile": ["File"],
      "grammar": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"],
      "name_": ["String", "Map"],
      "filename_": ["String"],
      "tool_": ["Tool"]
    }
  },
  {
    "method_signature": "dacapo.FileDigest::replaceAllFixed(java.lang.String, java.lang.String, java.lang.String)",
    "vars": {
      "replacement": ["String"],
      "line": ["String"],
      "substr": ["String"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.preprocessor.Rule::toString()",
    "vars": {
      "s": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genBody(antlr.TreeWalkerGrammar)",
    "vars": {
      "rs": ["RuleSymbol", "AlternativeBlock"],
      "sym": ["RuleSymbol", "AlternativeBlock"],
      "g": ["TreeWalkerGrammar"],
      "sup": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::gen(antlr.LexerGrammar)",
    "vars": {
      "g": ["LexerGrammar"],
      "sup": ["String", "Map"],
      "key": ["String", "Map"],
      "s#259": ["RuleSymbol", "AlternativeBlock"],
      "s#266": ["RuleSymbol", "AlternativeBlock"],
      "s": ["StringLiteralSymbol"],
      "prefix": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String)",
    "vars": {
      "el": ["TreeElement", "TokenRangeElement", "RuleRefElement", "StringLiteralElement", "WildcardElement", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "RuleBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"],
      "node_type": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::FOLLOW(int, antlr.RuleEndElement)",
    "vars": {
      "re#5": ["RuleSymbol", "AlternativeBlock"],
      "re": ["RuleEndElement", "RuleBlock"],
      "rule": ["String", "Map"],
      "rs": ["RuleSymbol", "AlternativeBlock"],
      "rb": ["RuleBlock"],
      "end": ["RuleEndElement", "RuleBlock"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::<init>(antlr.Tool, java.lang.String[], antlr.LLkAnalyzer)",
    "vars": {
      "args_": ["String[]"],
      "analyzer_": ["LLkAnalyzer"],
      "tool_": ["Tool"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genNextToken()",
    "vars": {
      "rs_2": ["RuleSymbol", "AlternativeBlock"],
      "filterRule": ["String", "Map"],
      "rr#73": ["String"],
      "rs_1": ["RuleSymbol", "AlternativeBlock"],
      "rr": ["RuleBlock", "RuleRefElement", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::endSubRule()",
    "vars": {
      "ctx": ["TreeBlockContext", "BlockContext"],
      "block": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "OneOrMoreBlock", "SynPredBlock", "TreeElement"],
      "newline": ["SynPredBlock"]
    }
  },
  {
    "method_signature": "antlr.Lookahead::toString(java.lang.String, antlr.CharFormatter, antlr.Grammar)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"],
      "formatter": ["JavaCharFormatter"],
      "separator": ["String"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.StringLiteralElement)",
    "vars": {
      "atom": ["StringLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::markBitsetForGen(antlr.collections.impl.BitSet)",
    "vars": {
      "set": ["BitSet", "Lookahead"],
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.ParserGrammar::<init>(java.lang.String, antlr.Tool, java.lang.String)",
    "vars": {
      "className_": ["String", "Map"],
      "superClass": ["String", "Map"],
      "tool_": ["Tool"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::startParser(java.lang.String, antlr.Token, java.lang.String, java.lang.String)",
    "vars": {
      "name": ["CommonToken", "Token", "Object"],
      "doc": ["String", "Map"],
      "superClass": ["String", "Map"],
      "file": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_2()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::subtractInPlace(antlr.collections.impl.BitSet)",
    "vars": {
      "a": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Grammar::expandInPlace()",
    "vars": {
      "o": ["Option", "IndexedVector"],
      "r": ["Rule"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::gen(antlr.ActionElement)",
    "vars": {
      "action": ["ActionElement"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::gen(antlr.LexerGrammar)",
    "vars": {
      "g": ["LexerGrammar"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.actions.csharp.ActionLexer::mAST_CONSTRUCTOR(boolean)",
    "vars": {
      "args": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String, java.lang.String)",
    "vars": {
      "el": ["TreeElement", "TokenRangeElement", "RuleRefElement", "StringLiteralElement", "WildcardElement", "RuleBlock", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"],
      "var_name": ["String", "Map"],
      "node_type": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.Vector::removeElement(java.lang.Object)",
    "vars": {
      "nativeArrayCopy15": ["RuleRefElement", "Map", "WildcardElement", "ExceptionHandler", "Option", "BitSet", "SynPredBlock", "TreeWalkerGrammar", "ZeroOrMoreBlock", "String", "TreeElement", "IndexedVector", "ParserGrammar", "TokenRangeElement", "StringLiteralElement", "LexerGrammar", "Rule", "Alternative", "CharLiteralElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "Lookahead", "TokenRefElement", "RuleSymbol", "Grammar", "AlternativeBlock"],
      "o": ["ParserGrammar", "TreeWalkerGrammar", "RuleRefElement", "LexerGrammar", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::optionSpec(antlr.preprocessor.Grammar)>($stack18) <antlr.preprocessor.Preprocessor::class_def(java.lang.String, antlr.preprocessor.Hierarchy)",
    "vars": {
      "classOptions": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "Unsafe", "ClassCastException", "Token", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.CSharpNameSpace::emitClosures(java.io.PrintWriter)",
    "vars": {
      "out": ["PrintWriter"]
    }
  },
  {
    "method_signature": "antlr.Lookahead::toString(java.lang.String, antlr.CharFormatter)",
    "vars": {
      "e": ["String"],
      "separator": ["String"],
      "d": ["String"],
      "f": ["String"],
      "formatter": ["JavaCharFormatter"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genBody(antlr.ParserGrammar)",
    "vars": {
      "g": ["ParserGrammar"],
      "sym": ["RuleSymbol", "AlternativeBlock"],
      "rs": ["RuleSymbol", "AlternativeBlock"],
      "sup": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::genRule(antlr.RuleSymbol)",
    "vars": {
      "ruleType": ["String"],
      "s": ["RuleSymbol", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.RuleBlock::<init>(antlr.Grammar, java.lang.String)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"],
      "r": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::gen(antlr.TreeWalkerGrammar)",
    "vars": {
      "g": ["TreeWalkerGrammar"],
      "sup": ["String", "Map"],
      "sym": ["RuleSymbol", "AlternativeBlock"],
      "rs": ["RuleSymbol", "AlternativeBlock"],
      "prefix": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
    "vars": {
      "tInfo": ["CppBlockFinishingInfo", "ActionTransInfo"],
      "actionStr": ["String", "Map"],
      "currentRule": ["RuleBlock"]
    }
  },
  {
    "method_signature": "antlr.Grammar::<init>(java.lang.String, antlr.Tool, java.lang.String)",
    "vars": {
      "className_": ["String", "Map"],
      "superClass": ["String", "Map"],
      "tool_": ["Tool"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.actions.cpp.ActionLexer::mAST_CONSTRUCTOR(boolean)",
    "vars": {
      "ys": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::rootNode()",
    "vars": {
      "label": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::getRangeExpression(int, int[])",
    "vars": {
      "elems": []
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.JavaCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "e": ["StringIndexOutOfBoundsException", "IllegalArgumentException"],
      "a#116": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.IndexedVector::appendElement(java.lang.Object, java.lang.Object)",
    "vars": {
      "value": ["Rule", "Option", "Grammar", "IndexedVector"],
      "key": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ANTLRTokdefLexer::mk_tokenSet_3()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genNextToken()",
    "vars": {
      "rs_2": ["RuleSymbol", "AlternativeBlock"],
      "filterRule": ["String", "Map"],
      "errFinish": ["String"],
      "rs_1": ["RuleSymbol", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.Lookahead::toString(java.lang.String, antlr.collections.impl.Vector)",
    "vars": {
      "f": ["String"],
      "d": ["String"],
      "separator": ["String"],
      "vocab": ["Vector"]
    }
  },
  {
    "method_signature": "antlr.CharRangeElement::<init>(antlr.LexerGrammar, antlr.Token, antlr.Token, int)",
    "vars": {
      "t2": ["CommonToken", "Token", "Object"],
      "g": ["LexerGrammar"],
      "t1": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.PreservingFileWriter::close()",
    "vars": {
      "target": ["BufferedWriter"],
      "source": ["BufferedReader"],
      "buf2": [],
      "buffer": []
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::gen()",
    "vars": {
      "tm": ["ImportVocabTokenManager", "SimpleTokenManager"],
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::startTreeWalker(java.lang.String, antlr.Token, java.lang.String, java.lang.String)",
    "vars": {
      "name": ["CommonToken", "Token", "Object"],
      "doc": ["String", "Map"],
      "superClass": ["String", "Map"],
      "file": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::mangleLiteral(java.lang.String)",
    "vars": {
      "mangled": ["String", "Map"],
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Token::setText(java.lang.String)",
    "vars": {
      "t": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.AlternativeBlock::removeTrackingOfRuleRefs(antlr.Grammar)",
    "vars": {
      "rs": ["RuleSymbol", "AlternativeBlock"],
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"],
      "elem": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"],
      "rr": ["RuleBlock", "RuleRefElement", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::gen(antlr.ActionElement)",
    "vars": {
      "action": ["ActionElement"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::encodeLexerRuleName(java.lang.String)>($stack8) <antlr.DefineGrammarSymbols::defineRuleName(antlr.Token, java.lang.String, boolean, java.lang.String)",
    "vars": {
      "id": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.TreeBlockContext::addAlternativeElement(antlr.AlternativeElement)",
    "vars": {
      "e": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"],
      "tree": ["TreeElement"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::getLookaheadTestTerm(int, antlr.collections.impl.BitSet)",
    "vars": {
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::gen(antlr.TokenRefElement)",
    "vars": {
      "atom": ["TokenRefElement"]
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::mTEXT_ITEM(boolean)",
    "vars": {
      "a5": ["Token", "Object"],
      "rule": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Alternative::<init>(antlr.AlternativeElement)",
    "vars": {
      "firstElement": ["AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.DefaultToolErrorHandler::warnAltAmbiguity(antlr.Grammar, antlr.AlternativeBlock, boolean, int, antlr.Lookahead[], int, int)",
    "vars": {
      "grammar": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"],
      "sets": ["Lookahead[]"],
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"],
      "rri": ["RuleBlock", "RuleRefElement", "AlternativeBlock"],
      "rrj": ["RuleBlock", "RuleRefElement", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CSharpCodeGenerator::genNextToken()",
    "vars": {
      "rr#73": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.MismatchedCharException::<init>(char, char, boolean, antlr.CharScanner)",
    "vars": {
      "scanner_": ["ANTLRLexer", "PreprocessorLexer", "String", "ANTLRTokdefLexer"]
    }
  },
  {
    "method_signature": "antlr.ExceptionHandler::<init>(antlr.Token, antlr.Token)",
    "vars": {
      "exceptionTypeAndName_": ["CommonToken", "Token", "Object"],
      "action_": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.Grammar::setFilename(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genElementAST(antlr.AlternativeElement)",
    "vars": {
      "elementRef_2": ["String", "Map"],
      "astNameBase": ["String", "Map"],
      "el": ["TokenRangeElement", "StringLiteralElement", "WildcardElement", "CharLiteralElement", "SynPredBlock", "RuleBlock", "OneOrMoreBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock"],
      "ga": ["TokenRefElement", "WildcardElement", "StringLiteralElement", "CharLiteralElement"],
      "elementRef_1": ["String"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::defineToken(antlr.Token, antlr.Token)",
    "vars": {
      "tokliteral": ["CommonToken", "Token", "Object"],
      "name": ["String", "Map"],
      "tokname": ["CommonToken", "Token", "Object"],
      "sl": ["StringLiteralSymbol"],
      "literal": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refToken(antlr.Token, antlr.Token, antlr.Token, antlr.Token, boolean, int, boolean)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"],
      "label": ["CommonToken", "Token", "Object"],
      "idAssign": ["CommonToken", "Token", "Object"],
      "args": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.StringUtils::stripFront(java.lang.String, char)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.RuleEndElement::<init>(antlr.Grammar)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::gen(antlr.OneOrMoreBlock)",
    "vars": {
      "label": ["StringIndexOutOfBoundsException", "IllegalArgumentException"],
      "cnt": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.SynPredBlock::<init>(antlr.Grammar)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::genAlt(antlr.Alternative)",
    "vars": {
      "alt": ["Alternative", "RuleBlock", "AlternativeBlock"],
      "elem": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::postIterationCleanup(java.lang.String)",
    "vars": {
      "file": [],
      "size": ["String"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genCases(antlr.collections.impl.BitSet)",
    "vars": {
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refTokenRange(antlr.Token, antlr.Token, antlr.Token, int, boolean)",
    "vars": {
      "t2": ["CommonToken", "Token", "Object"],
      "label": ["CommonToken", "Token", "Object"],
      "t1": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::gen(antlr.TreeElement)",
    "vars": {
      "t": ["TreeElement"],
      "e": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.Lookahead::toString(java.lang.String, antlr.collections.impl.Vector)",
    "vars": {
      "d": ["StringIndexOutOfBoundsException", "IllegalArgumentException"],
      "f": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "dacapo.TeeOutputStream::<init>(java.io.OutputStream, java.io.File)",
    "vars": {
      "logFile": ["File"],
      "stream": ["PrintStream", "TeePrintStream"]
    }
  },
  {
    "method_signature": "antlr.LLkParser::<init>(antlr.TokenBuffer, int)",
    "vars": {
      "tokenBuf": ["TokenBuffer"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Rule::sameSignature(antlr.preprocessor.Rule)",
    "vars": {
      "rule": ["Rule"]
    }
  },
  {
    "method_signature": "antlr.Tool::processArguments(java.lang.String[])",
    "vars": {
      "args": ["String[]"]
    }
  },
  {
    "method_signature": "antlr.StringUtils::stripFront(java.lang.String, java.lang.String)",
    "vars": {
      "remove": ["String"],
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CSharpCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "e": ["StringIndexOutOfBoundsException", "IllegalArgumentException"],
      "a#154": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_1()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genMatchUsingAtomTokenType(antlr.GrammarAtom)",
    "vars": {
      "astArgs": ["String"],
      "atom": ["WildcardElement", "TokenRefElement", "StringLiteralElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::genCommonBlock(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"],
      "elem": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::toStringWithRanges(java.lang.String, antlr.CharFormatter)",
    "vars": {
      "str": ["String"],
      "formatter": ["JavaCharFormatter"],
      "separator": ["String"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genAlt(antlr.Alternative, antlr.AlternativeBlock)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"],
      "rblk": ["RuleBlock"],
      "alt": ["Alternative", "RuleBlock", "AlternativeBlock"],
      "elem": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Option::<init>(java.lang.String, java.lang.String, antlr.preprocessor.Grammar)",
    "vars": {
      "gr": ["Grammar"],
      "n": ["String", "Map"],
      "rhs": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
    "vars": {
      "label": ["String", "Map"],
      "blk": ["ZeroOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.ZeroOrMoreBlock::getLabel()>() <antlr.JavaCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
    "vars": {
      "label": []
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::gen(antlr.TokenRefElement)",
    "vars": {
      "atom": ["TokenRefElement"]
    }
  },
  {
    "method_signature": "java.lang.String::trim()>() <antlr.CodeGenerator::removeAssignmentFromDeclaration(java.lang.String)",
    "vars": {
      "d": ["IllegalArgumentException", "StringIndexOutOfBoundsException", "String"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Rule::setArgs(java.lang.String)",
    "vars": {
      "a": ["String", "Map"]
    }
  },
  {
    "method_signature": "dacapo.FileDigest::getText(java.io.File, boolean, java.io.File)",
    "vars": {
      "line": ["String"],
      "file": ["File"],
      "scratch": []
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::<init>(antlr.LexerSharedInputState)",
    "vars": {
      "state": ["LexerSharedInputState"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::postIteration(java.lang.String)",
    "vars": {
      "size": ["String"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.TokenRefElement)",
    "vars": {
      "atom": ["TokenRefElement"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genMatch(antlr.GrammarAtom)",
    "vars": {
      "atom": ["WildcardElement", "TokenRefElement", "StringLiteralElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::_refToken(antlr.Token, antlr.Token, antlr.Token, antlr.Token, boolean, int, boolean)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"],
      "label": ["CommonToken", "Token", "Object"],
      "assignId": ["CommonToken", "Token", "Object"],
      "args": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::encodeLexerRuleName(java.lang.String)>($stack158) <antlr.LLkAnalyzer::FOLLOW(int, antlr.RuleEndElement)",
    "vars": {
      "rule": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_2()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::gen(antlr.OneOrMoreBlock)",
    "vars": {
      "label": ["String", "Map"],
      "cnt": ["String"],
      "blk": ["OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.Tool::openOutputFile(java.lang.String)",
    "vars": {
      "f": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.AlternativeElement::getLabel()>() <antlr.CSharpCodeGenerator::genElementAST(antlr.AlternativeElement)",
    "vars": {
      "astNameBase": [],
      "elementRef_2": []
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
    "vars": {
      "actionStr": ["String", "Map"],
      "tInfo": ["CSharpBlockFinishingInfo", "ActionTransInfo"],
      "currentRule": ["RuleBlock"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::gen(antlr.CharRangeElement)",
    "vars": {
      "r": ["CharRangeElement"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::deterministic(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"],
      "e": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CSharpCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
    "vars": {
      "astCreateString": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::mID_ELEMENT(boolean)",
    "vars": {
      "id": ["Token", "Object"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.preprocessor.Preprocessor::exceptionSpec()",
    "vars": {
      "es": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::<init>(antlr.Tool, java.lang.String[], antlr.LLkAnalyzer)",
    "vars": {
      "args_": ["String[]"],
      "analyzer_": ["LLkAnalyzer"],
      "tool_": ["Tool"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "e": ["String"],
      "a#116": ["String"],
      "astArgs": ["String"],
      "p_2": ["Lookahead"],
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.RuleBlock::getRuleName()>() <antlr.actions.csharp.ActionLexer::mTEXT_ITEM(boolean)",
    "vars": {
      "rule": []
    }
  },
  {
    "method_signature": "antlr.ParserGrammar::setOption(java.lang.String, antlr.Token)",
    "vars": {
      "value": ["CommonToken", "Token", "Object"],
      "key": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::LT(int)>(1) <antlr.ANTLRParser::tokensSpec()",
    "vars": {
      "s1": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "Unsafe", "ClassCastException", "Token", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.TreeWalkerGrammar::<init>(java.lang.String, antlr.Tool, java.lang.String)",
    "vars": {
      "className_": ["String", "Map"],
      "superClass": ["String", "Map"],
      "tool_": ["Tool"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.RuleBlock)",
    "vars": {
      "blk": ["RuleBlock"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Rule::setEnclosingGrammar(antlr.preprocessor.Grammar)",
    "vars": {
      "g": ["Grammar"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::lookaheadIsEmpty(antlr.Alternative, int)>($stack51,  effectiveDepth) <antlr.CSharpCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "unpredicted": []
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genMatch(antlr.GrammarAtom)",
    "vars": {
      "atom": ["WildcardElement", "TokenRefElement", "StringLiteralElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genAlt(antlr.Alternative, antlr.AlternativeBlock)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"],
      "rblk": ["RuleBlock"],
      "alt": ["Alternative", "RuleBlock", "AlternativeBlock"],
      "elem": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refExceptionHandler(antlr.Token, antlr.Token)",
    "vars": {
      "action": ["CommonToken", "Token", "Object"],
      "exTypeAndName": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genErrorCatchForElement(antlr.AlternativeElement)",
    "vars": {
      "r": ["String", "Map"],
      "el": ["TokenRangeElement", "TokenRefElement", "RuleRefElement", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::lookaheadIsEmpty(antlr.Alternative, int)",
    "vars": {
      "alt": ["Alternative", "RuleBlock", "AlternativeBlock"],
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.ANTLRTokdefParser::<init>(antlr.TokenStream)",
    "vars": {
      "lexer": ["ANTLRTokdefLexer"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::range(antlr.Token)",
    "vars": {
      "label": ["CommonToken", "Token", "Object"],
      "trRight": ["CommonToken", "Token", "Object"],
      "trLeft": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::lexerSpec(java.lang.String)",
    "vars": {
      "doc": ["String", "Map"],
      "idTok": ["CommonToken", "Token", "Object"],
      "sup": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.RuleBlock::toString()",
    "vars": {
      "s": ["String"],
      "cache": ["Lookahead[]"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refRule(antlr.Token, antlr.Token, antlr.Token, antlr.Token, int)",
    "vars": {
      "label": ["CommonToken", "Token", "Object"],
      "args": ["CommonToken", "Token", "Object"],
      "id": ["String", "Map"],
      "idAssign": ["CommonToken", "Token", "Object"],
      "r": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::<init>(java.lang.String, antlr.RuleBlock, antlr.CodeGenerator, antlr.ActionTransInfo)",
    "vars": {
      "s": ["String", "Map"],
      "generator": ["Object", "JavaCodeGenerator"],
      "currentRule": ["RuleBlock"],
      "transInfo": ["JavaBlockFinishingInfo", "ActionTransInfo"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Grammar::setHierarchy(antlr.preprocessor.Hierarchy)",
    "vars": {
      "hier": ["Hierarchy"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::defineRuleName(antlr.Token, java.lang.String, boolean, java.lang.String)",
    "vars": {
      "tt": ["RuleSymbol", "AlternativeBlock"],
      "access": ["String", "Map"],
      "id": ["String", "Map"],
      "docComment": ["String", "Map"],
      "r": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::gen(antlr.StringLiteralElement)",
    "vars": {
      "atom": ["StringLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.DefaultToolErrorHandler::warnAltExitAmbiguity(antlr.Grammar, antlr.BlockWithImpliedExitPath, boolean, int, antlr.Lookahead[], int)",
    "vars": {
      "sets": ["Lookahead[]"],
      "output": ["String[]"],
      "grammar": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"],
      "blk": ["ZeroOrMoreBlock", "OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::gen(antlr.ActionElement)",
    "vars": {
      "action": ["ActionElement"]
    }
  },
  {
    "method_signature": "antlr.RuleSymbol::addReference(antlr.RuleRefElement)",
    "vars": {
      "e": ["RuleBlock", "RuleRefElement"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Rule::toString()",
    "vars": {
      "argString": ["String", "Map"],
      "s": ["String"],
      "bang": ["String"],
      "retString": ["String"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::getLookaheadTestExpression(antlr.Alternative, int)",
    "vars": {
      "alt": ["Alternative", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::getLookaheadTestExpression(antlr.Alternative, int)",
    "vars": {
      "alt": ["Alternative", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genASTDeclaration(antlr.AlternativeElement)",
    "vars": {
      "el": ["TreeElement", "TokenRangeElement", "RuleRefElement", "StringLiteralElement", "WildcardElement", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "RuleBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_8()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genNextToken()",
    "vars": {
      "rr#61": ["String"],
      "rs_2": ["RuleSymbol", "AlternativeBlock"],
      "filterRule": ["String", "Map"],
      "rs_1": ["RuleSymbol", "AlternativeBlock"],
      "rr": ["RuleBlock", "RuleRefElement", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.ANTLRHashString::<init>(java.lang.String, antlr.CharScanner)",
    "vars": {
      "s": ["String", "Map"],
      "lexer": ["ANTLRLexer", "PreprocessorLexer"]
    }
  },
  {
    "method_signature": "antlr.Tool::getGrammarReader()",
    "vars": {
      "f": ["Reader"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::refCharRange(antlr.Token, antlr.Token, antlr.Token, int, boolean)",
    "vars": {
      "t2": ["CommonToken", "Token", "Object"],
      "label": ["CommonToken", "Token", "Object"],
      "t1": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.CharRangeElement)",
    "vars": {
      "r": ["CharRangeElement"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::genMatchUsingAtomText(antlr.GrammarAtom)",
    "vars": {
      "astArgs": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::lookaheadEquivForApproxAndFullAnalysis(antlr.Lookahead[], int)",
    "vars": {
      "bset": ["Lookahead[]"],
      "look": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genErrorTryForElement(antlr.AlternativeElement)",
    "vars": {
      "r": ["String", "Map"],
      "el": ["TokenRangeElement", "TokenRefElement", "RuleRefElement", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::getValueString(int)",
    "vars": {
      "cs": ["String", "Map"],
      "sl": ["StringLiteralSymbol"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Tool::processArguments(java.lang.String[])",
    "vars": {
      "incomingArgs": ["String[]"]
    }
  },
  {
    "method_signature": "antlr.DefaultToolErrorHandler::dumpSets(java.lang.String[], int, antlr.Grammar, boolean, int, antlr.Lookahead[])",
    "vars": {
      "sets": ["Lookahead[]"],
      "output": ["String[]"],
      "grammar": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refReturnAction(antlr.Token)",
    "vars": {
      "rs": ["RuleSymbol", "AlternativeBlock"],
      "returnAction": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.Token::getText()>() <antlr.ANTLRParser::rule()",
    "vars": {
      "doc": [],
      "access": []
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::gen(antlr.WildcardElement)",
    "vars": {
      "wc": ["WildcardElement"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::gen(antlr.OneOrMoreBlock)",
    "vars": {
      "label": ["String", "Map"],
      "cnt": ["String"],
      "blk": ["OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.StringLiteralElement::<init>(antlr.Grammar, antlr.Token, int)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"],
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::encodeLexerRuleName(java.lang.String)>($stack19) <antlr.CSharpCodeGenerator::genErrorCatchForElement(antlr.AlternativeElement)",
    "vars": {
      "r": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refCharLiteral(antlr.Token, antlr.Token, boolean, int, boolean)",
    "vars": {
      "label": ["CommonToken", "Token", "Object"],
      "lit": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
    "vars": {
      "i#18": ["String", "Map"],
      "transInfo": ["JavaBlockFinishingInfo", "ActionTransInfo"],
      "idParam": ["String", "Map"],
      "elt": ["TreeElement", "TokenRangeElement", "RuleRefElement", "StringLiteralElement", "WildcardElement", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "RuleBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"],
      "id": ["String", "Map"],
      "elt#21": ["String"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::startLexer(java.lang.String, antlr.Token, java.lang.String, java.lang.String)",
    "vars": {
      "file": ["String", "Map"],
      "doc": ["String", "Map"],
      "superClass": ["String", "Map"],
      "name": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::mAST_CONSTRUCTOR(boolean)",
    "vars": {
      "y": ["Token", "Object"],
      "ys": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::altUsesWildcardDefault(antlr.Alternative)",
    "vars": {
      "head": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"],
      "alt": ["Alternative", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.NoViableAltException::<init>(antlr.Token, java.lang.String)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"],
      "fileName_": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genBody(antlr.LexerGrammar)",
    "vars": {
      "s#24": ["RuleSymbol", "AlternativeBlock"],
      "g": ["LexerGrammar"],
      "sup": ["String", "Map"],
      "key": ["String", "Map"],
      "s": ["StringLiteralSymbol"],
      "s#17": ["RuleSymbol", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Hierarchy::getFile(java.lang.String)",
    "vars": {
      "fileName": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::mTREE_ELEMENT(boolean)",
    "vars": {
      "id": ["Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Hierarchy::addGrammarFile(antlr.preprocessor.GrammarFile)",
    "vars": {
      "gf": ["GrammarFile"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::defineRuleName(antlr.Token, java.lang.String, boolean, java.lang.String)",
    "vars": {
      "id": ["String", "Map"],
      "docComment": ["String", "Map"],
      "access": ["String", "Map"],
      "r": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::mAST_CONSTRUCTOR(boolean)",
    "vars": {
      "z": ["Token", "Object"],
      "args": ["String", "Map"],
      "y": ["Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refWildcard(antlr.Token, antlr.Token, int)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"],
      "label": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.collections.impl.BitSet::toString(java.lang.String)",
    "vars": {
      "str": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::mapTreeVariable(antlr.AlternativeElement, java.lang.String)",
    "vars": {
      "name": ["String"],
      "elName": ["String", "Map"],
      "e": ["TokenRangeElement", "StringLiteralElement", "WildcardElement", "CharLiteralElement", "SynPredBlock", "RuleBlock", "OneOrMoreBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.StringUtils::stripBack(java.lang.String, char)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Token::getText()>() <antlr.actions.csharp.ActionLexer::mTEXT_ITEM(boolean)",
    "vars": {
      "rule": []
    }
  },
  {
    "method_signature": "antlr.OneOrMoreBlock::getLabel()>() <antlr.CppCodeGenerator::gen(antlr.OneOrMoreBlock)",
    "vars": {
      "label": []
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::optionSpec(antlr.preprocessor.Grammar)>(null) <antlr.preprocessor.Preprocessor::rule(antlr.preprocessor.Grammar)",
    "vars": {
      "o": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "Unsafe", "ClassCastException", "Token", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.Tool::parseSeparatedList(java.lang.String, char)",
    "vars": {
      "list": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::clone()",
    "vars": {
      "s": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.GrammarAtom::setOption(antlr.Token, antlr.Token)",
    "vars": {
      "value": ["CommonToken", "Token", "Object"],
      "option": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::getFIRSTBitSet(java.lang.String, int)",
    "vars": {
      "ruleName": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genRule(antlr.RuleSymbol, boolean, int, antlr.TokenManager)",
    "vars": {
      "tm": ["ImportVocabTokenManager", "SimpleTokenManager"],
      "pred": ["String", "Map"],
      "s": ["RuleSymbol", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::id()",
    "vars": {
      "idTok": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genBody(antlr.LexerGrammar)",
    "vars": {
      "s#204": ["RuleSymbol", "AlternativeBlock"],
      "g": ["LexerGrammar"],
      "sup": ["String", "Map"],
      "s#211": ["RuleSymbol", "AlternativeBlock"],
      "key": ["String", "Map"],
      "s": ["StringLiteralSymbol"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::getLookaheadTestExpression(antlr.Alternative, int)>($stack53,  $stack61) <antlr.CppCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "e": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "ClassCastException", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.CSharpNameSpace::<init>(java.lang.String)",
    "vars": {
      "name": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_7()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::rule()",
    "vars": {
      "doc": ["String", "Map"],
      "access": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Tool::error(java.lang.String)",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::<init>(antlr.TokenBuffer, antlr.ANTLRGrammarParseBehavior, antlr.Tool)",
    "vars": {
      "tokenBuf": ["TokenBuffer"],
      "tool_": ["Tool"],
      "behavior_": ["MakeGrammar"]
    }
  },
  {
    "method_signature": "antlr.AlternativeBlock::prepareForAnalysis()",
    "vars": {
      "a": ["Alternative", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genInitFactory(antlr.Grammar)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"],
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "e": ["StringIndexOutOfBoundsException", "IllegalArgumentException"],
      "astArgs": ["StringIndexOutOfBoundsException", "IllegalArgumentException"],
      "a#154": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::lookaheadIsEmpty(antlr.Alternative, int)>($stack51,  $stack56) <antlr.JavaCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "unpredicted": []
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::setRuleOption(antlr.Token, antlr.Token)",
    "vars": {
      "value": ["CommonToken", "Token", "Object"],
      "key": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::rule(antlr.preprocessor.Grammar)",
    "vars": {
      "thr": ["String"],
      "o": ["IndexedVector"],
      "ret": ["CommonToken", "Token", "Object"],
      "vis": ["String"],
      "init": ["CommonToken", "Token", "Object"],
      "gr": ["Grammar"],
      "arg": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::gen(antlr.ParserGrammar)",
    "vars": {
      "sup": ["String", "Map"],
      "sym": ["RuleSymbol", "AlternativeBlock"],
      "rs": ["RuleSymbol", "AlternativeBlock"],
      "g": ["ParserGrammar"],
      "prefix": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::checkForMissingEndRule(antlr.Token)",
    "vars": {
      "label": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::gen()",
    "vars": {
      "tm": ["ImportVocabTokenManager", "SimpleTokenManager"],
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.RuleRefElement)",
    "vars": {
      "end": ["RuleEndElement", "RuleBlock"],
      "rr": ["RuleBlock", "RuleRefElement", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.AlternativeBlock)>(k,  $stack11) <antlr.LLkAnalyzer::look(int, antlr.BlockEndElement)",
    "vars": {
      "p": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "ClassCastException", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::lookaheadIsEmpty(antlr.Alternative, int)>($stack53,  effectiveDepth) <antlr.CppCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "unpredicted": []
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::gen(antlr.CharLiteralElement)",
    "vars": {
      "atom": ["CharLiteralElement"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCharFormatter::escapeString(java.lang.String)",
    "vars": {
      "retval": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genBlockPreamble(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"],
      "ga": ["WildcardElement", "TokenRefElement", "StringLiteralElement", "CharLiteralElement"],
      "rblk": ["RuleBlock"],
      "a": ["TreeElement", "TokenRangeElement", "RuleRefElement", "StringLiteralElement", "WildcardElement", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "RuleBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::_println(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.OneOrMoreBlock::<init>(antlr.Grammar)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_2()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::gen(antlr.CharRangeElement)",
    "vars": {
      "r": ["CharRangeElement"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::of(int)>($stack31) <antlr.ANTLRParser::setBlockElement()",
    "vars": {
      "b": []
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_7()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.preprocessor.Grammar::inherit(antlr.preprocessor.Option, antlr.preprocessor.Grammar)",
    "vars": {
      "o": ["Option", "IndexedVector"],
      "overriddenOption": ["Option", "IndexedVector"],
      "superG": ["Grammar"]
    }
  },
  {
    "method_signature": "antlr.CSharpCharFormatter::escapeString(java.lang.String)",
    "vars": {
      "retval": ["String"],
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::gen(antlr.ActionElement)",
    "vars": {
      "action": ["ActionElement"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Hierarchy::findRoot(antlr.preprocessor.Grammar)",
    "vars": {
      "g": ["Grammar"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
    "vars": {
      "astCtorArgs": ["String", "Map"],
      "atom": ["TokenRefElement", "WildcardElement", "StringLiteralElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.CharLiteralElement::<init>(antlr.LexerGrammar, antlr.Token, boolean, int)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"],
      "g": ["LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.SimpleTokenManager::<init>(java.lang.String, antlr.Tool)",
    "vars": {
      "tool_": ["Tool"],
      "name_": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::gen(antlr.ParserGrammar)",
    "vars": {
      "g": ["ParserGrammar"],
      "sym": ["RuleSymbol", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Hierarchy::getGrammar(java.lang.String)",
    "vars": {
      "gr": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Grammar::getSymbol(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "e": ["String"],
      "astArgs": ["String"],
      "p_2": ["Lookahead"],
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"],
      "a#154": ["String"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genElementAST(antlr.AlternativeElement)",
    "vars": {
      "elementRef_2": ["String", "Map"],
      "astNameBase": ["String", "Map"],
      "el": ["TokenRangeElement", "StringLiteralElement", "WildcardElement", "CharLiteralElement", "SynPredBlock", "RuleBlock", "OneOrMoreBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock"],
      "ga": ["TokenRefElement", "WildcardElement", "StringLiteralElement", "CharLiteralElement"],
      "elementRef_1": ["String"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refCharRange(antlr.Token, antlr.Token, antlr.Token, int, boolean)",
    "vars": {
      "t2": ["CommonToken", "Token", "Object"],
      "label": ["CommonToken", "Token", "Object"],
      "t1": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::extractTypeOfAction(java.lang.String, int, int)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::genTokenStrings(java.lang.String)",
    "vars": {
      "s": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::gen(antlr.ActionElement)",
    "vars": {
      "action": ["ActionElement"]
    }
  },
  {
    "method_signature": "antlr.CharScanner::panic(java.lang.String)",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::genLookaheadSetForBlock(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "e": ["String"],
      "astArgs": ["String"],
      "p_2": ["Lookahead"],
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"],
      "a#154": ["String"]
    }
  },
  {
    "method_signature": "antlr.MismatchedTokenException::<init>(java.lang.String[], antlr.Token, int, boolean, java.lang.String)",
    "vars": {
      "tokenNames_": ["String[]"],
      "token_": ["CommonToken", "Token", "Object"],
      "fileName_": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refTokensSpecElementOption(antlr.Token, antlr.Token, antlr.Token)",
    "vars": {
      "value": ["CommonToken", "Token", "Object"],
      "tok": ["CommonToken", "Token", "Object"],
      "option": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
    "vars": {
      "i#18": ["String", "Map"],
      "elt": ["TreeElement", "TokenRangeElement", "RuleRefElement", "StringLiteralElement", "WildcardElement", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "RuleBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"],
      "transInfo": ["CppBlockFinishingInfo", "ActionTransInfo"],
      "id": ["String", "Map"],
      "elt#21": ["String"],
      "idParam": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.RuleBlock::<init>(antlr.Grammar, java.lang.String, int, boolean)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"],
      "r": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.GrammarFile::setOptions(antlr.collections.impl.IndexedVector)",
    "vars": {
      "o": ["IndexedVector"]
    }
  },
  {
    "method_signature": "antlr.Parser::consumeUntil(antlr.collections.impl.BitSet)",
    "vars": {
      "set": ["BitSet"]
    }
  },
  {
    "method_signature": "antlr.ANTLRLexer::mk_tokenSet_1()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "dacapo.Benchmark::<init>(dacapo.parser.Config, java.io.File)",
    "vars": {
      "scratch": [],
      "config": []
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
    "vars": {
      "v": ["Vector"]
    }
  },
  {
    "method_signature": "java.lang.String::substring(int, int)>(0,  $stack17) <antlr.StringUtils::stripBack(java.lang.String, java.lang.String)",
    "vars": {
      "s": ["IllegalArgumentException", "StringIndexOutOfBoundsException", "String"]
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_0()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.ANTLRTokdefParser::line(antlr.ImportVocabTokenManager)",
    "vars": {
      "s": ["CommonToken", "Token", "Object"],
      "para": ["CommonToken", "Token", "Object"],
      "tm": ["ImportVocabTokenManager"],
      "sl": ["StringLiteralSymbol"],
      "t": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::treeParserSpec(java.lang.String)",
    "vars": {
      "doc": ["String", "Map"],
      "sup": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CSharpNameSpace::emitDeclarations(java.io.PrintWriter)",
    "vars": {
      "out": ["PrintWriter"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genBitsets(antlr.collections.impl.Vector, int, java.lang.String)",
    "vars": {
      "tm": ["ImportVocabTokenManager", "SimpleTokenManager"],
      "p": ["BitSet", "Lookahead"],
      "bitsetList": ["Vector"],
      "t": ["String"],
      "prefix": ["String"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.Vector::ensureCapacity(int)",
    "vars": {
      "nativeArrayCopy13": ["RuleRefElement", "Map", "WildcardElement", "ExceptionHandler", "Option", "BitSet", "SynPredBlock", "TreeWalkerGrammar", "ZeroOrMoreBlock", "String", "TreeElement", "IndexedVector", "ParserGrammar", "TokenRangeElement", "StringLiteralElement", "LexerGrammar", "Rule", "Alternative", "CharLiteralElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "Lookahead", "TokenRefElement", "RuleSymbol", "Grammar", "AlternativeBlock"],
      "oldData": ["Object[]", "Object"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::getAltLookahead(antlr.AlternativeBlock, int, int)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"],
      "e": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"],
      "p": ["Lookahead"]
    }
  },
  {
    "method_signature": "antlr.TokenBuffer::<init>(antlr.TokenStream)",
    "vars": {
      "input_": ["ANTLRLexer", "PreprocessorLexer", "ANTLRTokdefLexer"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.JavaCodeGenerator::genNextToken()",
    "vars": {
      "rr#61": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.TokenSymbol::<init>(java.lang.String)",
    "vars": {
      "r": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.LexerGrammar::setOption(java.lang.String, antlr.Token)",
    "vars": {
      "value": ["CommonToken", "Token", "Object"],
      "key": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::GenRuleInvocation(antlr.RuleRefElement)",
    "vars": {
      "rr": ["RuleBlock", "RuleRefElement", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::tokensSpec()",
    "vars": {
      "s1": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::genGenericBlock(antlr.AlternativeBlock, java.lang.String)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"],
      "blkOp": ["String"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::createNextTokenRule(antlr.Grammar, antlr.collections.impl.Vector, java.lang.String)",
    "vars": {
      "r": ["RuleSymbol", "AlternativeBlock"],
      "rname": ["String"],
      "lexRules": ["Vector"],
      "g": ["TreeWalkerGrammar", "ParserGrammar", "LexerGrammar"],
      "onlyAlt": ["Alternative", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::setBehavior(antlr.DefineGrammarSymbols)",
    "vars": {
      "behavior_": ["MakeGrammar"]
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_2()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::getLookaheadTestExpression(antlr.Lookahead[], int)",
    "vars": {
      "look": ["Lookahead[]"],
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.TreeElement::toString()",
    "vars": {
      "s": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CSharpCodeGenerator::gen(antlr.OneOrMoreBlock)",
    "vars": {
      "label": ["StringIndexOutOfBoundsException", "IllegalArgumentException"],
      "cnt": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genBitSet(antlr.collections.impl.BitSet, int)",
    "vars": {
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.JavaCodeGenerator::genTokenStrings()",
    "vars": {
      "s": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::superClass()>() <antlr.ANTLRParser::treeParserSpec(java.lang.String)",
    "vars": {
      "sup": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "MismatchedTokenException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "Unsafe", "ClassCastException", "Token", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.CharLiteralElement)",
    "vars": {
      "atom": ["CharLiteralElement"],
      "b": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::grammarFile(antlr.preprocessor.Hierarchy, java.lang.String)",
    "vars": {
      "hier": ["Hierarchy"],
      "file": ["String", "Map"],
      "opt": ["IndexedVector"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::validate(java.lang.String)",
    "vars": {
      "file": [],
      "size": ["String"],
      "digest": ["String"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::suitableForCaseExpression(antlr.Alternative)",
    "vars": {
      "a": ["Alternative", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genInclude(antlr.TreeWalkerGrammar)",
    "vars": {
      "rs": ["RuleSymbol", "AlternativeBlock"],
      "sym": ["RuleSymbol", "AlternativeBlock"],
      "g": ["TreeWalkerGrammar"],
      "sup": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ANTLRHashString::setString(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::refPreambleAction(antlr.Token)",
    "vars": {
      "act": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::refHeaderAction(antlr.Token, antlr.Token)",
    "vars": {
      "key": ["String", "Map"],
      "act": ["CommonToken", "Token", "Object"],
      "name": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.RuleBlock::toString()",
    "vars": {
      "s": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.AlternativeElement::<init>(antlr.Grammar)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.Token::getText()>() <antlr.ANTLRParser::classDef()",
    "vars": {
      "doc": []
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genTokenStrings()",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::gen(antlr.TreeWalkerGrammar)",
    "vars": {
      "sym": ["RuleSymbol", "AlternativeBlock"],
      "g": ["TreeWalkerGrammar"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::_print(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::ebnf(antlr.Token, boolean)",
    "vars": {
      "label": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.MismatchedCharException::appendCharName(java.lang.StringBuffer, int)",
    "vars": {
      "sb": ["String"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::genBody(antlr.LexerGrammar)",
    "vars": {
      "sup": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.IndexedVector::getElement(java.lang.Object)",
    "vars": {
      "key": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genBitsetsHeader(antlr.collections.impl.Vector, int)",
    "vars": {
      "bitsetList": ["Vector"],
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::throwsSpec()",
    "vars": {
      "t": ["String"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::println(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Lookahead::<init>(java.lang.String)",
    "vars": {
      "c": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.SimpleTokenManager::define(antlr.TokenSymbol)",
    "vars": {
      "ts": ["StringLiteralSymbol", "TokenSymbol"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.JavaCodeGenerator::gen(antlr.OneOrMoreBlock)",
    "vars": {
      "label": ["StringIndexOutOfBoundsException", "IllegalArgumentException"],
      "cnt": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::superClass()>() <antlr.ANTLRParser::lexerSpec(java.lang.String)",
    "vars": {
      "sup": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "MismatchedTokenException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "Unsafe", "ClassCastException", "Token", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.Grammar::getIntegerOption(java.lang.String)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"],
      "key": ["String"]
    }
  },
  {
    "method_signature": "antlr.CharRangeElement::setLabel(java.lang.String)",
    "vars": {
      "label_": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CSharpCharFormatter::literalString(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "java.lang.String::substring(int)>(1) <antlr.StringUtils::stripFront(java.lang.String, java.lang.String)",
    "vars": {
      "s": ["IllegalArgumentException", "StringIndexOutOfBoundsException", "String"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::encodeLexerRuleName(java.lang.String)>($stack19) <antlr.JavaCodeGenerator::genErrorCatchForElement(antlr.AlternativeElement)",
    "vars": {
      "r": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.Tool::fileMinusPath(java.lang.String)",
    "vars": {
      "f": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::getASTCreateString(java.lang.String)",
    "vars": {
      "str": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Tool::<init>(antlr.Tool, java.lang.String[])",
    "vars": {
      "args": ["String[]"],
      "t": ["Tool"]
    }
  },
  {
    "method_signature": "antlr.SimpleTokenManager::clone()",
    "vars": {
      "tm": ["ImportVocabTokenManager", "SimpleTokenManager"]
    }
  },
  {
    "method_signature": "antlr.AlternativeBlock::setOption(antlr.Token, antlr.Token)",
    "vars": {
      "value": ["CommonToken", "Token", "Object"],
      "key": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CommonToken::<init>(int, java.lang.String)",
    "vars": {
      "txt": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genElementAST(antlr.AlternativeElement)",
    "vars": {
      "elementRef_2": ["String", "Map"],
      "astNameBase": ["String", "Map"],
      "el": ["TokenRangeElement", "StringLiteralElement", "WildcardElement", "CharLiteralElement", "SynPredBlock", "RuleBlock", "OneOrMoreBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock"],
      "ga": ["TokenRefElement", "WildcardElement", "StringLiteralElement", "CharLiteralElement"],
      "elementRef_1": ["String"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genInitFactory(antlr.Grammar)",
    "vars": {
      "g": ["TreeWalkerGrammar", "ParserGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.JavaCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
    "vars": {
      "label": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.TokenRangeElement::setLabel(java.lang.String)",
    "vars": {
      "label_": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Hierarchy::expandGrammarsInFile(java.lang.String)",
    "vars": {
      "fileName": ["String", "Map"],
      "g": ["Grammar"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::textOrChar(java.lang.String)",
    "vars": {
      "text": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.TreeElement::toString()",
    "vars": {
      "a": ["Alternative", "RuleBlock", "AlternativeBlock"],
      "s": ["String"],
      "p": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::getLookaheadTestExpression(antlr.Alternative, int)>($stack51,  effectiveDepth) <antlr.JavaCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "e": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "ClassCastException", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Rule::<init>(java.lang.String, java.lang.String, antlr.collections.impl.IndexedVector, antlr.preprocessor.Grammar)",
    "vars": {
      "gr": ["Grammar"],
      "b": ["String"],
      "options": ["IndexedVector"],
      "n": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ExceptionSpec::addHandler(antlr.ExceptionHandler)",
    "vars": {
      "handler": ["ExceptionHandler"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::genAlt(antlr.Alternative)",
    "vars": {
      "alt": ["Alternative", "RuleBlock", "AlternativeBlock"],
      "elem": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::tokensSpecOptions(antlr.Token)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.GrammarFile::<init>(antlr.Tool, java.lang.String)",
    "vars": {
      "f": ["String", "Map"],
      "tool": ["Tool"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Grammar::setPreambleAction(java.lang.String)",
    "vars": {
      "a": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Tool::reportProgress(java.lang.String)",
    "vars": {
      "message": ["String"]
    }
  },
  {
    "method_signature": "antlr.TreeWalkerGrammar::processArguments(java.lang.String[])",
    "vars": {
      "args": ["String[]"]
    }
  },
  {
    "method_signature": "dacapo.Digest::toString(byte[])>($stack121) <dacapo.Benchmark::validate(java.lang.String)",
    "vars": {
      "digest": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::gen(antlr.RuleRefElement)",
    "vars": {
      "rs": ["RuleSymbol", "AlternativeBlock"],
      "rr": ["RuleBlock", "RuleRefElement", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::getValueString(int)",
    "vars": {
      "cs": ["String", "Map"],
      "sl": ["StringLiteralSymbol"]
    }
  },
  {
    "method_signature": "antlr.CharScanner::makeToken(int)",
    "vars": {
      "tok": ["Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.Parser::<init>(antlr.ParserSharedInputState)",
    "vars": {
      "state": ["ParserSharedInputState"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::genRule(antlr.RuleSymbol)",
    "vars": {
      "s": ["RuleSymbol", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.SimpleTokenManager::mapToTokenSymbol(java.lang.String, antlr.TokenSymbol)",
    "vars": {
      "name": ["String", "Map"],
      "sym": ["StringLiteralSymbol", "TokenSymbol"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::copyFileTo(java.io.File, java.io.File)",
    "vars": {
      "outputDir": [],
      "inputFile": ["File"]
    }
  },
  {
    "method_signature": "antlr.Tool::warning(java.lang.String, java.lang.String, int, int)",
    "vars": {
      "s": ["String"],
      "file": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::reportError(antlr.RecognitionException, java.lang.String)",
    "vars": {
      "e": ["SemanticException", "Token", "NoViableAltException", "MismatchedTokenException", "String", "BitSet"],
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.Tool::warning(java.lang.String[], java.lang.String, int, int)",
    "vars": {
      "s": ["String[]"],
      "file": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::getASTCreateString(java.lang.String)",
    "vars": {
      "ctorID": ["String", "Map"],
      "astCreateString": ["String"],
      "astCtorArgs": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.TreeWalkerGrammar)",
    "vars": {
      "sym": ["RuleSymbol", "AlternativeBlock"],
      "g": ["TreeWalkerGrammar"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.collections.impl.BitSet::toString(java.lang.String, antlr.collections.impl.Vector)",
    "vars": {
      "str": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::printAction(antlr.Token)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::subruleCanBeInverted(antlr.AlternativeBlock, boolean)",
    "vars": {
      "elt": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"],
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "OneOrMoreBlock", "SynPredBlock", "TreeElement"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::setCharVocabulary(antlr.collections.impl.BitSet)",
    "vars": {
      "b": ["BitSet"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::qualifiedID()",
    "vars": {
      "a": ["CommonToken", "Token", "Object"],
      "qidTok": ["Token"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::reportError(java.lang.String)",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "dacapo.DacapoException::<init>(java.lang.String)",
    "vars": {
      "text": ["String"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.collections.impl.BitSet::toStringOfWords()",
    "vars": {
      "s": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.TreeWalkerGrammar::setOption(java.lang.String, antlr.Token)",
    "vars": {
      "value": ["CommonToken", "Token", "Object"],
      "key": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_7()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::reportError(antlr.RecognitionException)",
    "vars": {
      "e": ["NoViableAltException", "MismatchedTokenException", "Grammar", "String"]
    }
  },
  {
    "method_signature": "antlr.RuleBlock::findExceptionSpec(antlr.Token)",
    "vars": {
      "label": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "java.lang.Integer::intValue()>() <antlr.CharScanner::testLiteralsTable(int)",
    "vars": {
      "ttype": []
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::endOptions()",
    "vars": {
      "tm": ["ImportVocabTokenManager", "SimpleTokenManager"],
      "dup": ["ImportVocabTokenManager", "SimpleTokenManager"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::elementNoOptionSpec()",
    "vars": {
      "label": ["CommonToken", "Token", "Object"],
      "args": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::refAction(antlr.Token)",
    "vars": {
      "action": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::gen(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["SynPredBlock", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.StringLiteralSymbol::setLabel(java.lang.String)",
    "vars": {
      "label": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.AlternativeBlock::setLabel(java.lang.String)",
    "vars": {
      "label_": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.LList::deleteHead()",
    "vars": {
      "o": ["TreeBlockContext", "BlockContext"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::<init>(antlr.TokenStream)",
    "vars": {
      "lexer": ["PreprocessorLexer"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::toString(java.lang.String, antlr.CharFormatter)",
    "vars": {
      "str": ["String"],
      "formatter": ["JavaCharFormatter"],
      "separator": ["String"]
    }
  },
  {
    "method_signature": "antlr.LexerGrammar::setCharVocabulary(antlr.collections.impl.BitSet)",
    "vars": {
      "b": ["BitSet"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::gen(antlr.LexerGrammar)",
    "vars": {
      "rs": ["RuleSymbol", "AlternativeBlock"],
      "g": ["LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genSynPred(antlr.SynPredBlock, java.lang.String)",
    "vars": {
      "blk": ["SynPredBlock"],
      "lookaheadExpr": ["String"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::encodeLexerRuleName(java.lang.String)>($stack19) <antlr.JavaCodeGenerator::genErrorTryForElement(antlr.AlternativeElement)",
    "vars": {
      "r": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.Vector::clone()",
    "vars": {
      "v": ["Vector"],
      "nativeArrayCopy10": ["RuleRefElement", "Map", "WildcardElement", "ExceptionHandler", "Option", "BitSet", "SynPredBlock", "TreeWalkerGrammar", "ZeroOrMoreBlock", "String", "TreeElement", "IndexedVector", "ParserGrammar", "TokenRangeElement", "StringLiteralElement", "LexerGrammar", "Rule", "Alternative", "CharLiteralElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "Lookahead", "TokenRefElement", "RuleSymbol", "Grammar", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.ZeroOrMoreBlock)",
    "vars": {
      "blk": ["ZeroOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genErrorHandler(antlr.ExceptionSpec)",
    "vars": {
      "handler": ["ExceptionHandler"],
      "ex": ["ExceptionSpec"]
    }
  },
  {
    "method_signature": "antlr.TreeElement::<init>(antlr.Grammar, antlr.Token)",
    "vars": {
      "start": ["CommonToken", "Token", "Object"],
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::findGrammar(java.lang.String)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"],
      "name": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Tool::preprocess()",
    "vars": {
      "f": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Parser::reportError(antlr.RecognitionException)",
    "vars": {
      "ex": ["NoViableAltException", "MismatchedTokenException", "Grammar", "String"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::reportWarning(java.lang.String)",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::unpackZipStream(java.io.BufferedInputStream, java.io.File)",
    "vars": {
      "destination": [],
      "data": [],
      "inputStream": ["BufferedInputStream"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genInclude(antlr.LexerGrammar)",
    "vars": {
      "sym": ["RuleSymbol", "AlternativeBlock"],
      "g": ["LexerGrammar"],
      "sup": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Grammar::setOption(java.lang.String, antlr.Token)",
    "vars": {
      "value": ["CommonToken", "Token", "Object"],
      "key": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.GrammarElement::<init>(antlr.Grammar, antlr.Token)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"],
      "start": ["Object", "CommonToken", "Token", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::setGrammarOption(antlr.Token, antlr.Token)",
    "vars": {
      "value": ["CommonToken", "Token", "Object"],
      "key": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CharScanner::match(java.lang.String)",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::gen(antlr.TreeWalkerGrammar)",
    "vars": {
      "sym": ["RuleSymbol", "AlternativeBlock"],
      "g": ["TreeWalkerGrammar"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_8()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.GrammarElement::<init>(antlr.Grammar)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::getLookaheadTestTerm(int, antlr.collections.impl.BitSet)",
    "vars": {
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::gen(antlr.WildcardElement)",
    "vars": {
      "wc": ["WildcardElement"]
    }
  },
  {
    "method_signature": "antlr.SemanticException::<init>(java.lang.String, java.lang.String, int, int)",
    "vars": {
      "fileName": ["String", "Map"],
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.DefaultToolErrorHandler::<init>(antlr.Tool)",
    "vars": {
      "tool": ["Tool"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::gen(antlr.RuleRefElement)",
    "vars": {
      "rs": ["RuleSymbol", "AlternativeBlock"],
      "rr": ["RuleBlock", "RuleRefElement", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.collections.impl.BitSet::toStringWithRanges(java.lang.String, antlr.CharFormatter)",
    "vars": {
      "str": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.Token::getText()>() <antlr.CSharpCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
    "vars": {
      "actionStr": []
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.GrammarAtom)",
    "vars": {
      "atom": ["TokenRefElement"]
    }
  },
  {
    "method_signature": "antlr.ANTLRLexer::<init>(antlr.InputBuffer)",
    "vars": {
      "ib": ["CharBuffer"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::mapTreeVariable(antlr.AlternativeElement, java.lang.String)",
    "vars": {
      "name": ["String"],
      "elName": ["String", "Map"],
      "e": ["TokenRangeElement", "StringLiteralElement", "WildcardElement", "CharLiteralElement", "SynPredBlock", "RuleBlock", "OneOrMoreBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.TokenRefElement::<init>(antlr.Grammar, antlr.Token, boolean, int)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"],
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.AlternativeElement::<init>(antlr.Grammar, antlr.Token)",
    "vars": {
      "start": ["CommonToken", "Token", "Object"],
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genInclude(antlr.ParserGrammar)",
    "vars": {
      "rs": ["RuleSymbol", "AlternativeBlock"],
      "g": ["ParserGrammar"],
      "sym": ["RuleSymbol", "AlternativeBlock"],
      "sup": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.CharRangeElement)",
    "vars": {
      "r": ["CharRangeElement"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::unpackZipFileResource(java.lang.String, java.io.File)",
    "vars": {
      "destination": [],
      "name": ["String"]
    }
  },
  {
    "method_signature": "antlr.CharFormatter::literalChar(int)>(value) <antlr.CSharpCodeGenerator::getValueString(int)",
    "vars": {
      "cs": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::optionSpec(antlr.preprocessor.Grammar)>(null) <antlr.preprocessor.Preprocessor::grammarFile(antlr.preprocessor.Hierarchy, java.lang.String)",
    "vars": {
      "opt": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "Unsafe", "ClassCastException", "Token", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
    "vars": {
      "i#18": ["String", "Map"],
      "transInfo": ["CSharpBlockFinishingInfo", "ActionTransInfo"],
      "idParam": ["String", "Map"],
      "elt": ["TreeElement", "TokenRangeElement", "RuleRefElement", "StringLiteralElement", "WildcardElement", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "RuleBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"],
      "id": ["String", "Map"],
      "elt#21": ["String"]
    }
  },
  {
    "method_signature": "java.lang.String::substring(int, int)>(0,  $stack74) <antlr.CppCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
    "vars": {
      "id": ["IllegalArgumentException", "StringIndexOutOfBoundsException", "String"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refInitAction(antlr.Token)",
    "vars": {
      "action": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CharScanner::testLiteralsTable(int)",
    "vars": {
      "literalsIndex": ["VersionInfo", "CoderResult", "StringBuffer", "SignalHandler", "Integer"]
    }
  },
  {
    "method_signature": "antlr.NameSpace::parse(java.lang.String)",
    "vars": {
      "name": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.GrammarAtom::setLabel(java.lang.String)",
    "vars": {
      "label_": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Grammar::setTokenManager(antlr.TokenManager)",
    "vars": {
      "tokenManager_": ["ImportVocabTokenManager", "SimpleTokenManager"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::printHeaderAction(java.lang.String)",
    "vars": {
      "a": ["CommonToken", "Token", "Object"],
      "name": ["String"]
    }
  },
  {
    "method_signature": "antlr.Tool::toolError(java.lang.String)",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String, java.lang.String)",
    "vars": {
      "el": ["TreeElement", "TokenRangeElement", "RuleRefElement", "StringLiteralElement", "WildcardElement", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "RuleBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"],
      "var_name": ["String", "Map"],
      "node_type": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::refStringLiteral(antlr.Token, antlr.Token, int, boolean)",
    "vars": {
      "label": ["CommonToken", "Token", "Object"],
      "lit": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::gen(antlr.TokenRefElement)",
    "vars": {
      "atom": ["TokenRefElement"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genErrorTryForElement(antlr.AlternativeElement)",
    "vars": {
      "r": ["String", "Map"],
      "el": ["TokenRangeElement", "TokenRefElement", "RuleRefElement", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::getRangeExpression(int, int[])",
    "vars": {
      "elems": []
    }
  },
  {
    "method_signature": "antlr.ANTLRTokdefLexer::<init>(antlr.LexerSharedInputState)",
    "vars": {
      "state": ["LexerSharedInputState"]
    }
  },
  {
    "method_signature": "antlr.MismatchedCharException::<init>(char, antlr.collections.impl.BitSet, boolean, antlr.CharScanner)",
    "vars": {
      "set_": ["BitSet"],
      "scanner_": ["ANTLRLexer", "PreprocessorLexer", "String", "ANTLRTokdefLexer"]
    }
  },
  {
    "method_signature": "antlr.ImportVocabTokenManager::define(java.lang.String, int)",
    "vars": {
      "ts": ["StringLiteralSymbol", "TokenSymbol"],
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.JavaCodeGenerator::mangleLiteral(java.lang.String)",
    "vars": {
      "mangled": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.OneOrMoreBlock)",
    "vars": {
      "blk": ["OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
    "vars": {
      "blk": ["ZeroOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::genCommonBlock(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"],
      "elem": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genMatchUsingAtomTokenType(antlr.GrammarAtom)",
    "vars": {
      "astArgs": ["String"],
      "atom": ["WildcardElement", "TokenRefElement", "StringLiteralElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::gen(antlr.TokenRefElement)",
    "vars": {
      "atom": ["TokenRefElement"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genSynPred(antlr.SynPredBlock, java.lang.String)",
    "vars": {
      "lookaheadExpr": ["String"],
      "blk": ["SynPredBlock"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::setupOutput(java.lang.String)",
    "vars": {
      "className": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::getLookaheadTestExpression(antlr.Alternative, int)>($stack53,  effectiveDepth) <antlr.CppCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "e": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "ClassCastException", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.TokenRangeElement)",
    "vars": {
      "r": ["TokenRangeElement"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::class_def(java.lang.String, antlr.preprocessor.Hierarchy)",
    "vars": {
      "preamble": ["CommonToken", "Token", "Object"],
      "hier": ["Hierarchy"],
      "file": ["String", "Map"],
      "gr": ["Grammar"],
      "classOptions": ["IndexedVector"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::LT(int)>(1) <antlr.preprocessor.Preprocessor::rule(antlr.preprocessor.Grammar)",
    "vars": {
      "init": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "Unsafe", "ClassCastException", "Token", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"],
      "arg": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "Unsafe", "ClassCastException", "Token", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"],
      "ret": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "Unsafe", "ClassCastException", "Token", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::endTree()",
    "vars": {
      "ctx": ["TreeBlockContext", "BlockContext"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::_printAction(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.WildcardElement::setLabel(java.lang.String)",
    "vars": {
      "label_": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genMatchUsingAtomText(antlr.GrammarAtom)",
    "vars": {
      "astArgs": ["String"],
      "atom": ["WildcardElement", "TokenRefElement", "StringLiteralElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.GrammarAtom::toString()",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::<init>(antlr.LexerSharedInputState)",
    "vars": {
      "state": ["LexerSharedInputState"]
    }
  },
  {
    "method_signature": "antlr.CharScanner::setText(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::getLookaheadTestExpression(antlr.Lookahead[], int)",
    "vars": {
      "look": ["Lookahead[]"],
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.MismatchedCharException::<init>(char, char, char, boolean, antlr.CharScanner)",
    "vars": {
      "scanner_": ["ANTLRLexer", "PreprocessorLexer", "String", "ANTLRTokdefLexer"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genBitSet(antlr.collections.impl.BitSet, int)",
    "vars": {
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::lookaheadIsEmpty(antlr.Alternative, int)>($stack53,  $stack58) <antlr.CppCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "unpredicted": []
    }
  },
  {
    "method_signature": "antlr.Grammar::getOption(java.lang.String)",
    "vars": {
      "key": ["String"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::lookaheadIsEmpty(antlr.Alternative, int)",
    "vars": {
      "alt": ["Alternative", "RuleBlock", "AlternativeBlock"],
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.Tool::checkForInvalidArguments(java.lang.String[], antlr.collections.impl.BitSet)",
    "vars": {
      "args": ["String[]"],
      "cmdLineArgValid": ["BitSet"]
    }
  },
  {
    "method_signature": "java.lang.String::toUpperCase()>() <antlr.CppCodeGenerator::mangleLiteral(java.lang.String)",
    "vars": {
      "mangled": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "ClassCastException", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.CharScanner::setFilename(java.lang.String)",
    "vars": {
      "f": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::beginSubRule(antlr.Token, antlr.Token, boolean)",
    "vars": {
      "start": ["CommonToken", "Token", "Object"],
      "label": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.BlockEndElement)",
    "vars": {
      "end": ["AlternativeBlock", "BlockEndElement"],
      "p": ["Lookahead"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::gen(antlr.TreeWalkerGrammar)",
    "vars": {
      "g": ["TreeWalkerGrammar"]
    }
  },
  {
    "method_signature": "java.lang.Integer::intValue()>() <antlr.CharScanner::testLiteralsTable(java.lang.String, int)",
    "vars": {
      "ttype": []
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::genBody(antlr.ParserGrammar)",
    "vars": {
      "sup": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.TokenRangeElement)",
    "vars": {
      "r": ["TokenRangeElement"]
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::setTool(antlr.Tool)",
    "vars": {
      "tool": ["Tool"]
    }
  },
  {
    "method_signature": "antlr.Token::getText()>() <antlr.ANTLRParser::superClass()",
    "vars": {
      "sup": []
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::notTerminal(antlr.Token)",
    "vars": {
      "label": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "dacapo.FileDigest::getBinary(java.io.File)",
    "vars": {
      "buf": [],
      "file": ["File"]
    }
  },
  {
    "method_signature": "antlr.Tool::reportException(java.lang.Exception, java.lang.String)",
    "vars": {
      "e": ["IOException", "StreamDecoder", "InputStream", "EOFException", "MalformedURLException", "ZipException", "CEFormatException", "JarFile", "Object", "UnsupportedEncodingException", "UnmappableCharacterException", "MalformedInputException"],
      "message": []
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
    "vars": {
      "v": ["Vector"]
    }
  },
  {
    "method_signature": "antlr.TokenManager::tokenDefined(java.lang.String)>($stack31) <antlr.CppCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
    "vars": {
      "is_constructor": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "ClassCastException", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genErrorHandler(antlr.ExceptionSpec)",
    "vars": {
      "handler": ["ExceptionHandler"],
      "ex": ["ExceptionSpec"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::print(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::gen(antlr.TokenRangeElement)",
    "vars": {
      "r": ["TokenRangeElement"]
    }
  },
  {
    "method_signature": "antlr.ImportVocabTokenManager::clone()",
    "vars": {
      "tm": ["ImportVocabTokenManager"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.WildcardElement)",
    "vars": {
      "wc": ["WildcardElement"],
      "b": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::suitableForCaseExpression(antlr.Alternative)",
    "vars": {
      "a": ["Alternative", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::genGenericBlock(antlr.AlternativeBlock, java.lang.String)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"],
      "blkOp": ["String"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::genTokenInterchange(antlr.TokenManager)",
    "vars": {
      "tm": ["ImportVocabTokenManager", "SimpleTokenManager"],
      "s": ["String", "Map"],
      "sl": ["StringLiteralSymbol"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.ParserGrammar)",
    "vars": {
      "g": ["ParserGrammar"],
      "sym": ["RuleSymbol", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.AlternativeBlock)",
    "vars": {
      "i#22": ["BitSet", "Lookahead"],
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "OneOrMoreBlock", "SynPredBlock", "TreeElement"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.JavaCodeGenerator::gen(antlr.TreeWalkerGrammar)",
    "vars": {
      "sup": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::LT(int)>(1) <antlr.preprocessor.Preprocessor::class_def(java.lang.String, antlr.preprocessor.Hierarchy)",
    "vars": {
      "preamble": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "Unsafe", "ClassCastException", "Token", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::<init>(java.lang.String, antlr.RuleBlock, antlr.CodeGenerator, antlr.ActionTransInfo)",
    "vars": {
      "s": ["String", "Map"],
      "currentRule": ["RuleBlock"],
      "transInfo": ["CppBlockFinishingInfo", "ActionTransInfo"],
      "generator": ["CppCodeGenerator", "Object"]
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::<init>(java.lang.String, antlr.RuleBlock, antlr.CodeGenerator, antlr.ActionTransInfo)",
    "vars": {
      "transInfo": ["CSharpBlockFinishingInfo", "ActionTransInfo"],
      "generator": ["CSharpCodeGenerator", "Object"],
      "currentRule": ["RuleBlock"],
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::addElementToCurrentAlt(antlr.AlternativeElement)",
    "vars": {
      "e": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.NameSpace::emitDeclarations(java.io.PrintWriter)",
    "vars": {
      "out": ["PrintWriter"],
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::gen(antlr.TreeElement)",
    "vars": {
      "t": ["TreeElement"],
      "e": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::HTMLEncode(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.collections.impl.BitSet::toString(java.lang.String, antlr.CharFormatter)",
    "vars": {
      "str": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::gen(antlr.StringLiteralElement)",
    "vars": {
      "atom": ["StringLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.ActionElement::<init>(antlr.Grammar, antlr.Token)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"],
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::getLookaheadTestTerm(int, antlr.collections.impl.BitSet)",
    "vars": {
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.CharFormatter::literalChar(int)>(value) <antlr.JavaCodeGenerator::getValueString(int)",
    "vars": {
      "cs": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Grammar::addOption(antlr.preprocessor.Option)",
    "vars": {
      "o": ["Option", "IndexedVector"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::gen(antlr.RuleRefElement)",
    "vars": {
      "rr": ["RuleBlock", "RuleRefElement", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::setSize(int)",
    "vars": {
      "newbits": []
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genHeader(java.lang.String)",
    "vars": {
      "fileName": ["String"]
    }
  },
  {
    "method_signature": "antlr.Tool::parent(java.io.File)",
    "vars": {
      "f": ["File"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genErrorCatchForElement(antlr.AlternativeElement)",
    "vars": {
      "r": ["String", "Map"],
      "el": ["TokenRangeElement", "TokenRefElement", "RuleRefElement", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.StringUtils::stripFrontBack(java.lang.String, java.lang.String, java.lang.String)",
    "vars": {
      "tail": ["String"],
      "src": ["String", "Map"],
      "head": ["String"]
    }
  },
  {
    "method_signature": "dacapo.TeePrintStream::<init>(java.io.OutputStream, java.io.File)",
    "vars": {
      "logFile": ["File"],
      "dest": ["PrintStream", "TeePrintStream"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::throwsSpec()",
    "vars": {
      "t": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.AlternativeBlock::addAlternative(antlr.Alternative)",
    "vars": {
      "alt": ["Alternative", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refSemPred(antlr.Token)",
    "vars": {
      "pred": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::printSet(int, int, antlr.Lookahead)",
    "vars": {
      "lookahead": ["Lookahead"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::genTokenTypes(antlr.TokenManager)",
    "vars": {
      "tm": ["ImportVocabTokenManager", "SimpleTokenManager"],
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Grammar::setCodeGenerator(antlr.CodeGenerator)",
    "vars": {
      "gen": ["Object", "JavaCodeGenerator", "DiagnosticCodeGenerator", "DocBookCodeGenerator", "CSharpCodeGenerator", "CppCodeGenerator", "HTMLCodeGenerator"]
    }
  },
  {
    "method_signature": "antlr.Tool::copyFile(java.lang.String, java.lang.String)",
    "vars": {
      "destination": ["BufferedWriter"],
      "source_name": ["String"],
      "dest_name": ["String", "Map"],
      "source": ["BufferedReader"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Grammar::setType(java.lang.String)",
    "vars": {
      "t": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::gen(antlr.LexerGrammar)",
    "vars": {
      "rs": ["RuleSymbol", "AlternativeBlock"],
      "g": ["LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.Lookahead::toString()",
    "vars": {
      "d": ["String"],
      "e": ["String"],
      "f": ["String"]
    }
  },
  {
    "method_signature": "antlr.NameSpace::emitClosures(java.io.PrintWriter)",
    "vars": {
      "out": ["PrintWriter"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refElementOption(antlr.Token, antlr.Token)",
    "vars": {
      "value": ["CommonToken", "Token", "Object"],
      "option": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::genInclude(antlr.ParserGrammar)",
    "vars": {
      "sup": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genErrorCatchForElement(antlr.AlternativeElement)",
    "vars": {
      "r": ["String", "Map"],
      "el": ["TokenRangeElement", "TokenRefElement", "RuleRefElement", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.Vector::appendElement(java.lang.Object)",
    "vars": {
      "o": ["RuleRefElement", "Map", "WildcardElement", "ExceptionHandler", "Option", "BitSet", "SynPredBlock", "TreeWalkerGrammar", "ZeroOrMoreBlock", "String", "TreeElement", "IndexedVector", "ParserGrammar", "TokenRangeElement", "StringLiteralElement", "LexerGrammar", "Rule", "Alternative", "CharLiteralElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "Lookahead", "TokenRefElement", "RuleSymbol", "Grammar", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genTokenStrings()",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.JavaCharFormatter::literalString(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.WildcardElement::<init>(antlr.Grammar, antlr.Token, int)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"],
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::refSemPred(antlr.Token)",
    "vars": {
      "pred": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.PreprocessorLexer::mID_OR_KEYWORD(boolean)",
    "vars": {
      "id": ["Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::getASTCreateString(java.lang.String)",
    "vars": {
      "emptyText": ["String"],
      "astCtorArgs": ["String", "Map"],
      "tokenName": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CharScanner::setTokenObjectClass(java.lang.String)",
    "vars": {
      "cl": ["String"]
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_0()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::getLookaheadTestExpression(antlr.Lookahead[], int)",
    "vars": {
      "look": ["Lookahead[]"],
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.LList::insertHead(java.lang.Object)",
    "vars": {
      "o": ["TreeBlockContext", "BlockContext"],
      "c": ["LLCell"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String, java.lang.String)",
    "vars": {
      "init": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::mTEXT_ITEM(boolean)",
    "vars": {
      "a5": ["Token", "Object"],
      "t": ["String", "Map"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CSharpCharFormatter::escapeString(java.lang.String)",
    "vars": {
      "retval": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.Tool::warning(java.lang.String)",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.ANTLRTokdefLexer::mk_tokenSet_2()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::gen(antlr.StringLiteralElement)",
    "vars": {
      "atom": ["StringLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genRule(antlr.RuleSymbol, boolean, int)",
    "vars": {
      "pred": ["String", "Map"],
      "s": ["RuleSymbol", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
    "vars": {
      "blk": ["ZeroOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::encodeLexerRuleName(java.lang.String)>($stack13) <antlr.MakeGrammar::refRule(antlr.Token, antlr.Token, antlr.Token, antlr.Token, int)",
    "vars": {
      "id": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::class$(java.lang.String)",
    "vars": {
      "x0": ["String"]
    }
  },
  {
    "method_signature": "antlr.CharBuffer::<init>(java.io.Reader)",
    "vars": {
      "input_": ["Reader", "BufferedReader", "StringReader", "InputStreamReader"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::refRule(antlr.Token, antlr.Token, antlr.Token, antlr.Token, int)",
    "vars": {
      "label": ["CommonToken", "Token", "Object"],
      "args": ["CommonToken", "Token", "Object"],
      "id": ["String", "Map"],
      "idAssign": ["CommonToken", "Token", "Object"],
      "r": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::addSemPred(java.lang.String)",
    "vars": {
      "predicate": ["String"]
    }
  },
  {
    "method_signature": "java.lang.String::substring(int, int)>(0,  $stack18) <antlr.JavaCodeGenerator::getASTCreateString(java.lang.String)",
    "vars": {
      "tokenName": ["IllegalArgumentException", "StringIndexOutOfBoundsException", "String"]
    }
  },
  {
    "method_signature": "antlr.ANTLRLexer::tokenTypeForCharLiteral(java.lang.String)",
    "vars": {
      "lit": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.NameSpace::<init>(java.lang.String)",
    "vars": {
      "name": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genAlt(antlr.Alternative, antlr.AlternativeBlock)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"],
      "rblk": ["RuleBlock"],
      "alt": ["Alternative", "RuleBlock", "AlternativeBlock"],
      "elem": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::preIteration(java.lang.String)",
    "vars": {
      "size": ["String"]
    }
  },
  {
    "method_signature": "antlr.RuleBlock::setOption(antlr.Token, antlr.Token)",
    "vars": {
      "value": ["CommonToken", "Token", "Object"],
      "key": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Grammar::setMemberAction(java.lang.String)",
    "vars": {
      "a": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::LT(int)>(1) <antlr.ANTLRParser::grammar()",
    "vars": {
      "n": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "Unsafe", "ClassCastException", "Token", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refMemberAction(antlr.Token)",
    "vars": {
      "act": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CSharpCodeGenerator::genTokenStrings()",
    "vars": {
      "s": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Grammar::setOptions(antlr.collections.impl.IndexedVector)",
    "vars": {
      "options": ["IndexedVector"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Rule::setReturnValue(java.lang.String)",
    "vars": {
      "ret": ["String", "Map"]
    }
  },
  {
    "method_signature": "java.lang.String::equals(java.lang.Object)>($stack16) <antlr.preprocessor.Rule::sameSignature(antlr.preprocessor.Rule)",
    "vars": {
      "aSame": []
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::<init>(antlr.Tool)",
    "vars": {
      "tool_": ["Tool"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::mapTreeVariable(antlr.AlternativeElement, java.lang.String)",
    "vars": {
      "name": ["String"],
      "elName": ["String", "Map"],
      "e": ["TokenRangeElement", "StringLiteralElement", "WildcardElement", "CharLiteralElement", "SynPredBlock", "RuleBlock", "OneOrMoreBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::gen(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["SynPredBlock", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genMatchUsingAtomText(antlr.GrammarAtom)",
    "vars": {
      "astArgs": ["String"],
      "atom": ["WildcardElement", "TokenRefElement", "StringLiteralElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.SimpleTokenManager::setName(java.lang.String)",
    "vars": {
      "name_": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Parser::setFilename(java.lang.String)",
    "vars": {
      "f": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::beginExceptionSpec(antlr.Token)",
    "vars": {
      "label": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.AlternativeElement::getLabel()>() <antlr.JavaCodeGenerator::genElementAST(antlr.AlternativeElement)",
    "vars": {
      "astNameBase": [],
      "elementRef_2": []
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genASTDeclaration(antlr.AlternativeElement)",
    "vars": {
      "el": ["TreeElement", "TokenRangeElement", "RuleRefElement", "StringLiteralElement", "WildcardElement", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "RuleBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::parserSpec(java.lang.String)",
    "vars": {
      "doc": ["String", "Map"],
      "sup": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ParserGrammar::processArguments(java.lang.String[])",
    "vars": {
      "args": ["String[]"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::gen(antlr.CharRangeElement)",
    "vars": {
      "r": ["CharRangeElement"]
    }
  },
  {
    "method_signature": "antlr.GrammarSymbol::<init>(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.RuleRefElement::setIdAssign(java.lang.String)",
    "vars": {
      "id": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::optionSpec(antlr.preprocessor.Grammar)",
    "vars": {
      "gr": ["Grammar"]
    }
  },
  {
    "method_signature": "antlr.NoViableAltForCharException::getMessage()",
    "vars": {
      "mesg": ["String"]
    }
  },
  {
    "method_signature": "antlr.RuleRefElement::setArgs(java.lang.String)",
    "vars": {
      "a": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::gen(antlr.OneOrMoreBlock)",
    "vars": {
      "blk": ["OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.SimpleTokenManager::tokenDefined(java.lang.String)",
    "vars": {
      "symbol": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genSemPred(java.lang.String, int)",
    "vars": {
      "pred#2": ["String", "Map"],
      "pred": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ANTLRHashString::equals(java.lang.Object)",
    "vars": {
      "o": ["StringLiteralSymbol", "Certificate[]", "ZoneInfo", "Map", "RuleRefElement", "Locale", "WildcardElement", "Byte", "VersionInfo", "Object", "X509Certificate[]", "Properties", "MessageDigest", "MetaIndex", "SequenceInputStream", "FieldPosition", "DerValue", "SunJCE_k", "Manifest", "URL", "ExceptionSpec", "OneOrMoreBlock", "ProviderConfig", "CodeSigner", "TokenRefElement", "LocalGregorianCalendar", "TokenSymbol", "AllPermission", "CommonToken", "ImportVocabTokenManager", "PKCS9Attribute", "ObjectIdentifier", "SocketPermission", "Object[]", "BufferedInputStream", "ZeroOrMoreBlock", "CertStore", "Token", "String", "GrammarFile", "Thread", "DerInputBuffer", "Vector", "PermissionCollection", "RuleSymbol", "InputStream", "Grammar", "AlternativeBlock", "SignatureFileVerifier", "AVAKeyword", "RDN", "ArrayList", "Package", "FileInputStream", "Permission", "Attributes", "CodeSigner[]", "DataInputStream", "ThreadGroup", "UnresolvedPermission", "X509CRLEntryImpl", "TreeElement", "TimeZone", "IndexedVector", "TokenRangeElement", "StringLiteralElement", "Rule", "Class", "PublicKey", "SunJCE_f", "CharRangeElement", "RuleBlock", "HashSet", "ProtectionDomain", "ProviderList", "Pattern", "SignalHandler", "Signal", "AVA", "X509CertImpl", "PropertyPermission", "SignerInfo", "UnparseableExtension", "RoundingMode", "Option", "List", "SynPredBlock", "ServiceId", "AttributedString", "CoderResult", "GeneralSubtree", "Inflater", "Bundle", "LinkedList", "StringBuffer", "AttributedCharacterIterator", "ANTLRHashString", "File", "Currency", "Integer", "JarEntry", "ByteArrayInputStream", "TrustAnchor", "Extension", "SimpleTokenManager", "String[]", "Set", "GeneralName", "PushbackInputStream", "CharLiteralElement"],
      "s": ["ANTLRHashString"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::setupGrammarParameters(antlr.Grammar)",
    "vars": {
      "ns": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::encodeLexerRuleName(java.lang.String)>($stack7) <antlr.DefineGrammarSymbols::refRule(antlr.Token, antlr.Token, antlr.Token, antlr.Token, int)",
    "vars": {
      "id": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.ExceptionSpec::<init>(antlr.Token)",
    "vars": {
      "label_": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "java.lang.String::substring(int)>(1) <antlr.StringUtils::stripFront(java.lang.String, char)",
    "vars": {
      "s": ["IllegalArgumentException", "StringIndexOutOfBoundsException", "String"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::fileInScratch(java.lang.String)",
    "vars": {
      "name": []
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genBlockFinish(antlr.JavaBlockFinishingInfo, java.lang.String)",
    "vars": {
      "howToFinish": ["JavaBlockFinishingInfo"],
      "noViableAction": ["String"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::lineCount(java.io.File)",
    "vars": {
      "file": ["File"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::equals(java.lang.Object)",
    "vars": {
      "set": ["BitSet", "Lookahead"],
      "obj": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.WildcardElement)",
    "vars": {
      "wc": ["WildcardElement"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.collections.impl.BitSet::toStringOfHalfWords()",
    "vars": {
      "s": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.RecognitionException::<init>(java.lang.String)",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::genCommonBlock(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"],
      "elem": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genBody(antlr.TreeWalkerGrammar)",
    "vars": {
      "rs": ["RuleSymbol", "AlternativeBlock"],
      "sym": ["RuleSymbol", "AlternativeBlock"],
      "g": ["TreeWalkerGrammar"],
      "sup": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::gen(antlr.TreeElement)",
    "vars": {
      "t": ["TreeElement"],
      "e": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::run(dacapo.Callback, java.lang.String, boolean)",
    "vars": {
      "callback": [],
      "size": ["String"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::removeCompetingPredictionSets(antlr.collections.impl.BitSet, antlr.AlternativeElement)",
    "vars": {
      "el": ["TokenRefElement", "CharLiteralElement"],
      "e": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"],
      "head": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"],
      "b": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::getFOLLOWBitSet(java.lang.String, int)",
    "vars": {
      "ruleName": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CharScanner::testLiteralsTable(java.lang.String, int)",
    "vars": {
      "text": ["String"],
      "literalsIndex": ["VersionInfo", "CoderResult", "StringBuffer", "SignalHandler", "Integer"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Grammar::<init>(antlr.Tool, java.lang.String, java.lang.String, antlr.collections.impl.IndexedVector)",
    "vars": {
      "rules": ["Grammar"],
      "name": ["String", "Map"],
      "tool": ["Tool"],
      "superGrammar": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ANTLRLexer::mCOMMENT(boolean)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::mAST_ITEM(boolean)",
    "vars": {
      "id": ["Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genBlockPreamble(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"],
      "rblk": ["RuleBlock"],
      "ga": ["WildcardElement", "TokenRefElement", "StringLiteralElement", "CharLiteralElement"],
      "a": ["TreeElement", "TokenRangeElement", "RuleRefElement", "StringLiteralElement", "WildcardElement", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "RuleBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::getRangeExpression(int, int[])",
    "vars": {
      "elems": []
    }
  },
  {
    "method_signature": "antlr.RuleBlock::getRuleName()>() <antlr.LLkAnalyzer::FOLLOW(int, antlr.RuleEndElement)",
    "vars": {
      "rule": []
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::gen(antlr.OneOrMoreBlock)",
    "vars": {
      "label": ["String", "Map"],
      "cnt": ["String"],
      "blk": ["OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.CharScanner::match(antlr.collections.impl.BitSet)",
    "vars": {
      "b": ["BitSet"]
    }
  },
  {
    "method_signature": "java.lang.String::substring(int, int)>(0,  $stack9) <antlr.StringUtils::stripBack(java.lang.String, char)",
    "vars": {
      "s": ["IllegalArgumentException", "StringIndexOutOfBoundsException", "String"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::mangleLiteral(java.lang.String)",
    "vars": {
      "mangled": ["String", "Map"],
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.TokenSymbol::setASTNodeType(java.lang.String)",
    "vars": {
      "type": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refStringLiteral(antlr.Token, antlr.Token, int, boolean)",
    "vars": {
      "lit": ["CommonToken", "Token", "Object"],
      "label": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genRule(antlr.RuleSymbol, boolean, int, java.lang.String)",
    "vars": {
      "pred": ["String", "Map"],
      "prefix": ["String"],
      "s": ["RuleSymbol", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.AlternativeBlock::toString()",
    "vars": {
      "s": ["String"],
      "cache": ["Lookahead[]"],
      "j#17": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::orInPlace(antlr.collections.impl.BitSet)",
    "vars": {
      "a": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CSharpCodeGenerator::genBody(antlr.ParserGrammar)",
    "vars": {
      "sup": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.TokenRangeElement::<init>(antlr.Grammar, antlr.Token, antlr.Token, int)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"],
      "t2": ["CommonToken", "Token", "Object"],
      "t1": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::setGrammar(antlr.Grammar)",
    "vars": {
      "g": ["TreeWalkerGrammar", "ParserGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::toStringOfHalfWords()",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::mTREE_ELEMENT(boolean)",
    "vars": {
      "id": ["Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::encodeLexerRuleName(java.lang.String)>($stack11) <antlr.MakeGrammar::defineRuleName(antlr.Token, java.lang.String, boolean, java.lang.String)",
    "vars": {
      "id": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.Token::getText()>() <antlr.actions.cpp.ActionLexer::mTEXT_ITEM(boolean)",
    "vars": {
      "t": []
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::_refStringLiteral(antlr.Token, antlr.Token, int, boolean)",
    "vars": {
      "label": ["CommonToken", "Token", "Object"],
      "lit": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "java.lang.String::substring(int)>($stack365) <antlr.CppCodeGenerator::genBody(antlr.LexerGrammar)",
    "vars": {
      "sup": ["IllegalArgumentException", "StringIndexOutOfBoundsException", "String"]
    }
  },
  {
    "method_signature": "dacapo.Digest::toString(byte[])",
    "vars": {
      "digest": []
    }
  },
  {
    "method_signature": "antlr.OneOrMoreBlock::getLabel()>() <antlr.JavaCodeGenerator::gen(antlr.OneOrMoreBlock)",
    "vars": {
      "label": []
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genCases(antlr.collections.impl.BitSet)",
    "vars": {
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genSynPred(antlr.SynPredBlock, java.lang.String)",
    "vars": {
      "lookaheadExpr": ["String"],
      "blk": ["SynPredBlock"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::gen(antlr.CharLiteralElement)",
    "vars": {
      "atom": ["CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.PreprocessorLexer::<init>(java.io.Reader)",
    "vars": {
      "in": ["BufferedReader"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genTokenTypes(antlr.TokenManager)",
    "vars": {
      "tm": ["ImportVocabTokenManager", "SimpleTokenManager"]
    }
  },
  {
    "method_signature": "java.lang.String::valueOf(int)>(value) <antlr.CSharpCodeGenerator::getValueString(int)",
    "vars": {
      "cs": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Grammar::setFileName(java.lang.String)",
    "vars": {
      "f": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.CharLiteralElement)",
    "vars": {
      "atom": ["CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::growToInclude(int)",
    "vars": {
      "newbits": []
    }
  },
  {
    "method_signature": "antlr.Token::<init>(int, java.lang.String)",
    "vars": {
      "txt": ["String"]
    }
  },
  {
    "method_signature": "java.lang.String::substring(int)>($stack410) <antlr.CppCodeGenerator::genInclude(antlr.ParserGrammar)",
    "vars": {
      "sup": ["IllegalArgumentException", "StringIndexOutOfBoundsException", "String"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.ActionElement)",
    "vars": {
      "action": ["ActionElement"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::genInclude(antlr.LexerGrammar)",
    "vars": {
      "sup": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.CppCharFormatter::literalString(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.JavaCharFormatter::escapeString(java.lang.String)",
    "vars": {
      "retval": ["String"],
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::<init>(antlr.InputBuffer)",
    "vars": {
      "ib": ["CharBuffer"]
    }
  },
  {
    "method_signature": "antlr.Token::getText()>() <antlr.DefineGrammarSymbols::defineToken(antlr.Token, antlr.Token)",
    "vars": {
      "literal": [],
      "name": []
    }
  },
  {
    "method_signature": "antlr.SimpleTokenManager::getTokenSymbol(java.lang.String)",
    "vars": {
      "sym": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Tool::pathToFile(java.lang.String)",
    "vars": {
      "f": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ANTLRTokdefParser::<init>(antlr.TokenStream, int)",
    "vars": {
      "lexer": ["ANTLRTokdefLexer"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::setFileOption(antlr.Token, antlr.Token, java.lang.String)",
    "vars": {
      "value": ["CommonToken", "Token", "Object"],
      "filename": ["String", "Map"],
      "key": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::deleteTree(java.io.File)",
    "vars": {
      "tree": ["File"]
    }
  },
  {
    "method_signature": "antlr.ANTLRLexer::<init>(java.io.Reader)",
    "vars": {
      "in": ["Reader", "InputStreamReader"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_1()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_7()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::endRule(java.lang.String)",
    "vars": {
      "ctx": ["TreeBlockContext", "BlockContext"],
      "rule": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::<init>(antlr.LexerSharedInputState)",
    "vars": {
      "state": ["LexerSharedInputState"]
    }
  },
  {
    "method_signature": "antlr.AlternativeBlock::setAlternatives(antlr.collections.impl.Vector)",
    "vars": {
      "v": ["Vector"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Hierarchy::<init>(antlr.Tool)",
    "vars": {
      "tool": ["Tool"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::genRule(antlr.RuleSymbol)",
    "vars": {
      "s": ["RuleSymbol", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::gen(antlr.TreeElement)",
    "vars": {
      "t": ["TreeElement"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genTokenTypes(antlr.TokenManager)",
    "vars": {
      "tm": ["ImportVocabTokenManager", "SimpleTokenManager"],
      "s": ["String", "Map"],
      "sl": ["StringLiteralSymbol"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
    "vars": {
      "astCtorArgs": ["String", "Map"],
      "astCreateString": ["String"],
      "atom": ["TokenRefElement", "WildcardElement", "StringLiteralElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.Lookahead::toString()",
    "vars": {
      "f": ["StringIndexOutOfBoundsException", "IllegalArgumentException"],
      "d": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::exceptionSpec()",
    "vars": {
      "es": ["String"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.GrammarAtom::toString()",
    "vars": {
      "s": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_5()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.Grammar::setGrammarAnalyzer(antlr.LLkGrammarAnalyzer)",
    "vars": {
      "a": ["LLkAnalyzer"]
    }
  },
  {
    "method_signature": "antlr.ANTLRTokdefParser::file(antlr.ImportVocabTokenManager)",
    "vars": {
      "tm": ["ImportVocabTokenManager"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.LLCell::<init>(java.lang.Object)",
    "vars": {
      "o": ["TreeBlockContext", "BlockContext"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.SynPredBlock)",
    "vars": {
      "blk": ["SynPredBlock"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genTokenDefinitions(antlr.TokenManager)",
    "vars": {
      "tm": ["ImportVocabTokenManager", "SimpleTokenManager"],
      "s": ["String", "Map"],
      "sl": ["StringLiteralSymbol"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::superClass()",
    "vars": {
      "sup": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genTokenStrings(java.lang.String)",
    "vars": {
      "prefix": ["String"],
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::<init>(java.io.Reader)",
    "vars": {
      "in": ["StringReader"]
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::mID_ELEMENT(boolean)",
    "vars": {
      "id": ["Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::getLookaheadTestExpression(antlr.Alternative, int)>($stack51,  $stack59) <antlr.JavaCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "e": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "ClassCastException", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::id()>() <antlr.ANTLRParser::lexerSpec(java.lang.String)",
    "vars": {
      "idTok": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "MismatchedTokenException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "Unsafe", "ClassCastException", "Token", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.LexerGrammar::<init>(java.lang.String, antlr.Tool, java.lang.String)",
    "vars": {
      "className_": ["String", "Map"],
      "superClass": ["String", "Map"],
      "tool_": ["Tool"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
    "vars": {
      "v": ["Vector"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::gen(antlr.CharLiteralElement)",
    "vars": {
      "atom": ["CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
    "vars": {
      "blk": ["ZeroOrMoreBlock"]
    }
  },
  {
    "method_signature": "java.lang.String::substring(int)>($stack260) <antlr.CppCodeGenerator::genInclude(antlr.LexerGrammar)",
    "vars": {
      "sup": ["IllegalArgumentException", "StringIndexOutOfBoundsException", "String"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::toStringOfWords()",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.actions.java.ActionLexer::mAST_CONSTRUCTOR(boolean)",
    "vars": {
      "args": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_3()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::abortGrammar()",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::getHeaderAction(java.lang.String)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"],
      "name": ["String"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genBlockPreamble(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"],
      "ga": ["WildcardElement", "TokenRefElement", "StringLiteralElement", "CharLiteralElement"],
      "rblk": ["RuleBlock"],
      "a": ["TreeElement", "TokenRangeElement", "RuleRefElement", "StringLiteralElement", "WildcardElement", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "RuleBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.Grammar::getClassName()>() <antlr.MakeGrammar::abortGrammar()",
    "vars": {
      "s": []
    }
  },
  {
    "method_signature": "antlr.ANTLRLexer::mk_tokenSet_4()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.RuleBlock::setEndElement(antlr.RuleEndElement)",
    "vars": {
      "re": ["RuleEndElement", "RuleBlock"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::gen(antlr.CharLiteralElement)",
    "vars": {
      "atom": ["CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.RuleBlock::addExceptionSpec(antlr.ExceptionSpec)",
    "vars": {
      "ex": ["ExceptionSpec"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.TreeElement)",
    "vars": {
      "t": ["TreeElement"],
      "l": ["Lookahead"]
    }
  },
  {
    "method_signature": "antlr.RuleBlock::findExceptionSpec(java.lang.String)",
    "vars": {
      "label": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::setSubruleOption(antlr.Token, antlr.Token)",
    "vars": {
      "value": ["CommonToken", "Token", "Object"],
      "key": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::refTokenRange(antlr.Token, antlr.Token, antlr.Token, int, boolean)",
    "vars": {
      "t2": ["CommonToken", "Token", "Object"],
      "label": ["CommonToken", "Token", "Object"],
      "t1": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genSemPredMap(java.lang.String)",
    "vars": {
      "prefix": ["String"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::deleteFile(java.io.File)",
    "vars": {
      "file": ["File"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Hierarchy::addGrammar(antlr.preprocessor.Grammar)",
    "vars": {
      "gr": ["Grammar"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CSharpCodeGenerator::mangleLiteral(java.lang.String)",
    "vars": {
      "mangled": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CSharpCodeGenerator::genElementAST(antlr.AlternativeElement)",
    "vars": {
      "astNameBase": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::classDef()",
    "vars": {
      "doc": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
    "vars": {
      "label": ["String", "Map"],
      "blk": ["ZeroOrMoreBlock"]
    }
  },
  {
    "method_signature": "java.lang.Integer::parseInt(java.lang.String)>($stack43) <dacapo.antlr.AntlrHarness::iterate(java.lang.String)",
    "vars": {
      "nIterations": ["StringIndexOutOfBoundsException", "IllegalArgumentException", "NumberFormatException"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.PreprocessorLexer::<init>(antlr.InputBuffer)",
    "vars": {
      "ib": ["CharBuffer"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.ANTLRParser::throwsSpec()",
    "vars": {
      "t": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::_println(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ANTLRStringBuffer::append(char)",
    "vars": {
      "newBuffer": []
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::reportError(antlr.RecognitionException)",
    "vars": {
      "e": ["MismatchedCharException", "NoViableAltForCharException"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genErrorTryForElement(antlr.AlternativeElement)",
    "vars": {
      "r": ["String", "Map"],
      "el": ["TokenRangeElement", "TokenRefElement", "RuleRefElement", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.CommonToken::setText(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Grammar::addRule(antlr.preprocessor.Rule)",
    "vars": {
      "r": ["Rule"]
    }
  },
  {
    "method_signature": "java.lang.String::substring(int)>($stack308) <antlr.CppCodeGenerator::genInclude(antlr.TreeWalkerGrammar)",
    "vars": {
      "sup": ["IllegalArgumentException", "StringIndexOutOfBoundsException", "String"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Rule::setVisibility(java.lang.String)",
    "vars": {
      "v": ["String"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Grammar::inherit(antlr.preprocessor.Rule, antlr.preprocessor.Grammar)",
    "vars": {
      "overriddenRule": ["Rule"],
      "r": ["Rule"],
      "superG": ["Grammar"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
    "vars": {
      "str": ["String", "Map"],
      "atom": ["TokenRefElement", "WildcardElement", "StringLiteralElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String, java.lang.String)",
    "vars": {
      "el": ["TreeElement", "TokenRangeElement", "RuleRefElement", "StringLiteralElement", "WildcardElement", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "RuleBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"],
      "var_name": ["String", "Map"],
      "node_type": ["String", "Map"],
      "init": ["String"]
    }
  },
  {
    "method_signature": "antlr.OneOrMoreBlock::getLabel()>() <antlr.CSharpCodeGenerator::gen(antlr.OneOrMoreBlock)",
    "vars": {
      "label": []
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::lookaheadIsEmpty(antlr.Alternative, int)>($stack51,  $stack56) <antlr.CSharpCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "unpredicted": []
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.preprocessor.Preprocessor::exceptionHandler()",
    "vars": {
      "h": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.LList::push(java.lang.Object)",
    "vars": {
      "o": ["TreeBlockContext", "BlockContext"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CSharpCodeGenerator::genBody(antlr.TreeWalkerGrammar)",
    "vars": {
      "sup": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.ANTLRLexer::<init>(antlr.LexerSharedInputState)",
    "vars": {
      "state": ["LexerSharedInputState"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genBlockInitAction(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::reportWarning(java.lang.String)",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::superClass()>() <antlr.ANTLRParser::parserSpec(java.lang.String)",
    "vars": {
      "sup": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "MismatchedTokenException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "Unsafe", "ClassCastException", "Token", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::genMatchUsingAtomTokenType(antlr.GrammarAtom)",
    "vars": {
      "astArgs": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.StringUtils::stripBack(java.lang.String, java.lang.String)",
    "vars": {
      "remove": ["String"],
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::fixNameSpaceOption(java.lang.String)",
    "vars": {
      "ns": ["String", "Map"],
      "ns#2": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::lookaheadIsEmpty(antlr.Alternative, int)",
    "vars": {
      "alt": ["Alternative", "RuleBlock", "AlternativeBlock"],
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "dacapo.antlr.AntlrHarness::<init>(dacapo.parser.Config, java.io.File)",
    "vars": {
      "scratch": [],
      "config": []
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genRuleHeader(antlr.RuleSymbol, boolean)",
    "vars": {
      "s": ["RuleSymbol", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.Grammar::define(antlr.RuleSymbol)",
    "vars": {
      "rs": ["RuleSymbol", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::gen(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["SynPredBlock", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::gen(antlr.StringLiteralElement)",
    "vars": {
      "atom": ["StringLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genErrorHandler(antlr.ExceptionSpec)",
    "vars": {
      "handler": ["ExceptionHandler"],
      "ex": ["ExceptionSpec"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::mangleLiteral(java.lang.String)",
    "vars": {
      "mangled": ["String", "Map"],
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String)",
    "vars": {
      "el": ["TreeElement", "TokenRangeElement", "RuleRefElement", "StringLiteralElement", "WildcardElement", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "RuleBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"],
      "node_type": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::genLookaheadSetForAlt(antlr.Alternative)",
    "vars": {
      "lookahead": ["Lookahead"],
      "alt": ["Alternative", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
    "vars": {
      "label": ["String", "Map"],
      "blk": ["ZeroOrMoreBlock"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::byteCount(java.io.File)>($u9) <dacapo.Benchmark::validate(java.lang.String)",
    "vars": {
      "e_1": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "ClassCastException", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::decodeLexerRuleName(java.lang.String)",
    "vars": {
      "id": ["String", "Map"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::mangleLiteral(java.lang.String)",
    "vars": {
      "mangled": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::createOptionalRuleRef(java.lang.String, antlr.Token)",
    "vars": {
      "start": ["CommonToken", "Token", "Object"],
      "rule": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Tool::error(java.lang.String, java.lang.String, int, int)",
    "vars": {
      "s": ["String", "Map"],
      "file": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::elementsAreRange(int[])",
    "vars": {
      "elems": []
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genMatchUsingAtomTokenType(antlr.GrammarAtom)",
    "vars": {
      "astArgs": ["String"],
      "atom": ["WildcardElement", "TokenRefElement", "StringLiteralElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refArgAction(antlr.Token)",
    "vars": {
      "action": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::mTEXT_ITEM(boolean)",
    "vars": {
      "a5": ["Token", "Object"],
      "rule": ["String", "Map"]
    }
  },
  {
    "method_signature": "java.lang.String::equals(java.lang.Object)>($stack12) <antlr.preprocessor.Rule::sameSignature(antlr.preprocessor.Rule)",
    "vars": {
      "rSame": []
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::setupGrammarParameters(antlr.Grammar)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.Tool::setOutputDirectory(java.lang.String)",
    "vars": {
      "o": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genTokenTypes(antlr.TokenManager)",
    "vars": {
      "tm": ["ImportVocabTokenManager", "SimpleTokenManager"],
      "s": ["String", "Map"],
      "sl": ["StringLiteralSymbol"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::setBlock(antlr.AlternativeBlock, antlr.AlternativeBlock)",
    "vars": {
      "src": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "OneOrMoreBlock", "SynPredBlock", "TreeElement"],
      "b": ["ZeroOrMoreBlock", "SynPredBlock", "OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
    "vars": {
      "actionStr": ["String", "Map"],
      "currentRule": ["RuleBlock"],
      "tInfo": ["JavaBlockFinishingInfo", "ActionTransInfo"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::toString(java.lang.String)",
    "vars": {
      "str": ["String"],
      "separator": ["String"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::encodeLexerRuleName(java.lang.String)>($stack19) <antlr.CSharpCodeGenerator::genErrorTryForElement(antlr.AlternativeElement)",
    "vars": {
      "r": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.PreservingFileWriter::<init>(java.lang.String)",
    "vars": {
      "file": ["String"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Option::setEnclosingGrammar(antlr.preprocessor.Grammar)",
    "vars": {
      "g": ["Grammar"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::genBitsets(antlr.collections.impl.Vector, int, java.lang.String)",
    "vars": {
      "t": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::beginSubRule(antlr.Token, antlr.Token, boolean)",
    "vars": {
      "start": ["CommonToken", "Token", "Object"],
      "label": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.BlockWithImpliedExitPath::<init>(antlr.Grammar)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::processStringForASTConstructor(java.lang.String)",
    "vars": {
      "str": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::exceptionHandler()",
    "vars": {
      "h": ["String"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CSharpCodeGenerator::genSemPred(java.lang.String, int)",
    "vars": {
      "pred#2": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "java.lang.String::toUpperCase()>() <antlr.CSharpCodeGenerator::mangleLiteral(java.lang.String)",
    "vars": {
      "mangled": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "ClassCastException", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.ANTLRTokdefParser::setTool(antlr.Tool)",
    "vars": {
      "tool": ["Tool"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.JavaCodeGenerator::genElementAST(antlr.AlternativeElement)",
    "vars": {
      "astNameBase": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::gen(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["SynPredBlock", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.JavaCodeGenerator::gen(antlr.LexerGrammar)",
    "vars": {
      "sup": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.GrammarAtom::setASTNodeType(java.lang.String)",
    "vars": {
      "type": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::extractIdOfAction(java.lang.String, int, int)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ANTLRStringBuffer::append(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::OctalToUnicode(java.lang.String)",
    "vars": {
      "str": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genBlockFinish(antlr.CppBlockFinishingInfo, java.lang.String)",
    "vars": {
      "howToFinish": ["CppBlockFinishingInfo"],
      "noViableAction": ["String"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genCases(antlr.collections.impl.BitSet)",
    "vars": {
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genSemPred(java.lang.String, int)",
    "vars": {
      "pred#2": ["String", "Map"],
      "pred": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ZeroOrMoreBlock::getLabel()>() <antlr.CSharpCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
    "vars": {
      "label": []
    }
  },
  {
    "method_signature": "java.lang.String::valueOf(int)>(value) <antlr.JavaCodeGenerator::getValueString(int)",
    "vars": {
      "cs": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::_print(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::gen(antlr.TokenRangeElement)",
    "vars": {
      "r": ["TokenRangeElement"]
    }
  },
  {
    "method_signature": "antlr.ANTLRTokdefLexer::<init>(antlr.InputBuffer)",
    "vars": {
      "ib": ["CharBuffer"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.preprocessor.Hierarchy::optionsToString(antlr.collections.impl.IndexedVector)",
    "vars": {
      "s": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.Tool::setNameSpace(java.lang.String)",
    "vars": {
      "name": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ANTLRLexer::mk_tokenSet_2()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::printAction(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ANTLRTokdefParser::reportError(antlr.RecognitionException)",
    "vars": {
      "e": ["NoViableAltException", "MismatchedTokenException"]
    }
  },
  {
    "method_signature": "antlr.RecognitionException::<init>(java.lang.String, java.lang.String, int, int)",
    "vars": {
      "s": ["String"],
      "fileName_": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DefaultFileLineFormatter::getFormatString(java.lang.String, int, int)",
    "vars": {
      "fileName": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::encodeLexerRuleName(java.lang.String)",
    "vars": {
      "id": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genLineNo(antlr.GrammarElement)",
    "vars": {
      "el": ["RuleBlock", "ZeroOrMoreBlock", "ActionElement", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genMatch(antlr.GrammarAtom)",
    "vars": {
      "atom": ["WildcardElement", "TokenRefElement", "StringLiteralElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::setBlockElement()",
    "vars": {
      "b": ["BitSet"]
    }
  },
  {
    "method_signature": "dacapo.antlr.AntlrHarness::iterate(java.lang.String)",
    "vars": {
      "newArgs": ["String[]"],
      "size": ["String"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::gen(antlr.RuleRefElement)",
    "vars": {
      "rr": ["RuleBlock", "RuleRefElement", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::gen(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["SynPredBlock", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::extractIdOfAction(antlr.Token)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::mAST_CONSTRUCTOR(boolean)",
    "vars": {
      "z": ["Token", "Object"],
      "args": ["String", "Map"],
      "y": ["Token", "Object"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.JavaCodeGenerator::gen(antlr.ParserGrammar)",
    "vars": {
      "sup": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CSharpCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
    "vars": {
      "label": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::byteCount(java.io.File)",
    "vars": {
      "file": ["File"]
    }
  },
  {
    "method_signature": "antlr.ZeroOrMoreBlock::<init>(antlr.Grammar)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::setTool(antlr.Tool)",
    "vars": {
      "tool": ["Tool"]
    }
  },
  {
    "method_signature": "antlr.CharQueue::expand()",
    "vars": {
      "newBuffer": []
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::gen(antlr.CharRangeElement)",
    "vars": {
      "r": ["CharRangeElement"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::gen(antlr.ParserGrammar)",
    "vars": {
      "g": ["ParserGrammar"],
      "sym": ["RuleSymbol", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::genSynPred(antlr.SynPredBlock)",
    "vars": {
      "blk": ["SynPredBlock"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::gen(antlr.ParserGrammar)",
    "vars": {
      "g": ["ParserGrammar"]
    }
  },
  {
    "method_signature": "antlr.Lookahead::intersection(antlr.Lookahead)",
    "vars": {
      "q": ["Lookahead"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genTokenASTNodeMap()",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Tool::main(java.lang.String[])",
    "vars": {
      "args": ["String[]"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.WildcardElement::toString()",
    "vars": {
      "s": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::mID_ELEMENT(boolean)",
    "vars": {
      "id": ["Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::reportError(antlr.RecognitionException)",
    "vars": {
      "e": ["MismatchedCharException", "NoViableAltForCharException"]
    }
  },
  {
    "method_signature": "antlr.Lookahead::combineWith(antlr.Lookahead)",
    "vars": {
      "q": ["Lookahead"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::addSemPred(java.lang.String)",
    "vars": {
      "predicate": ["String"]
    }
  },
  {
    "method_signature": "antlr.Token::getText()>() <antlr.ANTLRParser::throwsSpec()",
    "vars": {
      "t": []
    }
  },
  {
    "method_signature": "antlr.AlternativeBlock::setInitAction(java.lang.String)",
    "vars": {
      "initAction_": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::gen(antlr.StringLiteralElement)",
    "vars": {
      "atom": ["StringLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.CharStreamException::<init>(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::processStringForASTConstructor(java.lang.String)",
    "vars": {
      "str": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Grammar::isDefined(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CSharpCodeGenerator::genBody(antlr.LexerGrammar)",
    "vars": {
      "sup": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::fixNameSpaceOption(java.lang.String)",
    "vars": {
      "ns#2": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::toString(java.lang.String, antlr.collections.impl.Vector)",
    "vars": {
      "str": ["String"],
      "separator": ["String"],
      "vocabulary": ["Vector"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::setTool(antlr.Tool)",
    "vars": {
      "tool": ["Tool"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::lineCount(java.io.File)>($u4) <dacapo.Benchmark::validate(java.lang.String)",
    "vars": {
      "digest#23": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "ClassCastException", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.GrammarAtom::<init>(antlr.Grammar, antlr.Token, int)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"],
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.JavaCodeGenerator::genSemPred(java.lang.String, int)",
    "vars": {
      "pred#2": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::beginTree(antlr.Token)",
    "vars": {
      "tok": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.ANTLRHashString::<init>(antlr.CharScanner)",
    "vars": {
      "lexer": ["ANTLRLexer", "PreprocessorLexer", "String", "ANTLRTokdefLexer"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::deterministicImpliedPath(antlr.BlockWithImpliedExitPath)",
    "vars": {
      "blk": ["ZeroOrMoreBlock", "OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.ANTLRException::<init>(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genMatchUsingAtomText(antlr.GrammarAtom)",
    "vars": {
      "astArgs": ["String"],
      "atom": ["WildcardElement", "TokenRefElement", "StringLiteralElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::setAnalyzer(antlr.LLkGrammarAnalyzer)",
    "vars": {
      "analyzer_": ["LLkAnalyzer"]
    }
  },
  {
    "method_signature": "dacapo.FileDigest::get(java.lang.String, boolean, boolean, java.io.File)",
    "vars": {
      "file": ["String", "Map"],
      "scratch": []
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genBlockInitAction(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.GrammarFile::nameForExpandedGrammarFile(java.lang.String)",
    "vars": {
      "f": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genSemPred(java.lang.String, int)",
    "vars": {
      "pred": ["String", "Map"],
      "pred#2": ["String", "Map"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::copyFile(java.io.File, java.io.File)",
    "vars": {
      "inputFile": ["File"],
      "outputFile": ["File"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::optionValue()",
    "vars": {
      "retval": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::gen(antlr.TokenRangeElement)",
    "vars": {
      "r": ["TokenRangeElement"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.LexerGrammar)",
    "vars": {
      "sym": ["StringLiteralSymbol", "RuleSymbol", "TokenSymbol", "AlternativeBlock"],
      "g": ["LexerGrammar"],
      "s": ["StringLiteralSymbol"],
      "sym#4": ["RuleSymbol", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.JavaCharFormatter::escapeString(java.lang.String)",
    "vars": {
      "retval": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::<init>(java.io.Reader)",
    "vars": {
      "in": ["StringReader"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::addSemPred(java.lang.String)",
    "vars": {
      "predicate": ["String"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::genInclude(antlr.TreeWalkerGrammar)",
    "vars": {
      "sup": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::gen(antlr.CharRangeElement)",
    "vars": {
      "r": ["CharRangeElement"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::GenRuleInvocation(antlr.RuleRefElement)",
    "vars": {
      "rr": ["RuleBlock", "RuleRefElement", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::getValueString(int)",
    "vars": {
      "cs": ["String", "Map"],
      "sl": ["StringLiteralSymbol"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_6()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::gen(antlr.CharLiteralElement)",
    "vars": {
      "atom": ["CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.GrammarAtom::look(int)>(1) <antlr.LLkAnalyzer::look(int, antlr.TreeElement)",
    "vars": {
      "l": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "ClassCastException", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::gen(antlr.RuleRefElement)",
    "vars": {
      "rr": ["RuleBlock", "RuleRefElement", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::_printAction(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::refWildcard(antlr.Token, antlr.Token, int)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"],
      "label": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::gen(antlr.TreeElement)",
    "vars": {
      "t": ["TreeElement"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::gen()",
    "vars": {
      "tm": ["ImportVocabTokenManager", "SimpleTokenManager"],
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.ANTLRTokdefParser::LT(int)>(1) <antlr.ANTLRTokdefParser::line(antlr.ImportVocabTokenManager)",
    "vars": {
      "para": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "Unsafe", "ClassCastException", "Token", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.BlockEndElement::<init>(antlr.Grammar)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::gen()",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.GrammarFile::addGrammar(antlr.preprocessor.Grammar)",
    "vars": {
      "g": ["Grammar"]
    }
  },
  {
    "method_signature": "antlr.Alternative::addElement(antlr.AlternativeElement)",
    "vars": {
      "e": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "java.lang.String::substring(int)>($stack357) <antlr.CppCodeGenerator::genBody(antlr.ParserGrammar)",
    "vars": {
      "sup": ["IllegalArgumentException", "StringIndexOutOfBoundsException", "String"]
    }
  },
  {
    "method_signature": "antlr.LLkParser::<init>(antlr.TokenStream, int)",
    "vars": {
      "lexer": ["PreprocessorLexer", "ANTLRTokdefLexer"]
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_8()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::andInPlace(antlr.collections.impl.BitSet)",
    "vars": {
      "a": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.Parser::setTokenBuffer(antlr.TokenBuffer)",
    "vars": {
      "t": ["TokenBuffer"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.preprocessor.Preprocessor::throwsSpec()",
    "vars": {
      "t": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::genBitsets(antlr.collections.impl.Vector, int)",
    "vars": {
      "bitsetList": ["Vector"],
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <dacapo.FileDigest::replaceAllFixed(java.lang.String, java.lang.String, java.lang.String)",
    "vars": {
      "line": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Tool::preprocessedArgList()",
    "vars": {
      "nativeArrayCopy6": ["String", "Map"],
      "a": ["String[]"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::gen(antlr.WildcardElement)",
    "vars": {
      "wc": ["WildcardElement"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::gen(antlr.OneOrMoreBlock)",
    "vars": {
      "blk": ["OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.RuleBlock::getRuleName()>() <antlr.actions.cpp.ActionLexer::mTEXT_ITEM(boolean)",
    "vars": {
      "t": []
    }
  },
  {
    "method_signature": "antlr.TokenStreamRecognitionException::<init>(antlr.RecognitionException)",
    "vars": {
      "re": ["Token", "NoViableAltForCharException", "MismatchedCharException"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::GenRuleInvocation(antlr.RuleRefElement)",
    "vars": {
      "rr": ["RuleBlock", "RuleRefElement", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.AlternativeBlock::<init>(antlr.Grammar)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.AlternativeElement::getLabel()>() <antlr.CppCodeGenerator::genElementAST(antlr.AlternativeElement)",
    "vars": {
      "astNameBase": [],
      "elementRef_2": []
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CSharpCodeGenerator::getASTCreateString(java.lang.String)",
    "vars": {
      "astCreateString": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String)",
    "vars": {
      "el": ["TreeElement", "TokenRangeElement", "RuleRefElement", "StringLiteralElement", "WildcardElement", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "RuleBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"],
      "node_type": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::reportError(java.lang.String)",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.RuleRefElement::<init>(antlr.Grammar, antlr.Token, int)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"],
      "t": ["Object", "CommonToken", "Token", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_1()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.RuleSymbol::setBlock(antlr.RuleBlock)",
    "vars": {
      "rb": ["RuleBlock"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::deterministic(antlr.OneOrMoreBlock)",
    "vars": {
      "blk": ["OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::<init>(antlr.InputBuffer)",
    "vars": {
      "ib": ["CharBuffer"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::beginTree(antlr.Token)",
    "vars": {
      "tok": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::refCharLiteral(antlr.Token, antlr.Token, boolean, int, boolean)",
    "vars": {
      "label": ["CommonToken", "Token", "Object"],
      "lit": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::genBlockFinish(antlr.CSharpBlockFinishingInfo, java.lang.String)",
    "vars": {
      "howToFinish": ["CSharpBlockFinishingInfo"],
      "noViableAction": ["String"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.PreprocessorLexer::<init>(antlr.LexerSharedInputState)",
    "vars": {
      "state": ["LexerSharedInputState"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genASTDeclaration(antlr.AlternativeElement)",
    "vars": {
      "el": ["TreeElement", "TokenRangeElement", "RuleRefElement", "StringLiteralElement", "WildcardElement", "SynPredBlock", "OneOrMoreBlock", "CharRangeElement", "RuleBlock", "TokenRefElement", "ZeroOrMoreBlock", "AlternativeBlock", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.Lookahead::clone()",
    "vars": {
      "p": ["Lookahead"]
    }
  },
  {
    "method_signature": "antlr.Token::getText()>() <antlr.CppCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
    "vars": {
      "actionStr": []
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::gen(antlr.WildcardElement)",
    "vars": {
      "wc": ["WildcardElement"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Grammar::toString()",
    "vars": {
      "r": ["Rule"]
    }
  },
  {
    "method_signature": "antlr.ANTLRTokdefLexer::mk_tokenSet_1()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::exceptionGroup()",
    "vars": {
      "g": ["String"]
    }
  },
  {
    "method_signature": "java.lang.String::substring(int, int)>(0,  $stack74) <antlr.JavaCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
    "vars": {
      "id": ["IllegalArgumentException", "StringIndexOutOfBoundsException", "String"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::setUserExceptions(java.lang.String)",
    "vars": {
      "thr": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Tool::doEverything(java.lang.String[])",
    "vars": {
      "args": ["String[]"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Rule::setThrowsSpec(java.lang.String)",
    "vars": {
      "t": ["String"]
    }
  },
  {
    "method_signature": "antlr.AlternativeElement::<init>(antlr.Grammar, antlr.Token, int)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"],
      "start": ["Object", "CommonToken", "Token", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::gen(antlr.TokenRangeElement)",
    "vars": {
      "r": ["TokenRangeElement"]
    }
  },
  {
    "method_signature": "antlr.ANTLRHashString::setBuffer(char[], int)",
    "vars": {
      "buf": []
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::getValueString(int)",
    "vars": {
      "cs": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "java.lang.String::substring(int, int)>(0,  $stack13) <antlr.CSharpCodeGenerator::getASTCreateString(java.lang.String)",
    "vars": {
      "ctorID": ["IllegalArgumentException", "StringIndexOutOfBoundsException", "String"]
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::HTMLEncode(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.Vector::setElementAt(java.lang.Object, int)",
    "vars": {
      "obj": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::genFollowSetForRuleBlock(antlr.RuleBlock)",
    "vars": {
      "blk": ["RuleBlock"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.GrammarFile::addHeaderAction(java.lang.String)",
    "vars": {
      "a": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.RuleEndElement)",
    "vars": {
      "end": ["RuleEndElement", "RuleBlock"]
    }
  },
  {
    "method_signature": "antlr.ANTLRLexer::mk_tokenSet_3()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::throwsSpec()>() <antlr.preprocessor.Preprocessor::rule(antlr.preprocessor.Grammar)",
    "vars": {
      "thr": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "Unsafe", "ClassCastException", "Token", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::gen()",
    "vars": {
      "tm": ["ImportVocabTokenManager", "SimpleTokenManager"],
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.ANTLRLexer::escapeCharValue(java.lang.String)",
    "vars": {
      "cs": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::suitableForCaseExpression(antlr.Alternative)",
    "vars": {
      "a": ["Alternative", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "java.lang.String::substring(int, int)>(0,  $stack74) <antlr.CSharpCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
    "vars": {
      "id": ["IllegalArgumentException", "StringIndexOutOfBoundsException", "String"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
    "vars": {
      "label": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::QuoteForId(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.RuleRefElement)",
    "vars": {
      "rs": ["RuleSymbol", "AlternativeBlock"],
      "rr": ["RuleBlock", "RuleRefElement", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::lookaheadIsEmpty(antlr.Alternative, int)>($stack51,  effectiveDepth) <antlr.JavaCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "unpredicted": []
    }
  },
  {
    "method_signature": "antlr.CharFormatter::literalChar(int)>(value) <antlr.CppCodeGenerator::getValueString(int)",
    "vars": {
      "cs": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.ImportVocabTokenManager::define(antlr.TokenSymbol)",
    "vars": {
      "ts": ["StringLiteralSymbol", "TokenSymbol"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::getLookaheadTestExpression(antlr.Alternative, int)",
    "vars": {
      "alt": ["Alternative", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_0()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::<init>(java.io.Reader)",
    "vars": {
      "in": ["StringReader"]
    }
  },
  {
    "method_signature": "antlr.RuleBlock::getRuleName()>() <antlr.actions.java.ActionLexer::mTEXT_ITEM(boolean)",
    "vars": {
      "rule": []
    }
  },
  {
    "method_signature": "dacapo.antlr.Main::main(java.lang.String[])",
    "vars": {
      "args": ["String[]"]
    }
  },
  {
    "method_signature": "antlr.Tool::panic(java.lang.String)",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.Tool::getLanguage(antlr.MakeGrammar)",
    "vars": {
      "behavior": ["MakeGrammar"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::setGrammar(antlr.Grammar)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.JavaCodeGenerator::setupOutput(java.lang.String)",
    "vars": {
      "className": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CharStreamIOException::<init>(java.io.IOException)",
    "vars": {
      "io": ["IOException", "StreamDecoder", "InputStream", "EOFException", "MalformedURLException", "ZipException", "CEFormatException", "JarFile", "Object", "UnsupportedEncodingException", "UnmappableCharacterException", "MalformedInputException"]
    }
  },
  {
    "method_signature": "antlr.Tool::fatalError(java.lang.String)",
    "vars": {
      "message": ["String"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::countLines(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genBlockInitAction(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.CharScanner::<init>(antlr.LexerSharedInputState)",
    "vars": {
      "sharedState": ["LexerSharedInputState"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.ActionElement)",
    "vars": {
      "action": ["ActionElement"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Grammar::setTokenSection(java.lang.String)",
    "vars": {
      "tk": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::gen()",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "dacapo.Benchmark::getURL(java.lang.String)",
    "vars": {
      "fn": ["String"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::removeAssignmentFromDeclaration(java.lang.String)",
    "vars": {
      "d": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::deterministic(antlr.ZeroOrMoreBlock)",
    "vars": {
      "blk": ["ZeroOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.TokenStreamException::<init>(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.ZeroOrMoreBlock::getLabel()>() <antlr.CppCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
    "vars": {
      "label": []
    }
  },
  {
    "method_signature": "antlr.SemanticException::<init>(java.lang.String)",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::reverseLexerRuleName(java.lang.String)",
    "vars": {
      "id": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Hierarchy::optionsToString(antlr.collections.impl.IndexedVector)",
    "vars": {
      "options": ["IndexedVector"],
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.ANTLRLexer::mk_tokenSet_0()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.preprocessor.Hierarchy::verifyThatHierarchyIsComplete()",
    "vars": {
      "c": ["Grammar"]
    }
  },
  {
    "method_signature": "dacapo.antlr.AntlrHarness::postIteration(java.lang.String)",
    "vars": {
      "size": ["String"]
    }
  },
  {
    "method_signature": "antlr.Lookahead::<init>(antlr.collections.impl.BitSet)",
    "vars": {
      "p": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.DefineGrammarSymbols::endRule(java.lang.String)",
    "vars": {
      "r": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DocBookCodeGenerator::genAlt(antlr.Alternative)",
    "vars": {
      "alt": ["Alternative", "RuleBlock", "AlternativeBlock"],
      "elem": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.RuleSymbol::<init>(java.lang.String)",
    "vars": {
      "r": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::beginExceptionSpec(antlr.Token)",
    "vars": {
      "label": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::reportError(java.lang.String)",
    "vars": {
      "s": ["String"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::reportError(antlr.RecognitionException)",
    "vars": {
      "e": ["MismatchedCharException", "NoViableAltForCharException"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::grammar()",
    "vars": {
      "n": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::encodeLexerRuleName(java.lang.String)>($stack19) <antlr.CppCodeGenerator::genErrorCatchForElement(antlr.AlternativeElement)",
    "vars": {
      "r": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::setupGrammarParameters(antlr.Grammar)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.FileCopyException::<init>(java.lang.String)",
    "vars": {
      "msg": ["String"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::encodeLexerRuleName(java.lang.String)>($stack19) <antlr.CppCodeGenerator::genErrorTryForElement(antlr.AlternativeElement)",
    "vars": {
      "r": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refAction(antlr.Token)",
    "vars": {
      "action": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::genBlockPreamble(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["RuleBlock", "ZeroOrMoreBlock", "AlternativeBlock", "SynPredBlock", "OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::qualifiedID()>() <antlr.ANTLRParser::optionValue()",
    "vars": {
      "retval": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "MismatchedTokenException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "Unsafe", "ClassCastException", "Token", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.Grammar::hasOption(java.lang.String)",
    "vars": {
      "key": ["String"]
    }
  },
  {
    "method_signature": "antlr.ANTLRParser::exceptionSpec()",
    "vars": {
      "labelAction": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.LexerSharedInputState::<init>(antlr.InputBuffer)",
    "vars": {
      "inbuf": ["CharBuffer"]
    }
  },
  {
    "method_signature": "antlr.NoViableAltForCharException::<init>(char, java.lang.String, int, int)",
    "vars": {
      "fileName": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.StringLiteralSymbol::<init>(java.lang.String)",
    "vars": {
      "r": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Rule::setInitAction(java.lang.String)",
    "vars": {
      "a": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.VectorEnumerator::<init>(antlr.collections.impl.Vector)",
    "vars": {
      "v": ["Vector"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, antlr.StringLiteralElement)",
    "vars": {
      "atom": ["StringLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::<init>(antlr.InputBuffer)",
    "vars": {
      "ib": ["CharBuffer"]
    }
  },
  {
    "method_signature": "antlr.LexerGrammar::processArguments(java.lang.String[])",
    "vars": {
      "args": ["String[]"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.TreeElement)",
    "vars": {
      "t": ["TreeElement"]
    }
  },
  {
    "method_signature": "antlr.BlockContext::addAlternativeElement(antlr.AlternativeElement)",
    "vars": {
      "e": ["RuleRefElement", "WildcardElement", "SynPredBlock", "ZeroOrMoreBlock", "AlternativeBlock", "TreeElement", "TokenRangeElement", "StringLiteralElement", "BlockEndElement", "CharRangeElement", "OneOrMoreBlock", "RuleBlock", "TokenRefElement", "ActionElement", "RuleEndElement", "CharLiteralElement"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::toArray()",
    "vars": {
      "elems": []
    }
  },
  {
    "method_signature": "antlr.TokenQueue::append(antlr.Token)",
    "vars": {
      "tok": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_14()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.HTMLCodeGenerator::gen(antlr.TokenRefElement)",
    "vars": {
      "atom": ["TokenRefElement"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_8()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::println(java.lang.String)",
    "vars": {
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::genSemPred(java.lang.String, int)",
    "vars": {
      "pred#2": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::getLookaheadTestExpression(antlr.Alternative, int)>($stack51,  effectiveDepth) <antlr.CSharpCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "e": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "ClassCastException", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.actions.java.ActionLexer::setTool(antlr.Tool)",
    "vars": {
      "tool": ["Tool"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::setupGrammarParameters(antlr.Grammar)",
    "vars": {
      "g": ["ParserGrammar", "TreeWalkerGrammar", "LexerGrammar"],
      "ns": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::gen(antlr.LexerGrammar)",
    "vars": {
      "g": ["LexerGrammar"]
    }
  },
  {
    "method_signature": "antlr.ANTLRTokdefLexer::mk_tokenSet_0()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "java.lang.String::substring(int)>($stack156) <antlr.CppCodeGenerator::genBody(antlr.TreeWalkerGrammar)",
    "vars": {
      "sup": ["IllegalArgumentException", "StringIndexOutOfBoundsException", "String"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Preprocessor::<init>(antlr.TokenStream, int)",
    "vars": {
      "lexer": ["PreprocessorLexer"]
    }
  },
  {
    "method_signature": "antlr.CodeGenerator::setTool(antlr.Tool)",
    "vars": {
      "tool": ["Tool"]
    }
  },
  {
    "method_signature": "antlr.CppCharFormatter::escapeString(java.lang.String)",
    "vars": {
      "retval": ["String"],
      "s": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.TokenSymbol::setParaphrase(java.lang.String)",
    "vars": {
      "p": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.OneOrMoreBlock)",
    "vars": {
      "blk": ["OneOrMoreBlock"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.preprocessor.Preprocessor::exceptionGroup()",
    "vars": {
      "g": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_1()",
    "vars": {
      "data": []
    }
  },
  {
    "method_signature": "antlr.ANTLRTokdefLexer::<init>(java.io.Reader)",
    "vars": {
      "in": ["BufferedReader"]
    }
  },
  {
    "method_signature": "antlr.LLkAnalyzer::look(int, java.lang.String)",
    "vars": {
      "rule": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.Grammar::toString()",
    "vars": {
      "rs": ["RuleSymbol", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.actions.csharp.ActionLexer::mTREE_ELEMENT(boolean)",
    "vars": {
      "id": ["Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.preprocessor.Hierarchy::readGrammarFile(java.lang.String)",
    "vars": {
      "file": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.RuleRefElement::setLabel(java.lang.String)",
    "vars": {
      "label_": ["String", "Map"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::gen(antlr.TokenRangeElement)",
    "vars": {
      "r": ["TokenRangeElement"]
    }
  },
  {
    "method_signature": "antlr.MakeGrammar::refPreambleAction(antlr.Token)",
    "vars": {
      "act": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "java.lang.String::toUpperCase()>() <antlr.JavaCodeGenerator::mangleLiteral(java.lang.String)",
    "vars": {
      "mangled": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "ClassCastException", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::genLineNo(antlr.Token)",
    "vars": {
      "t": ["CommonToken", "Token", "Object"]
    }
  },
  {
    "method_signature": "antlr.CSharpCodeGenerator::getLookaheadTestExpression(antlr.Alternative, int)>($stack51,  $stack59) <antlr.CSharpCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
    "vars": {
      "e": ["URI", "IllegalStateException", "Locale", "Map", "Charset", "NoSuchElementException", "NoSuchProviderException", "Resource", "ByteOrder", "NullPointerException", "VersionInfo", "SecurityException", "Object", "MessageDigest", "UnmappableCharacterException", "DateFormat", "CalendarSystem", "RuntimeException", "StreamDecoder", "X500Principal", "Throwable", "NumberFormatException", "InternalError", "EOFException", "URL", "MissingResourceException", "ByteBuffer", "Future", "LocalGregorianCalendar", "AlgorithmParameters", "AssertionError", "FDBigInt", "CharsetEncoder", "KernelError", "BufferUnderflowException", "ZipException", "NetworkInterface", "AbstractStringBuilder", "OutOfMemoryError", "UnicodeSet", "IllegalThreadStateException", "ClassCastException", "Cipher", "String", "Constructor", "PatternSyntaxException", "Thread", "Error", "MutableBigInteger", "Level", "DerInputBuffer", "GeneralNames", "CEFormatException", "DecimalFormatSymbols", "InputStream", "UnsupportedEncodingException", "Reference", "JarIndex", "MalformedInputException", "ServiceConfigurationError", "NoSuchAlgorithmException", "CertificateEncodingException", "Package", "ReadOnlyBufferException", "BreakIterator", "UnsupportedOperationException", "Permission", "ArrayIndexOutOfBoundsException", "IllegalMonitorStateException", "IllegalCharsetNameException", "DateFormatSymbols", "ExceptionInInitializerError", "URLStreamHandler", "ZipEntry", "BufferOverflowException", "TimeZone", "IOException", "ProviderException", "Class", "SunJCE_f", "MalformedURLException", "UCharacterProperty", "JarFile", "BundleCheck", "CharBuffer", "ProtectionDomain", "Callable", "ConcurrentModificationException", "IndexOutOfBoundsException", "CertificateFactory", "Set", "AlgorithmParameterSpec", "List", "CoderResult", "StringIndexOutOfBoundsException", "Field", "ResourceBundle", "Validator", "ProcessBuilder", "CharsetDecoder", "Buffer", "ListIterator", "ArithmeticException", "UnsatisfiedLinkError", "StringBuffer", "AttributedCharacterIterator", "FloatingDecimal", "IllegalArgumentException", "CalendarDate", "Currency", "Process", "RejectedExecutionException", "InvalidParameterException", "Signature", "NumberFormat"]
    }
  },
  {
    "method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.AlternativeBlock)",
    "vars": {
      "blk": ["SynPredBlock", "RuleBlock", "AlternativeBlock"]
    }
  },
  {
    "method_signature": "antlr.TokenQueue::expand()",
    "vars": {
      "newBuffer": ["Token[]"]
    }
  },
  {
    "method_signature": "java.lang.String::valueOf(int)>(value) <antlr.CppCodeGenerator::getValueString(int)",
    "vars": {
      "cs": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::gen(antlr.TreeWalkerGrammar)",
    "vars": {
      "g": ["TreeWalkerGrammar"]
    }
  },
  {
    "method_signature": "antlr.Token::getText()>() <antlr.JavaCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
    "vars": {
      "actionStr": []
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::and(antlr.collections.impl.BitSet)",
    "vars": {
      "a": ["BitSet", "Lookahead"],
      "s": ["BitSet", "Lookahead"]
    }
  },
  {
    "method_signature": "antlr.collections.impl.BitSet::<init>(long[])",
    "vars": {
      "bits_": []
    }
  },
  {
    "method_signature": "antlr.TokenStreamIOException::<init>(java.io.IOException)",
    "vars": {
      "io": ["IOException", "StreamDecoder", "InputStream", "EOFException", "MalformedURLException", "ZipException", "CEFormatException", "JarFile", "Object", "UnsupportedEncodingException", "UnmappableCharacterException", "MalformedInputException"]
    }
  },
  {
    "method_signature": "antlr.CppCodeGenerator::gen(antlr.ParserGrammar)",
    "vars": {
      "g": ["ParserGrammar"]
    }
  },
  {
    "method_signature": "java.lang.StringBuffer::toString()>() <antlr.CppCodeGenerator::genElementAST(antlr.AlternativeElement)",
    "vars": {
      "astNameBase": ["StringIndexOutOfBoundsException", "IllegalArgumentException"]
    }
  }
]
