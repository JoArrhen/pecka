[
{
"method_signature": "antlr.build.Tool::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.debug.SemanticPredicateEvent::setResult(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRHashString::hashCode()",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::match(antlr.collections.impl.BitSet)",
"vars": {
"b": ["BitSet"]
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::getIndexOfChild(java.lang.Object, java.lang.Object)",
"vars": {
"parent": [],
"child": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_24()",
"vars": {
}
},
{
"method_signature": "antlr.debug.InputBufferListener::inputBufferConsume(antlr.debug.InputBufferEvent)",
"vars": {
"e": ["Null", "InputBufferEvent"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getLookaheadTestExpression(antlr.Lookahead[], int)",
"vars": {
"look": ["Null", "Lookahead[]"]
}
},
{
"method_signature": "antlr.preprocessor.Rule::getName()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genElementAST(antlr.AlternativeElement)",
"vars": {
"el": ["StringLiteralElement", "AlternativeBlock", "ZeroOrMoreBlock", "TokenRefElement", "RuleBlock", "SynPredBlock", "CharLiteralElement", "TokenRangeElement", "Null", "WildcardElement", "OneOrMoreBlock", "TreeElement"]
}
},
{
"method_signature": "antlr.LexerSharedInputState::reset()",
"vars": {
}
},
{
"method_signature": "antlr.GrammarElement::<init>(antlr.Grammar, antlr.Token)",
"vars": {
"g": ["LexerGrammar", "Null", "TreeWalkerGrammar", "ParserGrammar"],
"start": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
"vars": {
"v": ["Vector"]
}
},
{
"method_signature": "antlr.TokenRangeElement::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.NewLineListener::hitNewLine(antlr.debug.NewLineEvent)",
"vars": {
"e": ["Null", "NewLineEvent"]
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.CharRangeElement)",
"vars": {
"r": ["CharRangeElement"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mID(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserMatchListener::parserMismatchNot(antlr.debug.ParserMatchEvent)",
"vars": {
"e": ["Null", "ParserMatchEvent"]
}
},
{
"method_signature": "antlr.LLkAnalyzer::lookaheadEquivForApproxAndFullAnalysis(antlr.Lookahead[], int)",
"vars": {
"bset": ["Lookahead[]"]
}
},
{
"method_signature": "antlr.CommonAST::initialize(int, java.lang.String)",
"vars": {
"txt": ["String"]
}
},
{
"method_signature": "antlr.collections.impl.BitSet::andInPlace(antlr.collections.impl.BitSet)",
"vars": {
"a": ["BitSet", "Null"]
}
},
{
"method_signature": "antlr.collections.AST::equalsList(antlr.collections.AST)",
"vars": {
"t": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.InputBuffer::syncConsume()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::<init>(antlr.TokenStream)",
"vars": {
"lexer": ["PreprocessorLexer"]
}
},
{
"method_signature": "antlr.debug.MessageEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refAction(antlr.Token)",
"vars": {
"action": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.TreeElement)",
"vars": {
"t": ["TreeElement"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::endTree()",
"vars": {
}
},
{
"method_signature": "antlr.TreeSpecifierNode::<init>(antlr.Token)",
"vars": {
"tok_": []
}
},
{
"method_signature": "antlr.Grammar::toString()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.CharLiteralElement)",
"vars": {
"atom": ["CharLiteralElement"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genLiteralsTest()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::defineRuleName(antlr.Token, java.lang.String, boolean, java.lang.String)",
"vars": {
"r": ["Null", "Token", "CommonToken"],
"access": ["String", "Null"],
"docComment": ["String", "Null"]
}
},
{
"method_signature": "antlr.Tool::getOutputDirectory()",
"vars": {
}
},
{
"method_signature": "antlr.ASTFactory::create(int, java.lang.String, java.lang.String)",
"vars": {
"txt": [],
"className": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::fireSyntacticPredicateFailed()",
"vars": {
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genTokenTypes(antlr.TokenManager)",
"vars": {
"tm": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_3()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::getHeaderAction(java.lang.String)",
"vars": {
"name": ["String"]
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::setupDebugging(antlr.TokenStream)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mDIGIT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateListener::syntacticPredicateStarted(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": ["Null", "SyntacticPredicateEvent"]
}
},
{
"method_signature": "antlr.ASTNULLType::setNextSibling(antlr.collections.AST)",
"vars": {
"n": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.TokenManager::getVocabulary()",
"vars": {
}
},
{
"method_signature": "antlr.debug.TraceAdapter::exitRule(antlr.debug.TraceEvent)",
"vars": {
"e": ["TraceEvent", "Null"]
}
},
{
"method_signature": "antlr.collections.impl.VectorEnumeration::nextElement()",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genLookaheadSetForAlt(antlr.Alternative)",
"vars": {
"alt": []
}
},
{
"method_signature": "antlr.CharScanner::tab()",
"vars": {
}
},
{
"method_signature": "antlr.Parser::match(antlr.collections.impl.BitSet)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::<init>(antlr.LexerSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.ANTLRParser::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.collections.impl.Vector::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genSemPred(java.lang.String, int)",
"vars": {
"pred": ["String", "Null"]
}
},
{
"method_signature": "antlr.preprocessor.Rule::getReturnValue()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::beginAlt(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mCOLON(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.GrammarFile::nameForExpandedGrammarFile(java.lang.String)",
"vars": {
"f": ["String", "Null"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.StringLiteralElement)",
"vars": {
"atom": ["StringLiteralElement"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::match(char)",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mTREE(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::notInPlace(int)",
"vars": {
}
},
{
"method_signature": "antlr.MismatchedCharException::appendCharName(java.lang.StringBuffer, int)",
"vars": {
"sb": ["StringBuffer"]
}
},
{
"method_signature": "antlr.SemanticException::<init>(java.lang.String, java.lang.String, int)",
"vars": {
"fileName": [],
"s": []
}
},
{
"method_signature": "antlr.RuleBlock::setDefaultErrorHandler(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mk_tokenSet_1()",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::addSyntacticPredicateListener(antlr.debug.SyntacticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.AlternativeBlock::<init>(antlr.Grammar, antlr.Token, boolean)",
"vars": {
"g": ["LexerGrammar", "TreeWalkerGrammar", "Null", "ParserGrammar"],
"start": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CommonAST::initialize(antlr.Token)",
"vars": {
"tok": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.StringLiteralElement)",
"vars": {
"atom": ["StringLiteralElement"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireEvents(int, java.util.Vector)",
"vars": {
"listeners": ["Vector", "Null"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::genBody(antlr.TreeWalkerGrammar)",
"vars": {
"g": ["TreeWalkerGrammar"]
}
},
{
"method_signature": "antlr.build.ANTLR::build(antlr.build.Tool)",
"vars": {
"tool": []
}
},
{
"method_signature": "antlr.BaseAST::decode(java.lang.String)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.MakeGrammar::refArgAction(antlr.Token)",
"vars": {
"action": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.collections.impl.BitSet::toPackedArray()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mQUESTION(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::refStringLiteral(antlr.Token, antlr.Token, int, boolean)",
"vars": {
"lit": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CharScanner::traceIndent()",
"vars": {
}
},
{
"method_signature": "antlr.ASTNULLType::initialize(int, java.lang.String)",
"vars": {
"txt": ["String"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::setupGrammarParameters(antlr.Grammar)",
"vars": {
"g": ["Null"]
}
},
{
"method_signature": "antlr.collections.AST::initialize(antlr.Token)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.debug.MessageAdapter::reportError(antlr.debug.MessageEvent)",
"vars": {
"e": ["Null", "MessageEvent"]
}
},
{
"method_signature": "antlr.collections.AST::toStringTree()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::exceptionSpec()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireSyntacticPredicateStarted(int)",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::lookaheadIsEmpty(antlr.Alternative, int)",
"vars": {
"alt": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.preprocessor.Grammar::addRule(antlr.preprocessor.Rule)",
"vars": {
"r": ["Null", "Rule"]
}
},
{
"method_signature": "antlr.collections.impl.ASTEnumerator::nextNode()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::exitIfError()",
"vars": {
}
},
{
"method_signature": "antlr.debug.InputBufferListener::inputBufferMark(antlr.debug.InputBufferEvent)",
"vars": {
"e": ["Null", "InputBufferEvent"]
}
},
{
"method_signature": "antlr.CommonASTWithHiddenTokens::getHiddenAfter()",
"vars": {
}
},
{
"method_signature": "antlr.Parser::setASTFactory(antlr.ASTFactory)",
"vars": {
"f": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genBlockInitAction(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.RuleBlock::toString()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mID_OR_KEYWORD(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CommonHiddenStreamToken::getHiddenBefore()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserMatchAdapter::parserMismatch(antlr.debug.ParserMatchEvent)",
"vars": {
"e": ["Null", "ParserMatchEvent"]
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.WildcardElement)",
"vars": {
"wc": ["WildcardElement"]
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genHeader()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::addSemPred(java.lang.String)",
"vars": {
"predicate": ["String"]
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": ["ZeroOrMoreBlock"]
}
},
{
"method_signature": "antlr.ASTPair::advanceChildToEnd()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_4()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::mk_tokenSet_7()",
"vars": {
}
},
{
"method_signature": "antlr.debug.Event::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.ANTLRLexer::mDIGIT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ASTNULLType::equalsTree(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.Tool::getNamespaceAntlr()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genErrorTryForElement(antlr.AlternativeElement)",
"vars": {
"el": ["RuleRefElement", "TokenRangeElement", "TokenRefElement"]
}
},
{
"method_signature": "antlr.BaseAST::xmlSerializeRootClose(java.io.Writer)",
"vars": {
"out": []
}
},
{
"method_signature": "antlr.TokenStreamSelector::select(java.lang.String)",
"vars": {
"sname": []
}
},
{
"method_signature": "antlr.Parser::removeParserTokenListener(antlr.debug.ParserTokenListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
"vars": {
"currentRule": [],
"tInfo": [],
"actionStr": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::beginTree(antlr.Token)",
"vars": {
"tok": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_9()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::printAction(antlr.Token)",
"vars": {
"t": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.ANTLRParser::<init>(antlr.ParserSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::setLineOffset(int)",
"vars": {
}
},
{
"method_signature": "antlr.SimpleTokenManager::setReadOnly(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mAST_ITEM(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.TokenRefElement::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.build.Tool::error(java.lang.String, java.lang.Exception)",
"vars": {
"msg": ["String"],
"e": []
}
},
{
"method_signature": "antlr.Parser::consume()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_4()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::<init>(antlr.InputBuffer)",
"vars": {
"ib": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addSyntacticPredicateListener(antlr.debug.SyntacticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genCases(antlr.collections.impl.BitSet)",
"vars": {
"p": ["BitSet", "Null"]
}
},
{
"method_signature": "antlr.collections.impl.Vector::<init>(int)",
"vars": {
}
},
{
"method_signature": "antlr.CharRangeElement::setLabel(java.lang.String)",
"vars": {
"label_": ["String", "Null"]
}
},
{
"method_signature": "antlr.MakeGrammar::endSubRule()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::endExceptionGroup()",
"vars": {
}
},
{
"method_signature": "antlr.Tool::getNameSpace()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_18()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::exitIfError()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Rule::narrowerVisibility(antlr.preprocessor.Rule)",
"vars": {
"rule": []
}
},
{
"method_signature": "antlr.AlternativeElement::setAutoGenType(int)",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mTREE(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genAlt(antlr.Alternative, antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "Null", "AlternativeBlock", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"],
"alt": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.RuleBlock::prepareForAnalysis()",
"vars": {
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateAdapter::syntacticPredicateStarted(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": ["Null", "SyntacticPredicateEvent"]
}
},
{
"method_signature": "antlr.LLkAnalyzer::getAltLookahead(antlr.AlternativeBlock, int, int)",
"vars": {
"blk": ["RuleBlock", "Null", "AlternativeBlock", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.collections.impl.BitSet::toString(java.lang.String, antlr.collections.impl.Vector)",
"vars": {
"vocabulary": ["Vector", "Null"],
"separator": ["String"]
}
},
{
"method_signature": "antlr.TokenSymbol::setParaphrase(java.lang.String)",
"vars": {
"p": ["String", "Null"]
}
},
{
"method_signature": "antlr.RuleBlock::generate()",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::getCommitToPath()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mACTION(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.Tracer::indent()",
"vars": {
}
},
{
"method_signature": "antlr.ZeroOrMoreBlock::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_2()",
"vars": {
}
},
{
"method_signature": "antlr.NameSpace::parse(java.lang.String)",
"vars": {
"name": ["String", "Null"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
"vars": {
"transInfo": ["Null", "ActionTransInfo"],
"idParam": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRParser::tokensSpec()",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::<init>(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserReporter::semanticPredicateEvaluated(antlr.debug.SemanticPredicateEvent)",
"vars": {
"e": ["Null", "SemanticPredicateEvent"]
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::mSTRING(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::mk_tokenSet_10()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::beginSubRule(antlr.Token, antlr.Token, boolean)",
"vars": {
"start": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mWS(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.collections.AST::toString()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genErrorHandler(antlr.ExceptionSpec)",
"vars": {
"ex": ["Null", "ExceptionSpec"]
}
},
{
"method_signature": "antlr.ASTFactory::dup(antlr.collections.AST)",
"vars": {
"t": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.CharRangeElement)",
"vars": {
"r": ["CharRangeElement"]
}
},
{
"method_signature": "antlr.preprocessor.Rule::getVisibility()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genLiteralsTest()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::getLookaheadTestExpression(antlr.Alternative, int)",
"vars": {
"alt": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.ANTLRLexer::<init>(antlr.InputBuffer)",
"vars": {
"ib": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_20()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refHeaderAction(antlr.Token, antlr.Token)",
"vars": {
"act": ["Null", "Token", "CommonToken"],
"name": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.collections.impl.Vector::size()",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::setupDebugging()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::mk_tokenSet_4()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::refCharRange(antlr.Token, antlr.Token, antlr.Token, int, boolean)",
"vars": {
"label": ["Null", "Token", "CommonToken"],
"t1": ["Null", "Token", "CommonToken"],
"t2": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.preprocessor.Rule::getBang()",
"vars": {
}
},
{
"method_signature": "antlr.Tool::setFileLineFormatter(antlr.FileLineFormatter)",
"vars": {
"formatter": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genSemPredMap(java.lang.String)",
"vars": {
"prefix": ["String"]
}
},
{
"method_signature": "antlr.CharScanner::commit()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::lexerOptionsSpec()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genSemPredMap()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::member(int)",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMatch(int, antlr.collections.impl.BitSet, java.lang.String, int)",
"vars": {
"b": ["BitSet"],
"text": ["String", "Null"]
}
},
{
"method_signature": "antlr.LLkAnalyzer::deterministic(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "Null", "AlternativeBlock", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.debug.ParserMatchListener::parserMatch(antlr.debug.ParserMatchEvent)",
"vars": {
"e": ["Null", "ParserMatchEvent"]
}
},
{
"method_signature": "antlr.ANTLRParser::charSet()",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genHeader()",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::<init>(antlr.LexerSharedInputState)",
"vars": {
"sharedState": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMismatch(char, antlr.collections.impl.BitSet, int)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.ANTLRLexer::mESC(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::mk_tokenSet_11()",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::setText(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRParser::exceptionGroup()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::getValueString(int)",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::getCaseSensitive()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mVAR_ASSIGN(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.SynPredBlock::<init>(antlr.Grammar, antlr.Token)",
"vars": {
"g": [],
"start": []
}
},
{
"method_signature": "antlr.LLkParser::LT(int)",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::oneOrMoreSubRule()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::setUserExceptions(java.lang.String)",
"vars": {
"thr": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRParser::treeParserSpec(java.lang.String)",
"vars": {
"doc": ["String", "Null"]
}
},
{
"method_signature": "antlr.collections.impl.VectorEnumerator::<init>(antlr.collections.impl.Vector)",
"vars": {
"v": ["Vector"]
}
},
{
"method_signature": "antlr.AlternativeBlock::toString()",
"vars": {
}
},
{
"method_signature": "antlr.debug.MessageAdapter::refresh()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::of(int)",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::<init>(long[])",
"vars": {
"bits_": ["long[]"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addDoneListener(antlr.debug.ListenerBase)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.ASTFactory::make(AST[])",
"vars": {
"nodes": ["Null", "AST[]"]
}
},
{
"method_signature": "antlr.Lookahead::of(int)",
"vars": {
}
},
{
"method_signature": "antlr.BaseAST::setFirstChild(antlr.collections.AST)",
"vars": {
"c": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.ANTLRParser::notTerminal(antlr.Token)",
"vars": {
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.RuleRefElement::toString()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::mk_tokenSet_9()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addParserListener(antlr.debug.ParserListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.ANTLRLexer::mCLOSE_ELEMENT_OPTION(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMismatch(int, int, java.lang.String, int)",
"vars": {
"text": ["String", "Null"]
}
},
{
"method_signature": "antlr.MakeGrammar::noAutoGenSubRule()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.VectorEnumerator::hasMoreElements()",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.collections.impl.LList::deleteHead()",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.TreeWalkerGrammar)",
"vars": {
"g": ["TreeWalkerGrammar"]
}
},
{
"method_signature": "antlr.Parser::addTraceListener(antlr.debug.TraceListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.SemanticPredicateAdapter::semanticPredicateEvaluated(antlr.debug.SemanticPredicateEvent)",
"vars": {
"e": ["Null", "SemanticPredicateEvent"]
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.TokenRangeElement)",
"vars": {
"r": ["TokenRangeElement"]
}
},
{
"method_signature": "antlr.CSharpCharFormatter::literalString(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::printSet(int, int, antlr.Lookahead)",
"vars": {
"lookahead": ["Lookahead", "Null"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::optionalSubRule()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mCHAR_LITERAL(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireSyntacticPredicateSucceeded(int)",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genMatch(antlr.collections.impl.BitSet)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.MismatchedTokenException::tokenName(int)",
"vars": {
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.OneOrMoreBlock)",
"vars": {
"blk": ["OneOrMoreBlock"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addSemanticPredicateListener(antlr.debug.SemanticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CharScanner::getTokenObject()",
"vars": {
}
},
{
"method_signature": "antlr.collections.Stack::push(java.lang.Object)",
"vars": {
"o": ["String", "Null", "AlternativeBlock", "Token", "StringLiteralSymbol", "Integer", "Alternative", "BlockContext", "Rule", "StringLiteralElement", "Lookahead", "RuleSymbol", "Grammar", "RuleBlock", "TreeBlockContext", "ExceptionSpec", "OneOrMoreBlock", "ASTNULLType", "CommonToken", "CharLiteralElement", "TokenRangeElement", "Object[]", "TreeElement", "TokenSymbol", "TokenRefElement", "Lookahead[]", "IntRange", "RuleRefElement", "Option", "ZeroOrMoreBlock", "GrammarFile", "SynPredBlock", "CharRangeElement", "ExceptionHandler", "WildcardElement"]
}
},
{
"method_signature": "antlr.CharQueue::elementAt(int)",
"vars": {
}
},
{
"method_signature": "antlr.TokenBuffer::mark()",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
"vars": {
"v": ["Vector"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::consume()",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::fireSemanticPredicateEvaluated(int, int, boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ActionElement::toString()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refCharRange(antlr.Token, antlr.Token, antlr.Token, int, boolean)",
"vars": {
"label": ["Null", "Token", "CommonToken"],
"t1": ["Null", "Token", "CommonToken"],
"t2": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.DefaultToolErrorHandler::warnAltAmbiguity(antlr.Grammar, antlr.AlternativeBlock, boolean, int, antlr.Lookahead[], int, int)",
"vars": {
"blk": ["RuleBlock", "Null", "AlternativeBlock", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"],
"grammar": ["Null"],
"sets": ["Lookahead[]"]
}
},
{
"method_signature": "antlr.TokenManager::isReadOnly()",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genSynPred(antlr.SynPredBlock)",
"vars": {
"blk": ["Null", "SynPredBlock"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.OneOrMoreBlock)",
"vars": {
"blk": ["OneOrMoreBlock"]
}
},
{
"method_signature": "antlr.CommonToken::getColumn()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::toStringOfWords()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::refTreeSpecifier(antlr.Token)",
"vars": {
"treeSpec": []
}
},
{
"method_signature": "antlr.preprocessor.GrammarFile::addGrammar(antlr.preprocessor.Grammar)",
"vars": {
"g": ["Null", "Grammar"]
}
},
{
"method_signature": "antlr.Parser::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genTokenStrings()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mCOMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genNextToken()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCharFormatter::literalChar(int)",
"vars": {
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
"vars": {
"tInfo": ["Null", "ActionTransInfo"],
"id": ["String", "Null"]
}
},
{
"method_signature": "antlr.RuleRefElement::getIdAssign()",
"vars": {
}
},
{
"method_signature": "antlr.TokenStreamSelector::push(antlr.TokenStream)",
"vars": {
"stream": []
}
},
{
"method_signature": "antlr.LLkParser::<init>(antlr.ParserSharedInputState, int)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genInclude(antlr.LexerGrammar)",
"vars": {
"g": ["LexerGrammar"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::getLookaheadTestExpression(antlr.Lookahead[], int)",
"vars": {
"look": ["Null", "Lookahead[]"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_17()",
"vars": {
}
},
{
"method_signature": "antlr.TokenStreamSelector::getStream(java.lang.String)",
"vars": {
"sname": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.BlockEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.preprocessor.Tool::preprocessedArgList()",
"vars": {
}
},
{
"method_signature": "antlr.RuleBlock::getRuleName()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genLiteralsTest()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::endExceptionGroup()",
"vars": {
}
},
{
"method_signature": "antlr.TokenManager::getName()",
"vars": {
}
},
{
"method_signature": "antlr.CppCharFormatter::literalChar(int)",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::lookaheadIsEmpty(antlr.Alternative, int)",
"vars": {
"alt": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.TreeSpecifierNode::getFirstChild()",
"vars": {
}
},
{
"method_signature": "antlr.MismatchedTokenException::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::endRule(java.lang.String)",
"vars": {
"r": ["String", "Null"]
}
},
{
"method_signature": "antlr.preprocessor.GrammarFile::<init>(antlr.Tool, java.lang.String)",
"vars": {
"f": ["String", "Null"],
"tool": ["Tool", "Null"]
}
},
{
"method_signature": "antlr.AlternativeBlock::getAutoGen()",
"vars": {
}
},
{
"method_signature": "antlr.TokenManager::define(antlr.TokenSymbol)",
"vars": {
"ts": ["Null", "StringLiteralSymbol", "TokenSymbol"]
}
},
{
"method_signature": "antlr.SynPredBlock::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::markBitsetForGen(antlr.collections.impl.BitSet)",
"vars": {
"p": ["BitSet", "Null"]
}
},
{
"method_signature": "antlr.collections.impl.LLCell::<init>(java.lang.Object)",
"vars": {
"o": ["String", "Null", "AlternativeBlock", "StringLiteralSymbol", "Token", "Integer", "Alternative", "BlockContext", "Rule", "StringLiteralElement", "Lookahead", "RuleSymbol", "Grammar", "RuleBlock", "TreeBlockContext", "OneOrMoreBlock", "ExceptionSpec", "ASTNULLType", "CommonToken", "CharLiteralElement", "TokenRangeElement", "Object[]", "TreeElement", "TokenSymbol", "TokenRefElement", "Lookahead[]", "IntRange", "RuleRefElement", "Option", "ZeroOrMoreBlock", "GrammarFile", "SynPredBlock", "CharRangeElement", "ExceptionHandler", "WildcardElement"]
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::fireRewind(int)",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::GenRuleInvocation(antlr.RuleRefElement)",
"vars": {
"rr": ["RuleRefElement"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::genBitsets(antlr.collections.impl.Vector, int, java.lang.String)",
"vars": {
"prefix": ["String"],
"bitsetList": ["Vector", "Null"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::genNextToken()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::mRPAREN(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ImportVocabTokenManager::clone()",
"vars": {
}
},
{
"method_signature": "antlr.Parser::removeTraceListener(antlr.debug.TraceListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.collections.ASTEnumeration::hasMoreNodes()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genBlockFinish(antlr.CSharpBlockFinishingInfo, java.lang.String)",
"vars": {
"noViableAction": ["String", "Null"],
"howToFinish": ["CSharpBlockFinishingInfo"]
}
},
{
"method_signature": "antlr.CodeGenerator::getFOLLOWBitSet(java.lang.String, int)",
"vars": {
"ruleName": ["String", "Null"]
}
},
{
"method_signature": "antlr.TokenQueue::init(int)",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_18()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::<init>(antlr.LexerSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.TokenStreamIOException::<init>(java.io.IOException)",
"vars": {
"io": ["Null"]
}
},
{
"method_signature": "antlr.CharScanner::getFilename()",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::<init>(antlr.ParserSharedInputState, int)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.ASTPair::toString()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Rule::setInitAction(java.lang.String)",
"vars": {
"a": ["String", "Null"]
}
},
{
"method_signature": "antlr.CodeGenerator::extractIdOfAction(java.lang.String, int, int)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.CharRangeElement::<init>(antlr.LexerGrammar, antlr.Token, antlr.Token, int)",
"vars": {
"g": ["LexerGrammar", "Null"],
"t1": ["Null", "Token", "CommonToken"],
"t2": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refReturnAction(antlr.Token)",
"vars": {
"returnAction": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CharScanner::match(char)",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::addParserListener(antlr.debug.ParserListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mSTRING_LITERAL(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserTokenAdapter::parserConsume(antlr.debug.ParserTokenEvent)",
"vars": {
"e": ["ParserTokenEvent", "Null"]
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTPanel::<init>(javax.swing.tree.TreeModel, javax.swing.event.TreeSelectionListener)",
"vars": {
"listener": ["Null"],
"tm": ["JTreeASTModel"]
}
},
{
"method_signature": "antlr.TreeParser::getTokenNames()",
"vars": {
}
},
{
"method_signature": "antlr.RuleSymbol::setBlock(antlr.RuleBlock)",
"vars": {
"rb": ["RuleBlock"]
}
},
{
"method_signature": "antlr.LexerGrammar::processArguments(java.lang.String[])",
"vars": {
"args": ["Null", "String[]"]
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.TreeWalkerGrammar)",
"vars": {
"g": ["TreeWalkerGrammar"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeSemanticPredicateListener(antlr.debug.SemanticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.collections.impl.LList::add(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.RuleEndElement)",
"vars": {
"end": ["RuleEndElement"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::setDebugMode(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.NewLineEvent::setValues(int)",
"vars": {
}
},
{
"method_signature": "antlr.MismatchedTokenException::<init>(java.lang.String[], antlr.collections.AST, int, int, boolean)",
"vars": {
"tokenNames_": [],
"node_": []
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mCOMMA(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mDIGIT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genRule(antlr.RuleSymbol, boolean, int)",
"vars": {
"s": ["Null", "RuleSymbol"]
}
},
{
"method_signature": "antlr.ASTFactory::dupList(antlr.collections.AST)",
"vars": {
"t": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_25()",
"vars": {
}
},
{
"method_signature": "antlr.TreeWalkerGrammar::getSuperClass()",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::isDebugMode()",
"vars": {
}
},
{
"method_signature": "antlr.TokenBuffer::<init>(antlr.TokenStream)",
"vars": {
"input_": ["ANTLRLexer"]
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::rule(antlr.preprocessor.Grammar)",
"vars": {
"gr": ["Null", "Grammar"]
}
},
{
"method_signature": "antlr.ANTLRLexer::mRPAREN(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genTokenASTNodeMap()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String, java.lang.String)",
"vars": {
"node_type": ["String", "Null"],
"el": ["Null", "AlternativeBlock", "StringLiteralElement", "RuleBlock", "OneOrMoreBlock", "CharLiteralElement", "TokenRangeElement", "TreeElement", "TokenRefElement", "RuleRefElement", "ZeroOrMoreBlock", "SynPredBlock", "CharRangeElement", "WildcardElement"],
"var_name": ["String", "Null"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genBody(antlr.LexerGrammar)",
"vars": {
"g": ["LexerGrammar"]
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.WildcardElement)",
"vars": {
"wc": ["WildcardElement"]
}
},
{
"method_signature": "antlr.ASTFactory::<init>(java.util.Hashtable)",
"vars": {
"tokenTypeToClassMap": []
}
},
{
"method_signature": "antlr.LLkParser::<init>(antlr.TokenBuffer, int)",
"vars": {
"tokenBuf": ["TokenBuffer"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mDIGIT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genSynPred(antlr.SynPredBlock, java.lang.String)",
"vars": {
"blk": ["Null", "SynPredBlock"],
"lookaheadExpr": ["Null", "String"]
}
},
{
"method_signature": "antlr.BaseAST::equalsListPartial(antlr.collections.AST)",
"vars": {
"sub": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.ASTNULLType::equalsTreePartial(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mSTUFF(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mk_tokenSet_0()",
"vars": {
}
},
{
"method_signature": "antlr.debug.TraceEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.preprocessor.Grammar::getName()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.StringLiteralElement)",
"vars": {
"atom": ["StringLiteralElement"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireReportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::<init>(antlr.InputBuffer)",
"vars": {
"ib": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::fireSyntacticPredicateSucceeded()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refTokenRange(antlr.Token, antlr.Token, antlr.Token, int, boolean)",
"vars": {
"label": ["Null", "Token", "CommonToken"],
"t1": ["Null", "Token", "CommonToken"],
"t2": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.ASTNULLType::findAllPartial(antlr.collections.AST)",
"vars": {
"subtree": []
}
},
{
"method_signature": "antlr.RuleBlock::getEndElement()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.LexerGrammar)",
"vars": {
"g": ["LexerGrammar"]
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mRCURLY(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mTEXT_ARG(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::getASTCreateString(java.lang.String)",
"vars": {
"str": ["String", "Null"]
}
},
{
"method_signature": "antlr.ParserGrammar::setOption(java.lang.String, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"key": ["String", "Null"]
}
},
{
"method_signature": "antlr.CommonToken::<init>(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genInclude(antlr.ParserGrammar)",
"vars": {
"g": ["ParserGrammar"]
}
},
{
"method_signature": "antlr.debug.ParserReporter::parserConsume(antlr.debug.ParserTokenEvent)",
"vars": {
"e": ["ParserTokenEvent", "Null"]
}
},
{
"method_signature": "antlr.collections.impl.BitSet::numWordsToHold(int)",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mDIGIT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CharFormatter::literalChar(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::match(int)",
"vars": {
}
},
{
"method_signature": "antlr.MismatchedTokenException::<init>(java.lang.String[], antlr.Token, int, boolean, java.lang.String)",
"vars": {
"token_": ["Null", "Token", "CommonToken"],
"fileName_": ["String", "Null"],
"tokenNames_": ["String[]", "Null"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genSemPredMap()",
"vars": {
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.CharLiteralElement)",
"vars": {
"atom": ["CharLiteralElement"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String)",
"vars": {
"node_type": ["String", "Null"],
"el": ["Null", "AlternativeBlock", "StringLiteralElement", "RuleBlock", "OneOrMoreBlock", "CharLiteralElement", "TokenRangeElement", "TreeElement", "TokenRefElement", "RuleRefElement", "ZeroOrMoreBlock", "SynPredBlock", "CharRangeElement", "WildcardElement"]
}
},
{
"method_signature": "antlr.ANTLRLexer::mOR(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::remove(int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refAction(antlr.Token)",
"vars": {
"action": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.AlternativeBlock::getAlternativeAt(int)",
"vars": {
}
},
{
"method_signature": "antlr.Tool::warning(java.lang.String)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.CharScanner::matchNot(char)",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::removeAssignmentFromDeclaration(java.lang.String)",
"vars": {
"d": ["String", "Null"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refTreeSpecifier(antlr.Token)",
"vars": {
"treeSpec": []
}
},
{
"method_signature": "antlr.MismatchedTokenException::getMessage()",
"vars": {
}
},
{
"method_signature": "antlr.BaseAST::toStringTree()",
"vars": {
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateAdapter::refresh()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Rule::setBang()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mNEWLINE(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.TreeParser::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.ANTLRParser::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.ANTLRParser::mk_tokenSet_4()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.TreeWalkerGrammar)",
"vars": {
"g": ["TreeWalkerGrammar"]
}
},
{
"method_signature": "antlr.ASTNULLType::initialize(antlr.Token)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMismatch(char, char, int)",
"vars": {
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.WildcardElement)",
"vars": {
"wc": ["WildcardElement"]
}
},
{
"method_signature": "antlr.MakeGrammar::hasError()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.ASTEnumerator::<init>(antlr.collections.impl.Vector)",
"vars": {
"v": ["Vector"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mINT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::beginExceptionSpec(antlr.Token)",
"vars": {
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.Alternative::setAutoGen(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.RuleSymbol::getReference(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::<init>(antlr.collections.AST)",
"vars": {
"t": ["Null"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::genLineNo(int)",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::<init>(antlr.ParserSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.Tool::factory(java.lang.String)",
"vars": {
"p": []
}
},
{
"method_signature": "antlr.BaseAST::addChild(antlr.collections.AST)",
"vars": {
"node": ["Null"]
}
},
{
"method_signature": "antlr.MakeGrammar::endTree()",
"vars": {
}
},
{
"method_signature": "antlr.Grammar::hasOption(java.lang.String)",
"vars": {
"key": ["String"]
}
},
{
"method_signature": "antlr.ANTLRParser::qualifiedID()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mk_tokenSet_5()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::refExceptionHandler(antlr.Token, antlr.Token)",
"vars": {
"action": ["Null", "Token", "CommonToken"],
"exTypeAndName": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_8()",
"vars": {
}
},
{
"method_signature": "antlr.TreeParser::traceIndent()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.VectorEnumeration::<init>(antlr.collections.impl.Vector)",
"vars": {
"v": []
}
},
{
"method_signature": "antlr.PreservingFileWriter::close()",
"vars": {
}
},
{
"method_signature": "antlr.build.Tool::stderr(java.lang.String)",
"vars": {
"s": ["Null"]
}
},
{
"method_signature": "antlr.CommonToken::<init>(int, java.lang.String)",
"vars": {
"txt": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRParser::mk_tokenSet_7()",
"vars": {
}
},
{
"method_signature": "antlr.SynPredBlock::<init>(antlr.Grammar)",
"vars": {
"g": ["LexerGrammar", "TreeWalkerGrammar", "Null", "ParserGrammar"]
}
},
{
"method_signature": "antlr.debug.NewLineEvent::toString()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireReportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.debug.InputBufferAdapter::inputBufferLA(antlr.debug.InputBufferEvent)",
"vars": {
"e": ["Null", "InputBufferEvent"]
}
},
{
"method_signature": "antlr.ANTLRException::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.TreeParser::reportError(antlr.RecognitionException)",
"vars": {
"ex": []
}
},
{
"method_signature": "antlr.collections.impl.LLEnumeration::<init>(antlr.collections.impl.LList)",
"vars": {
"l": ["LList"]
}
},
{
"method_signature": "antlr.ANTLRStringBuffer::getBuffer()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::rule()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
"vars": {
"currentRule": ["RuleBlock", "Null"],
"tInfo": ["ActionTransInfo", "Null"],
"actionStr": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::setTool(antlr.Tool)",
"vars": {
"tool": ["Tool", "Null"]
}
},
{
"method_signature": "antlr.collections.impl.LList::length()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.TokenRefElement)",
"vars": {
"atom": ["TokenRefElement"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
"vars": {
"astCtorArgs": ["String", "Null"],
"atom": ["StringLiteralElement", "Null", "TokenRefElement", "CharLiteralElement", "WildcardElement"]
}
},
{
"method_signature": "antlr.LexerGrammar::getTestLiterals()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::reportError(java.lang.String)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.MakeGrammar::endGrammar()",
"vars": {
}
},
{
"method_signature": "antlr.RecognitionException::toString()",
"vars": {
}
},
{
"method_signature": "antlr.Parser::removeMessageListener(antlr.debug.MessageListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CharScanner::reportError(antlr.RecognitionException)",
"vars": {
"ex": []
}
},
{
"method_signature": "antlr.Parser::setASTNodeType(java.lang.String)",
"vars": {
"nodeType": []
}
},
{
"method_signature": "antlr.debug.ParserReporter::syntacticPredicateSucceeded(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": ["Null", "SyntacticPredicateEvent"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.BlockEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mID(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.TokenManager::clone()",
"vars": {
}
},
{
"method_signature": "antlr.LexerGrammar::setOption(java.lang.String, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"key": ["String", "Null"]
}
},
{
"method_signature": "antlr.SimpleTokenManager::clone()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::subset(antlr.collections.impl.BitSet)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genMatch(antlr.collections.impl.BitSet)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::setupGrammarParameters(antlr.Grammar)",
"vars": {
"g": ["Null"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_14()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::refAction(antlr.Token)",
"vars": {
"action": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.AlternativeElement::<init>(antlr.Grammar, antlr.Token)",
"vars": {
"g": ["LexerGrammar", "TreeWalkerGrammar", "Null", "ParserGrammar"],
"start": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::genMatchUsingAtomTokenType(antlr.GrammarAtom)",
"vars": {
"atom": ["StringLiteralElement", "Null", "TokenRefElement", "CharLiteralElement"]
}
},
{
"method_signature": "antlr.TokenQueue::append(antlr.Token)",
"vars": {
"tok": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.preprocessor.Grammar::getOptions()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Tool::processArguments(java.lang.String[])",
"vars": {
"incomingArgs": ["String[]"]
}
},
{
"method_signature": "antlr.MakeGrammar::endAlt()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mWS_OPT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Option::getEnclosingGrammar()",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::fireSyntacticPredicateStarted()",
"vars": {
}
},
{
"method_signature": "antlr.debug.SemanticPredicateEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::findRoot(antlr.preprocessor.Grammar)",
"vars": {
"g": ["Null", "Grammar"]
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::<init>(antlr.ParserSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.TokenStreamBasicFilter::discard(int)",
"vars": {
}
},
{
"method_signature": "antlr.CppBlockFinishingInfo::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mWS(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mIMPLIES(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.RuleBlock::addExceptionSpec(antlr.ExceptionSpec)",
"vars": {
"ex": ["Null", "ExceptionSpec"]
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::matchRange(char, char)",
"vars": {
}
},
{
"method_signature": "antlr.InputBuffer::getMarkedChars()",
"vars": {
}
},
{
"method_signature": "antlr.CppCharFormatter::escapeChar(int, boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.SemanticPredicateEvent::<init>(java.lang.Object, int)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.SynPredBlock)",
"vars": {
"blk": ["SynPredBlock"]
}
},
{
"method_signature": "antlr.Grammar::<init>(java.lang.String, antlr.Tool, java.lang.String)",
"vars": {
"tool_": ["Tool", "Null"],
"superClass": ["String", "Null"],
"className_": ["String", "Null"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::removeTraceListener(antlr.debug.TraceListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.BaseAST::equalsTree(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_24()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_0()",
"vars": {
}
},
{
"method_signature": "antlr.PreservingFileWriter::<init>(java.lang.String)",
"vars": {
"file": ["String"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mSTUFF(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireReportError(java.lang.Exception)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::getSemPredName(int)",
"vars": {
}
},
{
"method_signature": "antlr.CommonAST::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_12()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genTokenStrings()",
"vars": {
}
},
{
"method_signature": "antlr.BaseAST::toStringList()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::exceptionGroup()",
"vars": {
}
},
{
"method_signature": "antlr.Token::<init>(int)",
"vars": {
}
},
{
"method_signature": "antlr.ASTFactory::setTokenTypeASTNodeType(int, java.lang.String)",
"vars": {
"className": []
}
},
{
"method_signature": "antlr.CommonHiddenStreamToken::setHiddenAfter(antlr.CommonHiddenStreamToken)",
"vars": {
"t": ["Null"]
}
},
{
"method_signature": "antlr.SimpleTokenManager::maxTokenType()",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::setFilename(java.lang.String)",
"vars": {
"f": ["String", "Null"]
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.StringLiteralElement)",
"vars": {
"atom": ["StringLiteralElement"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_20()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::fixNameSpaceOption(java.lang.String)",
"vars": {
"ns": ["String", "Null"]
}
},
{
"method_signature": "antlr.CharScanner::testLiteralsTable(int)",
"vars": {
}
},
{
"method_signature": "antlr.AlternativeElement::getLabel()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refTokensSpecElementOption(antlr.Token, antlr.Token, antlr.Token)",
"vars": {
"tok": ["Null", "Token", "CommonToken"],
"value": ["Null", "Token", "CommonToken"],
"option": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.collections.impl.BitSet::notInPlace(int, int)",
"vars": {
}
},
{
"method_signature": "antlr.Parser::setIgnoreInvalidDebugCalls(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.ParserGrammar)",
"vars": {
"g": ["ParserGrammar"]
}
},
{
"method_signature": "antlr.Token::getColumn()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::abortGrammar()",
"vars": {
}
},
{
"method_signature": "antlr.debug.NewLineEvent::setLine(int)",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.IndexedVector::elementAt(int)",
"vars": {
}
},
{
"method_signature": "antlr.FileLineFormatter::setFormatter(antlr.FileLineFormatter)",
"vars": {
"f": []
}
},
{
"method_signature": "antlr.BaseAST::initialize(int, java.lang.String)",
"vars": {
"txt": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
"vars": {
"str": ["String", "Null"],
"atom": ["Null"]
}
},
{
"method_signature": "antlr.Tool::setNameSpace(java.lang.String)",
"vars": {
"name": ["String", "Null"]
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.CharLiteralElement)",
"vars": {
"atom": ["CharLiteralElement"]
}
},
{
"method_signature": "antlr.ANTLRLexer::mWS_LOOP(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.StringLiteralSymbol::<init>(java.lang.String)",
"vars": {
"r": ["String", "Null"]
}
},
{
"method_signature": "antlr.ASTNULLType::toStringList()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genErrorHandler(antlr.ExceptionSpec)",
"vars": {
"ex": ["Null", "ExceptionSpec"]
}
},
{
"method_signature": "antlr.BaseAST::equals(antlr.collections.AST)",
"vars": {
"t": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.GrammarAtom)",
"vars": {
"atom": ["TokenRefElement"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refTokenRange(antlr.Token, antlr.Token, antlr.Token, int, boolean)",
"vars": {
"label": ["Null", "Token", "CommonToken"],
"t1": ["Null", "Token", "CommonToken"],
"t2": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.TreeParser::traceOut(java.lang.String, antlr.collections.AST)",
"vars": {
"rname": [],
"t": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeParserListener(antlr.debug.ParserListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.ActionElement)",
"vars": {
"action": ["ActionElement"]
}
},
{
"method_signature": "antlr.CharScanner::mark()",
"vars": {
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateAdapter::syntacticPredicateFailed(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": ["Null", "SyntacticPredicateEvent"]
}
},
{
"method_signature": "antlr.ANTLRLexer::mWS(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": ["ZeroOrMoreBlock"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::beginSubRule(antlr.Token, antlr.Token, boolean)",
"vars": {
"start": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::defineToken(antlr.Token, antlr.Token)",
"vars": {
"tokliteral": ["Null", "Token", "CommonToken"],
"tokname": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_14()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpNameSpace::emitDeclarations(java.io.PrintWriter)",
"vars": {
"out": ["Null", "PrintWriter"]
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::printSet(int, int, antlr.Lookahead)",
"vars": {
"lookahead": ["Lookahead", "Null"]
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::addParserMatchListener(antlr.debug.ParserMatchListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CharScanner::consumeUntil(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.InputBufferReporter::inputBufferChanged(antlr.debug.InputBufferEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.ExceptionSpec::<init>(antlr.Token)",
"vars": {
"label_": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.LLkParser::trace(java.lang.String, java.lang.String)",
"vars": {
"ee": ["String"],
"rname": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::HTMLEncode(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::addNewLineListener(antlr.debug.NewLineListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.MakeGrammar::oneOrMoreSubRule()",
"vars": {
}
},
{
"method_signature": "antlr.CommonASTWithHiddenTokens::<init>(antlr.Token)",
"vars": {
"tok": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::addSemanticPredicateListener(antlr.debug.SemanticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.ASTFactory::error(java.lang.String)",
"vars": {
"e": ["String"]
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::<init>(antlr.TokenStream, int)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.RecognitionException::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::defineRuleName(antlr.Token, java.lang.String, boolean, java.lang.String)",
"vars": {
"r": ["Null", "Token", "CommonToken"],
"access": ["String", "Null"],
"docComment": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::mk_tokenSet_1()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::refresh(java.util.Vector)",
"vars": {
"listeners": ["Vector", "Null"]
}
},
{
"method_signature": "antlr.CharScanner::traceIn(java.lang.String)",
"vars": {
"rname": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::lookaheadIsEmpty(antlr.Alternative, int)",
"vars": {
"alt": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mSTRING(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.BlockEndElement::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
"vars": {
"v": ["Vector"]
}
},
{
"method_signature": "antlr.BaseAST::getNumberOfChildren()",
"vars": {
}
},
{
"method_signature": "antlr.ByteBuffer::fill(int)",
"vars": {
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::deterministic(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": ["ZeroOrMoreBlock"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mVAR_ASSIGN(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mTREE_ELEMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genLookaheadSetForBlock(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genNextToken()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::setArgOfRuleRef(antlr.Token)",
"vars": {
"argaction": []
}
},
{
"method_signature": "antlr.ANTLRLexer::mk_tokenSet_4()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Grammar::setPredefined(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.collections.AST::findAll(antlr.collections.AST)",
"vars": {
"tree": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genBitSet(antlr.collections.impl.BitSet, int)",
"vars": {
"p": ["Null"]
}
},
{
"method_signature": "antlr.debug.ParserAdapter::semanticPredicateEvaluated(antlr.debug.SemanticPredicateEvent)",
"vars": {
"e": ["Null", "SemanticPredicateEvent"]
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mSL_COMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ASTFactory::setASTNodeClass(java.lang.String)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.TokenRefElement)",
"vars": {
"atom": ["TokenRefElement"]
}
},
{
"method_signature": "antlr.Parser::addParserListener(antlr.debug.ParserListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::countLines(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_16()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::getTool()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::rootNode()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::endRule(java.lang.String)",
"vars": {
"r": ["String", "Null"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::fireSyntacticPredicateFailed()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRHashString::length()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Rule::sameSignature(antlr.preprocessor.Rule)",
"vars": {
"rule": ["Null", "Rule"]
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::reportError(antlr.RecognitionException)",
"vars": {
"ex": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
"vars": {
"currentRule": [],
"tInfo": [],
"actionStr": []
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::addTreeModelListener(javax.swing.event.TreeModelListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genMatchUsingAtomText(antlr.GrammarAtom)",
"vars": {
"atom": ["StringLiteralElement", "Null", "TokenRefElement", "CharLiteralElement"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mARG(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_6()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::<init>(java.io.InputStream)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.debug.misc.MyTreeSelectionListener::valueChanged(javax.swing.event.TreeSelectionEvent)",
"vars": {
"event": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::addParserTokenListener(antlr.debug.ParserTokenListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.collections.AST::getFirstChild()",
"vars": {
}
},
{
"method_signature": "antlr.ImportVocabTokenManager::define(antlr.TokenSymbol)",
"vars": {
"ts": ["Null", "StringLiteralSymbol", "TokenSymbol"]
}
},
{
"method_signature": "antlr.preprocessor.Grammar::getType()",
"vars": {
}
},
{
"method_signature": "antlr.ActionElement::generate()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mRULE_REF(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::addMessageListener(antlr.debug.MessageListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.DefaultToolErrorHandler::<init>(antlr.Tool)",
"vars": {
"tool": ["Tool"]
}
},
{
"method_signature": "antlr.debug.Event::setType(int)",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::<init>(antlr.InputBuffer)",
"vars": {
"ib": []
}
},
{
"method_signature": "antlr.TreeParser::setASTNodeType(java.lang.String)",
"vars": {
"nodeType": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::defineToken(antlr.Token, antlr.Token)",
"vars": {
"tokliteral": ["Null", "Token", "CommonToken"],
"tokname": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.ANTLRParser::grammar()",
"vars": {
}
},
{
"method_signature": "antlr.ASTNULLType::getFirstChild()",
"vars": {
}
},
{
"method_signature": "antlr.collections.AST::getText()",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::addSyntacticPredicateListener(antlr.debug.SyntacticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.ParserMatchAdapter::parserMatch(antlr.debug.ParserMatchEvent)",
"vars": {
"e": ["Null", "ParserMatchEvent"]
}
},
{
"method_signature": "antlr.ANTLRParser::<init>(antlr.TokenStream, int)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_24()",
"vars": {
}
},
{
"method_signature": "antlr.debug.InputBufferReporter::refresh()",
"vars": {
}
},
{
"method_signature": "antlr.NoViableAltException::<init>(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::grammarFile(antlr.preprocessor.Hierarchy, java.lang.String)",
"vars": {
"file": ["String", "Null"],
"hier": ["Hierarchy"]
}
},
{
"method_signature": "antlr.ASTFactory::create()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::mk_tokenSet_0()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genBody(antlr.LexerGrammar)",
"vars": {
"g": ["LexerGrammar"]
}
},
{
"method_signature": "antlr.ANTLRLexer::escapeCharValue(java.lang.String)",
"vars": {
"cs": ["String", "Null"]
}
},
{
"method_signature": "antlr.CharFormatter::literalString(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::genMatchUsingAtomText(antlr.GrammarAtom)",
"vars": {
"atom": ["StringLiteralElement", "Null", "TokenRefElement", "CharLiteralElement"]
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::consume()",
"vars": {
}
},
{
"method_signature": "antlr.RuleBlock::findExceptionSpec(antlr.Token)",
"vars": {
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
"vars": {
"v": ["Vector"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mAST_CONSTRUCTOR(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::treeParserOptionsSpec()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mCURLY_BLOCK_SCARF(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CommonAST::getText()",
"vars": {
}
},
{
"method_signature": "antlr.StringUtils::stripFront(java.lang.String, java.lang.String)",
"vars": {
"s": ["String", "Null"],
"remove": ["String"]
}
},
{
"method_signature": "antlr.BlockEndElement::toString()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_10()",
"vars": {
}
},
{
"method_signature": "antlr.Parser::matchNot(int)",
"vars": {
}
},
{
"method_signature": "antlr.MismatchedCharException::<init>(char, char, boolean, antlr.CharScanner)",
"vars": {
"scanner_": ["ANTLRLexer", "ANTLRTokdefLexer", "PreprocessorLexer", "ActionLexer"]
}
},
{
"method_signature": "antlr.ParserGrammar::generate()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genHeader()",
"vars": {
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.OneOrMoreBlock)",
"vars": {
"blk": ["OneOrMoreBlock"]
}
},
{
"method_signature": "antlr.ExceptionSpec::addHandler(antlr.ExceptionHandler)",
"vars": {
"handler": ["ExceptionHandler"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_14()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::getLookaheadTestTerm(int, antlr.collections.impl.BitSet)",
"vars": {
"p": ["BitSet", "Null"]
}
},
{
"method_signature": "antlr.TokenStreamBasicFilter::discard(antlr.collections.impl.BitSet)",
"vars": {
"mask": []
}
},
{
"method_signature": "antlr.Parser::traceOut(java.lang.String)",
"vars": {
"rname": []
}
},
{
"method_signature": "antlr.MakeGrammar::setBlock(antlr.AlternativeBlock, antlr.AlternativeBlock)",
"vars": {
"b": ["ZeroOrMoreBlock", "OneOrMoreBlock", "SynPredBlock"],
"src": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::genRuleHeader(antlr.RuleSymbol, boolean)",
"vars": {
"s": ["Null", "RuleSymbol"]
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.CharLiteralElement)",
"vars": {
"atom": ["CharLiteralElement"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::genBlockPreamble(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "Null", "AlternativeBlock", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.WildcardElement::getLabel()",
"vars": {
}
},
{
"method_signature": "antlr.SemanticException::<init>(java.lang.String)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.CppCharFormatter::literalString(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_2()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_12()",
"vars": {
}
},
{
"method_signature": "antlr.LexerSharedInputState::<init>(antlr.InputBuffer)",
"vars": {
"inbuf": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refReturnAction(antlr.Token)",
"vars": {
"returnAction": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::<init>(antlr.InputBuffer)",
"vars": {
"ib": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genGenericBlock(antlr.AlternativeBlock, java.lang.String)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"],
"blkOp": ["String"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genBlockPreamble(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::genTokenTypes(antlr.TokenManager)",
"vars": {
"tm": ["Null"]
}
},
{
"method_signature": "antlr.collections.impl.LList::includes(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mASSIGN_RHS(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.RuleSymbol::setDefined()",
"vars": {
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.GrammarAtom)",
"vars": {
"atom": ["TokenRefElement"]
}
},
{
"method_signature": "antlr.TreeParser::getTokenName(int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::exceptionHandler()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::noASTSubRule()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mXDIGIT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.RecognitionException::getErrorMessage()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireLA(int, int)",
"vars": {
}
},
{
"method_signature": "antlr.GrammarSymbol::getId()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserMatchAdapter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": ["Null", "TraceEvent"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refExceptionHandler(antlr.Token, antlr.Token)",
"vars": {
"action": ["Null", "Token", "CommonToken"],
"exTypeAndName": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::setTool(antlr.Tool)",
"vars": {
"tool": ["Tool", "Null"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mTREE_ELEMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::nil()",
"vars": {
}
},
{
"method_signature": "antlr.JavaBlockFinishingInfo::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.debug.InputBufferReporter::inputBufferConsume(antlr.debug.InputBufferEvent)",
"vars": {
"e": ["Null", "InputBufferEvent"]
}
},
{
"method_signature": "antlr.TokenQueue::reset()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refRule(antlr.Token, antlr.Token, antlr.Token, antlr.Token, int)",
"vars": {
"args": ["Null", "Token", "CommonToken"],
"r": ["Null", "Token", "CommonToken"],
"idAssign": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CharScanner::getInputBuffer()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.RuleRefElement)",
"vars": {
"rr": ["RuleRefElement"]
}
},
{
"method_signature": "antlr.debug.InputBufferAdapter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": ["TraceEvent", "Null"]
}
},
{
"method_signature": "antlr.ASTNULLType::initialize(antlr.collections.AST)",
"vars": {
"t": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.Tool::fileMinusPath(java.lang.String)",
"vars": {
"f": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRError::<init>(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.collections.AST::equalsTree(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.MakeGrammar::refSemPred(antlr.Token)",
"vars": {
"pred": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.collections.impl.LList::pop()",
"vars": {
}
},
{
"method_signature": "antlr.CommonHiddenStreamToken::<init>(int, java.lang.String)",
"vars": {
"txt": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_22()",
"vars": {
}
},
{
"method_signature": "antlr.BaseAST::getType()",
"vars": {
}
},
{
"method_signature": "antlr.build.ANTLR::jar(antlr.build.Tool)",
"vars": {
"tool": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::reportError(java.lang.String)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.debug.InputBufferAdapter::inputBufferMark(antlr.debug.InputBufferEvent)",
"vars": {
"e": ["Null", "InputBufferEvent"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_22()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_5()",
"vars": {
}
},
{
"method_signature": "antlr.ASTFactory::setTokenTypeToASTClassMap(java.util.Hashtable)",
"vars": {
"tokenTypeToClassMap": []
}
},
{
"method_signature": "antlr.CharScanner::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.Parser::getAST()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::setSubruleOption(antlr.Token, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"key": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::setDebugMode(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mCOMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genMatch(antlr.GrammarAtom)",
"vars": {
"atom": ["StringLiteralElement", "Null", "TokenRefElement", "CharLiteralElement"]
}
},
{
"method_signature": "antlr.NoViableAltException::getMessage()",
"vars": {
}
},
{
"method_signature": "antlr.Parser::removeParserMatchListener(antlr.debug.ParserMatchListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.TokenStreamHiddenTokenFilter::getHiddenBefore(antlr.CommonHiddenStreamToken)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.ANTLRStringBuffer::append(char)",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::createNextTokenRule(antlr.Grammar, antlr.collections.impl.Vector, java.lang.String)",
"vars": {
"rname": ["String"],
"g": ["LexerGrammar", "Null", "TreeWalkerGrammar", "ParserGrammar"],
"lexRules": ["Null", "Vector"]
}
},
{
"method_signature": "antlr.ANTLRParser::tree()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refExceptionHandler(antlr.Token, antlr.Token)",
"vars": {
"action": ["Null", "Token", "CommonToken"],
"exTypeAndName": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::addGrammar(antlr.preprocessor.Grammar)",
"vars": {
"gr": ["Null", "Grammar"]
}
},
{
"method_signature": "antlr.Grammar::define(antlr.RuleSymbol)",
"vars": {
"rs": ["Null", "RuleSymbol"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::removeMessageListener(antlr.debug.MessageListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": ["Null", "TraceEvent"]
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::expandGrammarsInFile(java.lang.String)",
"vars": {
"fileName": ["Null"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::lookaheadString(int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mCARET(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserAdapter::parserMatch(antlr.debug.ParserMatchEvent)",
"vars": {
"e": ["Null", "ParserMatchEvent"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMatchNot(int, int, java.lang.String, int)",
"vars": {
"text": ["String", "Null"]
}
},
{
"method_signature": "antlr.preprocessor.Grammar::setTokenSection(java.lang.String)",
"vars": {
"tk": ["String", "Null"]
}
},
{
"method_signature": "antlr.Lookahead::clone()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserTokenEvent::setAmount(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateListener::syntacticPredicateFailed(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": ["Null", "SyntacticPredicateEvent"]
}
},
{
"method_signature": "antlr.BaseAST::xmlSerializeRootOpen(java.io.Writer)",
"vars": {
"out": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::setRuleOption(antlr.Token, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"key": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.LLkParser::traceOut(java.lang.String)",
"vars": {
"rname": []
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::getChildCount(java.lang.Object)",
"vars": {
"parent": []
}
},
{
"method_signature": "antlr.Tool::hasError()",
"vars": {
}
},
{
"method_signature": "antlr.TokenBuffer::rewind(int)",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
"vars": {
"str": ["String", "Null"],
"atom": ["Null"]
}
},
{
"method_signature": "antlr.preprocessor.GrammarFile::addHeaderAction(java.lang.String)",
"vars": {
"a": ["String", "Null"]
}
},
{
"method_signature": "antlr.AlternativeBlock::setAutoGen(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserReporter::syntacticPredicateStarted(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": ["Null", "SyntacticPredicateEvent"]
}
},
{
"method_signature": "antlr.preprocessor.Grammar::expandInPlace()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mTEXT_ARG_ELEMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.CharLiteralElement)",
"vars": {
"atom": ["CharLiteralElement"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::endSubRule()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genErrorCatchForElement(antlr.AlternativeElement)",
"vars": {
"el": ["RuleRefElement", "TokenRangeElement", "TokenRefElement"]
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::setTool(antlr.Tool)",
"vars": {
"tool": ["Tool", "Null"]
}
},
{
"method_signature": "antlr.collections.impl.LLEnumeration::nextElement()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mCOMMA(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::lastInRule()",
"vars": {
}
},
{
"method_signature": "antlr.collections.AST::getType()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genCases(antlr.collections.impl.BitSet)",
"vars": {
"p": ["BitSet", "Null"]
}
},
{
"method_signature": "antlr.Alternative::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.Tool::setArgOK(int)",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
"vars": {
"transInfo": ["Null", "ActionTransInfo"],
"idParam": ["String", "Null"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refArgAction(antlr.Token)",
"vars": {
"action": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.TreeElement)",
"vars": {
"t": ["TreeElement"]
}
},
{
"method_signature": "antlr.debug.SemanticPredicateAdapter::refresh()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::endExceptionSpec()",
"vars": {
}
},
{
"method_signature": "antlr.build.Tool::perform(java.lang.String, java.lang.String)",
"vars": {
"app": ["String"],
"action": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::setupGrammarParameters(antlr.Grammar)",
"vars": {
"g": ["Null"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
"vars": {
"currentRule": ["RuleBlock", "Null"],
"tInfo": ["Null", "ActionTransInfo"],
"actionStr": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRParser::reportError(antlr.RecognitionException, java.lang.String)",
"vars": {
"s": ["String"],
"e": []
}
},
{
"method_signature": "antlr.ANTLRParser::parserOptionsSpec()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mTEXT_ARG_ID_ELEMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::<init>(antlr.InputBuffer)",
"vars": {
"cb": []
}
},
{
"method_signature": "antlr.CharLiteralElement::generate()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_4()",
"vars": {
}
},
{
"method_signature": "antlr.ASTNULLType::toStringTree()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_23()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::getFile(java.lang.String)",
"vars": {
"fileName": ["String", "Null"]
}
},
{
"method_signature": "antlr.CommonHiddenStreamToken::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mCHAR(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.DefaultToolErrorHandler::dumpSets(java.lang.String[], int, antlr.Grammar, boolean, int, antlr.Lookahead[])",
"vars": {
"output": ["String[]"],
"grammar": ["Null"],
"sets": ["Lookahead[]"]
}
},
{
"method_signature": "antlr.debug.TraceListener::exitRule(antlr.debug.TraceEvent)",
"vars": {
"e": ["Null", "TraceEvent"]
}
},
{
"method_signature": "antlr.MakeGrammar::endChildList()",
"vars": {
}
},
{
"method_signature": "antlr.TokenStreamHiddenTokenFilter::consume()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_1()",
"vars": {
}
},
{
"method_signature": "antlr.collections.Enumerator::cursor()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mBANG(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::_refToken(antlr.Token, antlr.Token, antlr.Token, antlr.Token, boolean, int, boolean)",
"vars": {
"args": ["Null", "Token", "CommonToken"],
"t": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"],
"assignId": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.ASTFactory::create(java.lang.String)",
"vars": {
"className": []
}
},
{
"method_signature": "antlr.CharFormatter::escapeString(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.GrammarSymbol::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.AlternativeBlock::setOption(antlr.Token, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"key": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.collections.List::elementAt(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::getRoot()",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::setGrammar(antlr.Grammar)",
"vars": {
"g": ["LexerGrammar", "TreeWalkerGrammar", "ParserGrammar"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mSL_COMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genBody(antlr.ParserGrammar)",
"vars": {
"g": ["ParserGrammar"]
}
},
{
"method_signature": "antlr.debug.InputBufferListener::inputBufferRewind(antlr.debug.InputBufferEvent)",
"vars": {
"e": ["Null", "InputBufferEvent"]
}
},
{
"method_signature": "antlr.debug.TraceEvent::setData(int)",
"vars": {
}
},
{
"method_signature": "antlr.TreeBlockContext::addAlternativeElement(antlr.AlternativeElement)",
"vars": {
"e": ["Null", "ActionElement", "StringLiteralElement", "AlternativeBlock", "ZeroOrMoreBlock", "TokenRefElement", "RuleBlock", "CharLiteralElement", "SynPredBlock", "RuleRefElement", "TokenRangeElement", "CharRangeElement", "BlockEndElement", "WildcardElement", "RuleEndElement", "OneOrMoreBlock", "TreeElement"]
}
},
{
"method_signature": "antlr.preprocessor.Grammar::inherit(antlr.preprocessor.Rule, antlr.preprocessor.Grammar)",
"vars": {
"r": ["Null", "Rule"],
"superG": ["Null", "Grammar"]
}
},
{
"method_signature": "antlr.TokenManager::getTokenSymbolElements()",
"vars": {
}
},
{
"method_signature": "antlr.DumpASTVisitor::visit(antlr.collections.AST)",
"vars": {
"node": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.TreeElement::toString()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Grammar::getFileName()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::hasError()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genTokenDefinitions(antlr.TokenManager)",
"vars": {
"tm": ["Null", "SimpleTokenManager", "ImportVocabTokenManager"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::setArgOfRuleRef(antlr.Token)",
"vars": {
"argaction": []
}
},
{
"method_signature": "antlr.TreeParser::panic()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserMatchAdapter::parserMatchNot(antlr.debug.ParserMatchEvent)",
"vars": {
"e": ["Null", "ParserMatchEvent"]
}
},
{
"method_signature": "antlr.debug.DebuggingParser::getSemPredName(int)",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.OneOrMoreBlock)",
"vars": {
"blk": ["OneOrMoreBlock"]
}
},
{
"method_signature": "antlr.ASTNULLType::toString()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.TokenRangeElement)",
"vars": {
"r": ["TokenRangeElement"]
}
},
{
"method_signature": "antlr.MakeGrammar::beginExceptionGroup()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireConsume(int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRHashString::<init>(java.lang.String, antlr.CharScanner)",
"vars": {
"s": ["String"],
"lexer": ["ANTLRLexer", "ANTLRTokdefLexer", "Null", "PreprocessorLexer", "ActionLexer"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refInitAction(antlr.Token)",
"vars": {
"action": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, java.lang.String)",
"vars": {
"rule": ["String", "Null"]
}
},
{
"method_signature": "antlr.LLkAnalyzer::deterministic(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": ["ZeroOrMoreBlock"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_21()",
"vars": {
}
},
{
"method_signature": "antlr.BaseAST::findAllPartial(antlr.collections.AST)",
"vars": {
"sub": []
}
},
{
"method_signature": "antlr.collections.impl.IntRange::toString()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::readGrammarFile(java.lang.String)",
"vars": {
"file": ["String", "Null"]
}
},
{
"method_signature": "antlr.BaseAST::initialize(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::refresh(java.util.Vector)",
"vars": {
"listeners": ["Null", "Vector"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refElementOption(antlr.Token, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"option": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.collections.impl.Vector::elements()",
"vars": {
}
},
{
"method_signature": "antlr.ASTNULLType::equalsListPartial(antlr.collections.AST)",
"vars": {
"t": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::fireExitRule(int, int)",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::throwsSpec()",
"vars": {
}
},
{
"method_signature": "antlr.RecognitionException::getFilename()",
"vars": {
}
},
{
"method_signature": "antlr.ASTNULLType::addChild(antlr.collections.AST)",
"vars": {
"c": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.OneOrMoreBlock)",
"vars": {
"blk": ["OneOrMoreBlock"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.RuleRefElement)",
"vars": {
"rr": ["RuleRefElement"]
}
},
{
"method_signature": "antlr.Parser::setInputState(antlr.ParserSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.Lookahead::setEpsilon()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_5()",
"vars": {
}
},
{
"method_signature": "antlr.TreeParser::match(antlr.collections.AST, antlr.collections.impl.BitSet)",
"vars": {
"b": [],
"t": []
}
},
{
"method_signature": "antlr.CodeGenerator::decodeLexerRuleName(java.lang.String)",
"vars": {
"id": ["String", "Null"]
}
},
{
"method_signature": "antlr.Lookahead::intersection(antlr.Lookahead)",
"vars": {
"q": ["Lookahead", "Null"]
}
},
{
"method_signature": "antlr.StringUtils::stripBack(java.lang.String, java.lang.String)",
"vars": {
"s": ["String", "Null"],
"remove": ["String"]
}
},
{
"method_signature": "antlr.CharLiteralElement::<init>(antlr.LexerGrammar, antlr.Token, boolean, int)",
"vars": {
"t": ["Null", "Token", "CommonToken"],
"g": ["LexerGrammar", "Null"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
"vars": {
"v": ["Vector"]
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateEvent::<init>(java.lang.Object, int)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.collections.AST::addChild(antlr.collections.AST)",
"vars": {
"c": []
}
},
{
"method_signature": "antlr.TokenManager::nextTokenType()",
"vars": {
}
},
{
"method_signature": "antlr.Parser::LA(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.MessageEvent::getText()",
"vars": {
}
},
{
"method_signature": "antlr.debug.Tracer::dedent()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::startParser(java.lang.String, antlr.Token, java.lang.String, java.lang.String)",
"vars": {
"file": ["String", "Null"],
"superClass": ["String", "Null"],
"name": ["Null", "Token", "CommonToken"],
"doc": ["String", "Null"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::removeParserListener(antlr.debug.ParserListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::mk_tokenSet_1()",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CodeGenerator::setBehavior(antlr.DefineGrammarSymbols)",
"vars": {
"behavior_": ["MakeGrammar"]
}
},
{
"method_signature": "antlr.Tool::pathToFile(java.lang.String)",
"vars": {
"f": ["String", "Null"]
}
},
{
"method_signature": "antlr.StringUtils::stripFrontBack(java.lang.String, java.lang.String, java.lang.String)",
"vars": {
"head": ["String"],
"src": ["String", "Null"],
"tail": ["String"]
}
},
{
"method_signature": "antlr.BaseAST::xmlSerializeNode(java.io.Writer)",
"vars": {
"out": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::endGrammar()",
"vars": {
}
},
{
"method_signature": "antlr.ZeroOrMoreBlock::generate()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.ASTEnumerator::hasMoreNodes()",
"vars": {
}
},
{
"method_signature": "antlr.ParserGrammar::getSuperClass()",
"vars": {
}
},
{
"method_signature": "antlr.SimpleTokenManager::getVocabulary()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.Vector::clone()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::beginExceptionGroup()",
"vars": {
}
},
{
"method_signature": "antlr.GrammarElement::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::isLeaf(java.lang.Object)",
"vars": {
"node": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_5()",
"vars": {
}
},
{
"method_signature": "antlr.CppCharFormatter::escapeString(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::wakeUp()",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genNextToken()",
"vars": {
}
},
{
"method_signature": "antlr.ZeroOrMoreBlock::<init>(antlr.Grammar)",
"vars": {
"g": ["LexerGrammar", "TreeWalkerGrammar", "Null", "ParserGrammar"]
}
},
{
"method_signature": "antlr.ParserSharedInputState::reset()",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.TreeWalkerGrammar)",
"vars": {
"g": ["TreeWalkerGrammar"]
}
},
{
"method_signature": "antlr.CharQueue::removeFirst()",
"vars": {
}
},
{
"method_signature": "antlr.Parser::<init>(antlr.ParserSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.RuleRefElement::getLabel()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCharFormatter::literalString(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_19()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::bitMask(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::isGuessing()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::zeroOrMoreSubRule()",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": ["ZeroOrMoreBlock"]
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.Grammar::getFilename()",
"vars": {
}
},
{
"method_signature": "antlr.debug.TraceListener::enterRule(antlr.debug.TraceEvent)",
"vars": {
"e": ["TraceEvent", "Null"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mID(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.RuleRefElement::setIdAssign(java.lang.String)",
"vars": {
"id": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_5()",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_1()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::<init>(int)",
"vars": {
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.ParserGrammar)",
"vars": {
"g": ["ParserGrammar"]
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mML_COMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.CharRangeElement)",
"vars": {
"r": ["CharRangeElement"]
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::addParserTokenListener(antlr.debug.ParserTokenListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CodeGenerator::getBitsetName(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::getSemPredName(int)",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::refRule(antlr.Token, antlr.Token, antlr.Token, antlr.Token, int)",
"vars": {
"args": ["Null", "Token", "CommonToken"],
"r": ["Null", "Token", "CommonToken"],
"idAssign": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::reportError(antlr.MismatchedCharException)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.CodeGenerator::encodeLexerRuleName(java.lang.String)",
"vars": {
"id": ["String", "Null"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::getLookaheadTestTerm(int, antlr.collections.impl.BitSet)",
"vars": {
"p": ["BitSet", "Null"]
}
},
{
"method_signature": "antlr.InputBuffer::getLAChars()",
"vars": {
}
},
{
"method_signature": "antlr.Parser::addParserTokenListener(antlr.debug.ParserTokenListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.ParserMatchListener::parserMatchNot(antlr.debug.ParserMatchEvent)",
"vars": {
"e": ["Null", "ParserMatchEvent"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::endExceptionGroup()",
"vars": {
}
},
{
"method_signature": "antlr.TreeParser::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::setSubruleOption(antlr.Token, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"key": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.DumpASTVisitor::tabs()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refWildcard(antlr.Token, antlr.Token, int)",
"vars": {
"t": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.Grammar::generate()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::<init>(antlr.TokenBuffer)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.Alternative::atStart()",
"vars": {
}
},
{
"method_signature": "antlr.Token::getFilename()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": ["ZeroOrMoreBlock"]
}
},
{
"method_signature": "antlr.CharScanner::rewind(int)",
"vars": {
}
},
{
"method_signature": "antlr.ASTPair::copy()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRStringBuffer::toString()",
"vars": {
}
},
{
"method_signature": "antlr.Lookahead::toString(java.lang.String, antlr.CharFormatter, antlr.Grammar)",
"vars": {
"formatter": ["JavaCharFormatter"],
"g": ["Null"],
"separator": ["String"]
}
},
{
"method_signature": "antlr.TokenStreamSelector::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::resetText()",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::println(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRHashString::setString(java.lang.String)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.TokenQueue::elementAt(int)",
"vars": {
}
},
{
"method_signature": "antlr.LLkAnalyzer::deterministicImpliedPath(antlr.BlockWithImpliedExitPath)",
"vars": {
"blk": ["ZeroOrMoreBlock", "OneOrMoreBlock"]
}
},
{
"method_signature": "antlr.RuleBlock::<init>(antlr.Grammar, java.lang.String)",
"vars": {
"r": ["String"],
"g": ["LexerGrammar", "Null", "TreeWalkerGrammar", "ParserGrammar"]
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::setTool(antlr.Tool)",
"vars": {
"antlrTool": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mSL_COMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refMemberAction(antlr.Token)",
"vars": {
"act": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.LexerGrammar)",
"vars": {
"g": ["LexerGrammar"]
}
},
{
"method_signature": "antlr.BaseAST::getText()",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::setTool(antlr.Tool)",
"vars": {
"tool": ["Tool"]
}
},
{
"method_signature": "antlr.preprocessor.Grammar::addOption(antlr.preprocessor.Option)",
"vars": {
"o": ["Null", "Option"]
}
},
{
"method_signature": "antlr.preprocessor.Rule::setEnclosingGrammar(antlr.preprocessor.Grammar)",
"vars": {
"g": ["Null", "Grammar"]
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.WildcardElement)",
"vars": {
"wc": ["WildcardElement"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genASTDeclaration(antlr.AlternativeElement)",
"vars": {
"el": ["Null", "AlternativeBlock", "StringLiteralElement", "RuleBlock", "OneOrMoreBlock", "CharLiteralElement", "TokenRangeElement", "TreeElement", "TokenRefElement", "RuleRefElement", "ZeroOrMoreBlock", "SynPredBlock", "CharRangeElement", "WildcardElement"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refToken(antlr.Token, antlr.Token, antlr.Token, antlr.Token, boolean, int, boolean)",
"vars": {
"args": ["Null", "Token", "CommonToken"],
"t": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"],
"assignId": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genLiteralsTestForPartialToken()",
"vars": {
}
},
{
"method_signature": "antlr.debug.TraceAdapter::enterRule(antlr.debug.TraceEvent)",
"vars": {
"e": ["Null", "TraceEvent"]
}
},
{
"method_signature": "antlr.TreeElement::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRStringBuffer::length()",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingInputBuffer::setDebugMode(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.TokenRangeElement::getLabel()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mNESTED_ACTION(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ExceptionHandler::<init>(antlr.Token, antlr.Token)",
"vars": {
"exceptionTypeAndName_": ["Null", "Token", "CommonToken"],
"action_": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refSemPred(antlr.Token)",
"vars": {
"pred": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_11()",
"vars": {
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::fireLA(char, int)",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::getRanges(int[])",
"vars": {
"elems": []
}
},
{
"method_signature": "antlr.debug.InputBufferReporter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": ["Null", "TraceEvent"]
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_8()",
"vars": {
}
},
{
"method_signature": "antlr.TreeSpecifierNode::setFirstChild(antlr.TreeSpecifierNode)",
"vars": {
"child": []
}
},
{
"method_signature": "antlr.CommonHiddenStreamToken::setHiddenBefore(antlr.CommonHiddenStreamToken)",
"vars": {
"t": ["Null"]
}
},
{
"method_signature": "antlr.debug.InputBufferEvent::toString()",
"vars": {
}
},
{
"method_signature": "antlr.TreeWalkerGrammar::processArguments(java.lang.String[])",
"vars": {
"args": ["Null", "String[]"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_11()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.TreeElement)",
"vars": {
"t": ["TreeElement"]
}
},
{
"method_signature": "antlr.Parser::setTokenBuffer(antlr.TokenBuffer)",
"vars": {
"t": ["TokenBuffer"]
}
},
{
"method_signature": "antlr.debug.NewLineEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.CSharpBlockFinishingInfo::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mID_ELEMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.TreeWalkerGrammar)",
"vars": {
"g": ["TreeWalkerGrammar"]
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::exceptionHandler()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::mk_tokenSet_8()",
"vars": {
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.RuleEndElement)",
"vars": {
"end": ["RuleEndElement"]
}
},
{
"method_signature": "antlr.ASTFactory::create(int, java.lang.String)",
"vars": {
"txt": ["String"]
}
},
{
"method_signature": "antlr.SimpleTokenManager::isReadOnly()",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.ParserGrammar)",
"vars": {
"g": ["ParserGrammar"]
}
},
{
"method_signature": "antlr.Tool::doEverythingWrapper(java.lang.String[])",
"vars": {
"args": []
}
},
{
"method_signature": "antlr.ASTIterator::<init>(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.collections.impl.IndexedVector::removeElement(java.lang.Object)",
"vars": {
"key": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::beginTree(antlr.Token)",
"vars": {
"tok": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.Grammar::getSymbol(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::addSemPred(java.lang.String)",
"vars": {
"predicate": ["String"]
}
},
{
"method_signature": "antlr.Tool::parent(java.io.File)",
"vars": {
"f": ["File"]
}
},
{
"method_signature": "antlr.TokenStreamHiddenTokenFilter::getHiddenAfter(antlr.CommonHiddenStreamToken)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.ANTLRLexer::mLPAREN(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genBlockFinish(antlr.JavaBlockFinishingInfo, java.lang.String)",
"vars": {
"noViableAction": ["String", "Null"],
"howToFinish": ["JavaBlockFinishingInfo"]
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genRule(antlr.RuleSymbol)",
"vars": {
"s": ["Null", "RuleSymbol"]
}
},
{
"method_signature": "antlr.debug.Event::getType()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Option::getRHS()",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::<init>(java.lang.String, antlr.RuleBlock, antlr.CodeGenerator, antlr.ActionTransInfo)",
"vars": {
"currentRule": ["RuleBlock", "Null"],
"s": ["String", "Null"],
"transInfo": ["Null", "ActionTransInfo"],
"generator": []
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.CharRangeElement)",
"vars": {
"end": ["CharRangeElement"]
}
},
{
"method_signature": "antlr.ANTLRStringBuffer::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::file(antlr.ImportVocabTokenManager)",
"vars": {
"tm": ["ImportVocabTokenManager"]
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.SynPredBlock)",
"vars": {
"blk": ["SynPredBlock"]
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.ZeroOrMoreBlock)",
"vars": {
"blk": ["ZeroOrMoreBlock"]
}
},
{
"method_signature": "antlr.MismatchedCharException::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.TokenStreamSelector::push(java.lang.String)",
"vars": {
"sname": []
}
},
{
"method_signature": "antlr.CodeGenerator::processStringForASTConstructor(java.lang.String)",
"vars": {
"str": ["String", "Null"]
}
},
{
"method_signature": "antlr.collections.impl.BitSet::size()",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genAlt(antlr.Alternative)",
"vars": {
"alt": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.WildcardElement)",
"vars": {
"wc": ["Null", "WildcardElement"]
}
},
{
"method_signature": "antlr.InputBuffer::mark()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMismatch(java.lang.String, java.lang.String, int)",
"vars": {
"text": ["String"],
"value": []
}
},
{
"method_signature": "antlr.Parser::removeSyntacticPredicateListener(antlr.debug.SyntacticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.TokenRangeElement::generate()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mARG_ACTION(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.Parser::LT(int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refStringLiteral(antlr.Token, antlr.Token, int, boolean)",
"vars": {
"lit": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mBANG(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::mML_COMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.RuleRefElement::generate()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRStringBuffer::setLength(int)",
"vars": {
}
},
{
"method_signature": "antlr.CommonASTWithHiddenTokens::initialize(antlr.Token)",
"vars": {
"tok": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genTokenStrings(java.lang.String)",
"vars": {
"prefix": ["String"]
}
},
{
"method_signature": "antlr.TokenBuffer::LT(int)",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.TokenRefElement)",
"vars": {
"atom": ["TokenRefElement"]
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::setText(java.lang.String)",
"vars": {
"text": ["String", "Null"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genErrorCatchForElement(antlr.AlternativeElement)",
"vars": {
"el": ["RuleRefElement", "TokenRangeElement", "TokenRefElement"]
}
},
{
"method_signature": "antlr.OneOrMoreBlock::<init>(antlr.Grammar, antlr.Token)",
"vars": {
"g": [],
"start": []
}
},
{
"method_signature": "antlr.ANTLRStringBuffer::setCharAt(int, char)",
"vars": {
}
},
{
"method_signature": "antlr.Parser::setDebugMode(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.Token::setColumn(int)",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mTEXT_ARG_ID_ELEMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.StringLiteralElement)",
"vars": {
"atom": ["StringLiteralElement"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::mangleLiteral(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::<init>(antlr.TokenStream)",
"vars": {
"lexer": ["ANTLRTokdefLexer"]
}
},
{
"method_signature": "antlr.debug.TraceAdapter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": ["TraceEvent", "Null"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mCHAR(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ASTNULLType::getNumberOfChildren()",
"vars": {
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.RuleBlock)",
"vars": {
"blk": ["RuleBlock", "Null"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mARG(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.NoViableAltException::<init>(antlr.Token, java.lang.String)",
"vars": {
"t": ["Null", "Token", "CommonToken"],
"fileName_": ["String", "Null"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireSyntacticPredicateFailed(int)",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_19()",
"vars": {
}
},
{
"method_signature": "antlr.collections.AST::setText(java.lang.String)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::<init>(antlr.TokenBuffer, int)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeSyntacticPredicateListener(antlr.debug.SyntacticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.Tool::getLiteralsPrefix()",
"vars": {
}
},
{
"method_signature": "antlr.CharQueue::init(int)",
"vars": {
}
},
{
"method_signature": "antlr.AlternativeBlock::getInitAction()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::endOptions()",
"vars": {
}
},
{
"method_signature": "antlr.TokenStreamSelector::getCurrentStream()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserTokenEvent::toString()",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::addSemanticPredicateListener(antlr.debug.SemanticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.MismatchedTokenException::<init>(java.lang.String[], antlr.Token, int, int, boolean, java.lang.String)",
"vars": {
"token_": [],
"fileName_": [],
"tokenNames_": []
}
},
{
"method_signature": "antlr.CharQueue::expand()",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_9()",
"vars": {
}
},
{
"method_signature": "antlr.BlockEndElement::<init>(antlr.Grammar)",
"vars": {
"g": ["Null", "LexerGrammar", "TreeWalkerGrammar", "ParserGrammar"]
}
},
{
"method_signature": "antlr.RuleEndElement::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
"vars": {
"v": ["Vector"]
}
},
{
"method_signature": "antlr.SimpleTokenManager::getName()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::mASSIGN(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::<init>(antlr.Tool)",
"vars": {
"tool": ["Tool", "Null"]
}
},
{
"method_signature": "antlr.TokenStreamRecognitionException::<init>(antlr.RecognitionException)",
"vars": {
"re": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::println(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.ASTFactory::make(antlr.collections.impl.ASTArray)",
"vars": {
"nodes": []
}
},
{
"method_signature": "antlr.CommonHiddenStreamToken::getHiddenAfter()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.LexerGrammar)",
"vars": {
"g": ["LexerGrammar"]
}
},
{
"method_signature": "antlr.BlockWithImpliedExitPath::<init>(antlr.Grammar)",
"vars": {
"g": ["LexerGrammar", "TreeWalkerGrammar", "Null", "ParserGrammar"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::GenRuleInvocation(antlr.RuleRefElement)",
"vars": {
"rr": ["RuleRefElement"]
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genLookaheadSetForAlt(antlr.Alternative)",
"vars": {
"alt": []
}
},
{
"method_signature": "antlr.debug.NewLineEvent::getLine()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genMatchUsingAtomTokenType(antlr.GrammarAtom)",
"vars": {
"atom": ["StringLiteralElement", "Null", "TokenRefElement", "CharLiteralElement"]
}
},
{
"method_signature": "antlr.collections.Stack::height()",
"vars": {
}
},
{
"method_signature": "antlr.BlockContext::currentAlt()",
"vars": {
}
},
{
"method_signature": "antlr.RecognitionException::<init>(java.lang.String, java.lang.String, int, int)",
"vars": {
"s": ["String"],
"fileName_": ["String", "Null"]
}
},
{
"method_signature": "antlr.CharScanner::setInputState(antlr.LexerSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.CharLiteralElement)",
"vars": {
"atom": ["CharLiteralElement"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refElementOption(antlr.Token, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"option": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.ANTLRLexer::mNOT_OP(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_17()",
"vars": {
}
},
{
"method_signature": "antlr.debug.InputBufferReporter::inputBufferLA(antlr.debug.InputBufferEvent)",
"vars": {
"e": ["Null", "InputBufferEvent"]
}
},
{
"method_signature": "antlr.TokenStreamHiddenTokenFilter::consumeFirst()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::<init>(java.io.Reader)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.collections.Enumerator::next()",
"vars": {
}
},
{
"method_signature": "antlr.ByteBuffer::<init>(java.io.InputStream)",
"vars": {
"input_": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genAlt(antlr.Alternative)",
"vars": {
"alt": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::optionsToString(antlr.collections.impl.IndexedVector)",
"vars": {
"options": ["IndexedVector", "Null"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refInitAction(antlr.Token)",
"vars": {
"action": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.debug.ParserTokenEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.build.Tool::stdout(java.lang.String)",
"vars": {
"s": ["Null"]
}
},
{
"method_signature": "antlr.ASTFactory::create(antlr.Token)",
"vars": {
"tok": []
}
},
{
"method_signature": "antlr.CommonAST::setType(int)",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mAST_ITEM(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::fireSyntacticPredicateStarted()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.ActionElement)",
"vars": {
"action": ["ActionElement"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genBlockPreamble(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::fireSemanticPredicateEvaluated(int, int, boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.MessageAdapter::reportWarning(antlr.debug.MessageEvent)",
"vars": {
"e": ["Null", "MessageEvent"]
}
},
{
"method_signature": "antlr.CSharpCharFormatter::escapeChar(int, boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::terminal(antlr.Token)",
"vars": {
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.Lookahead::toString(java.lang.String, antlr.collections.impl.Vector)",
"vars": {
"vocab": ["Vector", "Null"],
"separator": ["String"]
}
},
{
"method_signature": "antlr.debug.ParserReporter::parserMatch(antlr.debug.ParserMatchEvent)",
"vars": {
"e": ["Null", "ParserMatchEvent"]
}
},
{
"method_signature": "antlr.collections.impl.BitSet::clear()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mCOMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mOPEN_ELEMENT_OPTION(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.TreeParser::getASTFactory()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::hasError()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mESC(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::removeMessageListener(antlr.debug.MessageListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CharBuffer::fill(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::removeSemanticPredicateListener(antlr.debug.SemanticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CppBlockFinishingInfo::<init>(java.lang.String, boolean, boolean, boolean)",
"vars": {
"ps": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addParserTokenListener(antlr.debug.ParserTokenListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.debug.ParserAdapter::parserConsume(antlr.debug.ParserTokenEvent)",
"vars": {
"e": ["ParserTokenEvent", "Null"]
}
},
{
"method_signature": "antlr.ANTLRParser::superClass()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::clone()",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::matchRange(char, char)",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::_printAction(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.TokenRangeElement)",
"vars": {
"r": ["TokenRangeElement"]
}
},
{
"method_signature": "antlr.Token::getType()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genLineNo(antlr.Token)",
"vars": {
"t": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::lookaheadString(int)",
"vars": {
}
},
{
"method_signature": "antlr.ASTNULLType::getType()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserTokenListener::parserLA(antlr.debug.ParserTokenEvent)",
"vars": {
"e": ["ParserTokenEvent", "Null"]
}
},
{
"method_signature": "antlr.collections.AST::setType(int)",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.CharRangeElement)",
"vars": {
"r": ["CharRangeElement"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::reportWarning(java.lang.String)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::reportError(antlr.RecognitionException)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.GrammarElement::getLine()",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::extractTypeOfAction(java.lang.String, int, int)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.TreeSpecifierNode::setNextSibling(antlr.TreeSpecifierNode)",
"vars": {
"sibling": []
}
},
{
"method_signature": "antlr.DefaultFileLineFormatter::getFormatString(java.lang.String, int, int)",
"vars": {
"fileName": ["String", "Null"]
}
},
{
"method_signature": "antlr.preprocessor.GrammarFile::getName()",
"vars": {
}
},
{
"method_signature": "antlr.debug.TraceEvent::setValues(int, int, int, int)",
"vars": {
}
},
{
"method_signature": "antlr.BaseAST::doWorkForFindAll(antlr.collections.impl.Vector, antlr.collections.AST, boolean)",
"vars": {
"v": ["Vector"],
"target": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::startParser(java.lang.String, antlr.Token, java.lang.String, java.lang.String)",
"vars": {
"file": ["String", "Null"],
"superClass": ["String", "Null"],
"name": ["Null", "Token", "CommonToken"],
"doc": ["String", "Null"]
}
},
{
"method_signature": "antlr.Grammar::getOption(java.lang.String)",
"vars": {
"key": ["String"]
}
},
{
"method_signature": "antlr.preprocessor.Grammar::inherit(antlr.preprocessor.Option, antlr.preprocessor.Grammar)",
"vars": {
"superG": ["Null", "Grammar"],
"o": ["Null", "Option"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::textOrChar(java.lang.String)",
"vars": {
"text": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mINT_OR_FLOAT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mESC(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addMessageListener(antlr.debug.MessageListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.ANTLRLexer::mINT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::refToken(antlr.Token, antlr.Token, antlr.Token, antlr.Token, boolean, int, boolean)",
"vars": {
"args": ["Null", "Token", "CommonToken"],
"t": ["Null", "Token", "CommonToken"],
"idAssign": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.InputBuffer::isMarked()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::classDef()",
"vars": {
}
},
{
"method_signature": "antlr.GrammarElement::getColumn()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::suitableForCaseExpression(antlr.Alternative)",
"vars": {
"a": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireNewLine(int)",
"vars": {
}
},
{
"method_signature": "antlr.ASTFactory::dupTree(antlr.collections.AST)",
"vars": {
"t": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.preprocessor.Rule::setThrowsSpec(java.lang.String)",
"vars": {
"t": ["Null", "String"]
}
},
{
"method_signature": "antlr.Tool::getGrammarFile()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::mk_tokenSet_0()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_23()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::defineRuleName(antlr.Token, java.lang.String, boolean, java.lang.String)",
"vars": {
"r": ["Null", "Token", "CommonToken"],
"access": ["String", "Null"],
"docComment": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRLexer::mSL_COMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.OneOrMoreBlock::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.Lookahead::toString(java.lang.String, antlr.CharFormatter)",
"vars": {
"formatter": ["JavaCharFormatter"],
"separator": ["String"]
}
},
{
"method_signature": "antlr.WildcardElement::generate()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::nextToken()",
"vars": {
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.debug.ParserMatchAdapter::parserMismatchNot(antlr.debug.ParserMatchEvent)",
"vars": {
"e": ["Null", "ParserMatchEvent"]
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::reportError(antlr.RecognitionException)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genTail()",
"vars": {
}
},
{
"method_signature": "antlr.CommonToken::getLine()",
"vars": {
}
},
{
"method_signature": "antlr.ASTNULLType::getNextSibling()",
"vars": {
}
},
{
"method_signature": "antlr.InputBuffer::consume()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::getTarget()",
"vars": {
}
},
{
"method_signature": "antlr.RecognitionException::<init>(java.lang.String)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateEvent::toString()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::<init>(java.io.InputStream)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.Grammar::getSymbols()",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingInputBuffer::fill(int)",
"vars": {
}
},
{
"method_signature": "antlr.RuleBlock::setEndElement(antlr.RuleEndElement)",
"vars": {
"re": ["Null", "RuleEndElement"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_26()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMatch(int, java.lang.String, int)",
"vars": {
"text": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_15()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::orInPlace(antlr.collections.impl.BitSet)",
"vars": {
"a": ["BitSet", "Null"]
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mELEMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::setGrammarOption(antlr.Token, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"key": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.TokenRangeElement)",
"vars": {
"end": ["TokenRangeElement"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mINT_OR_FLOAT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.InputBufferEvent::getLookaheadAmount()",
"vars": {
}
},
{
"method_signature": "antlr.Grammar::setCodeGenerator(antlr.CodeGenerator)",
"vars": {
"gen": []
}
},
{
"method_signature": "antlr.OneOrMoreBlock::toString()",
"vars": {
}
},
{
"method_signature": "antlr.WildcardElement::setLabel(java.lang.String)",
"vars": {
"label_": ["String", "Null"]
}
},
{
"method_signature": "antlr.CharScanner::match(java.lang.String)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addTraceListener(antlr.debug.TraceListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.GrammarElement::generate()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": ["ZeroOrMoreBlock"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::setUserExceptions(java.lang.String)",
"vars": {
"thr": ["String", "Null"]
}
},
{
"method_signature": "antlr.preprocessor.Grammar::isPredefined()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::setInverse(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::lengthInLongWords()",
"vars": {
}
},
{
"method_signature": "antlr.Tool::error(java.lang.String)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::mapTreeVariable(antlr.AlternativeElement, java.lang.String)",
"vars": {
"e": ["StringLiteralElement", "AlternativeBlock", "ZeroOrMoreBlock", "TokenRefElement", "RuleBlock", "CharLiteralElement", "SynPredBlock", "TokenRangeElement", "Null", "WildcardElement", "OneOrMoreBlock", "TreeElement"],
"name": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRStringBuffer::<init>(int)",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.LLEnumeration::hasMoreElements()",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genRule(antlr.RuleSymbol)",
"vars": {
"s": ["Null", "RuleSymbol"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_10()",
"vars": {
}
},
{
"method_signature": "antlr.CharFormatter::escapeChar(int, boolean)",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::setLineOffset(int)",
"vars": {
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::deterministic(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::removeParserTokenListener(antlr.debug.ParserTokenListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::reportWarning(antlr.debug.MessageEvent)",
"vars": {
"e": ["Null", "MessageEvent"]
}
},
{
"method_signature": "antlr.collections.AST::equals(antlr.collections.AST)",
"vars": {
"t": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.collections.AST::initialize(int, java.lang.String)",
"vars": {
"txt": ["String"]
}
},
{
"method_signature": "antlr.CommonHiddenStreamToken::<init>(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.debug.MessageEvent::setText(java.lang.String)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genSynPred(antlr.SynPredBlock, java.lang.String)",
"vars": {
"blk": ["Null", "SynPredBlock"],
"lookaheadExpr": ["String", "Null"]
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.WildcardElement)",
"vars": {
"wc": ["WildcardElement"]
}
},
{
"method_signature": "antlr.CodeGenerator::printAction(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.TokenRangeElement::toString()",
"vars": {
}
},
{
"method_signature": "antlr.ActionElement::<init>(antlr.Grammar, antlr.Token)",
"vars": {
"t": ["Null", "Token", "CommonToken"],
"g": ["LexerGrammar", "TreeWalkerGrammar", "Null", "ParserGrammar"]
}
},
{
"method_signature": "antlr.TreeParser::match(antlr.collections.AST, int)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.LexerGrammar)",
"vars": {
"g": ["LexerGrammar"]
}
},
{
"method_signature": "antlr.CharScanner::testLiteralsTable(java.lang.String, int)",
"vars": {
"text": ["String"]
}
},
{
"method_signature": "antlr.ASTNULLType::setText(java.lang.String)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.Parser::getASTFactory()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeTraceListener(antlr.debug.TraceListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.InputBuffer::reset()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::isMatched()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::<init>(java.lang.Object, int, int, java.lang.Object, java.lang.String, int, boolean, boolean)",
"vars": {
"source": [],
"text": [],
"target": []
}
},
{
"method_signature": "antlr.debug.Event::<init>(java.lang.Object, int)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.debug.NewLineEvent::<init>(java.lang.Object, int)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.preprocessor.Rule::getArgs()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Grammar::toString()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::<init>(antlr.LexerSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.TokenRangeElement)",
"vars": {
"r": ["TokenRangeElement"]
}
},
{
"method_signature": "antlr.RuleSymbol::<init>(java.lang.String)",
"vars": {
"r": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mWS(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::getInputState()",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingInputBuffer::LA(int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::<init>(java.io.Reader)",
"vars": {
"in": ["BufferedReader"]
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::nextToken()",
"vars": {
}
},
{
"method_signature": "antlr.AlternativeBlock::getLabel()",
"vars": {
}
},
{
"method_signature": "antlr.InputBuffer::LA(int)",
"vars": {
}
},
{
"method_signature": "antlr.CommonASTWithHiddenTokens::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.debug.misc.ASTFrame::<init>(java.lang.String, antlr.collections.AST)",
"vars": {
"r": ["Null"],
"lab": ["String"]
}
},
{
"method_signature": "antlr.Tool::getNamespaceStd()",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.TreeElement)",
"vars": {
"t": ["TreeElement"]
}
},
{
"method_signature": "antlr.ANTLRParser::<init>(antlr.TokenBuffer, int)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.ActionElement)",
"vars": {
"action": ["ActionElement"]
}
},
{
"method_signature": "antlr.CodeGenerator::_println(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.collections.impl.BitSet::toString()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::mLPAREN(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMismatchNot(char, char, int)",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genHeader()",
"vars": {
}
},
{
"method_signature": "antlr.LLkAnalyzer::<init>(antlr.Tool)",
"vars": {
"tool_": ["Tool"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMatch(char, java.lang.String, int)",
"vars": {
"target": ["String"]
}
},
{
"method_signature": "antlr.MakeGrammar::refTokenRange(antlr.Token, antlr.Token, antlr.Token, int, boolean)",
"vars": {
"label": ["Null", "Token", "CommonToken"],
"t1": ["Null", "Token", "CommonToken"],
"t2": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.ANTLRLexer::nextToken()",
"vars": {
}
},
{
"method_signature": "antlr.LLkAnalyzer::altUsesWildcardDefault(antlr.Alternative)",
"vars": {
"alt": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.RuleBlock::findExceptionSpec(java.lang.String)",
"vars": {
"label": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRParser::block()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::<init>(antlr.TokenBuffer, int)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::addParserListener(antlr.debug.ParserListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getASTCreateString(java.lang.String)",
"vars": {
"astCtorArgs": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_7()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genInitFactory(antlr.Grammar)",
"vars": {
"g": ["LexerGrammar", "Null", "TreeWalkerGrammar", "ParserGrammar"]
}
},
{
"method_signature": "antlr.ANTLRParser::element()",
"vars": {
}
},
{
"method_signature": "antlr.ASTFactory::create(java.lang.Class)",
"vars": {
"c": ["Null"]
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::subruleCanBeInverted(antlr.AlternativeBlock, boolean)",
"vars": {
"blk": ["Null", "AlternativeBlock", "RuleBlock", "OneOrMoreBlock", "TreeElement", "ZeroOrMoreBlock", "SynPredBlock"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getValueString(int)",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genTail()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::growToInclude(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CommonAST::initialize(antlr.collections.AST)",
"vars": {
"t": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.LLkParser::<init>(int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::beginChildList()",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingInputBuffer::isMarked()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::setValues(int, int, java.lang.Object, java.lang.String, int, boolean, boolean)",
"vars": {
"text": ["String", "Null"],
"target": ["String", "BitSet", "Integer", "Character"]
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::<init>(antlr.TokenStream, int)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::endTree()",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::toLower(char)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMismatch(int, antlr.collections.impl.BitSet, java.lang.String, int)",
"vars": {
"b": ["BitSet"],
"text": ["String", "Null"]
}
},
{
"method_signature": "antlr.Token::toString()",
"vars": {
}
},
{
"method_signature": "antlr.NameSpace::<init>(java.lang.String)",
"vars": {
"name": ["String", "Null"]
}
},
{
"method_signature": "antlr.ASTFactory::create(int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::<init>(antlr.TokenBuffer)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.ANTLRException::<init>(java.lang.String)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.debug.ParserAdapter::syntacticPredicateFailed(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": ["Null", "SyntacticPredicateEvent"]
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::<init>(antlr.TokenBuffer, int)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::fireMark(int)",
"vars": {
}
},
{
"method_signature": "antlr.ASTIterator::isSubtree(antlr.collections.AST, antlr.collections.AST)",
"vars": {
"sub": ["Null", "ASTNULLType"],
"t": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_21()",
"vars": {
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.TreeElement)",
"vars": {
"t": ["TreeElement"]
}
},
{
"method_signature": "antlr.debug.TraceAdapter::refresh()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::reportError(antlr.RecognitionException)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::getChild(java.lang.Object, int)",
"vars": {
"parent": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mCHAR(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.TokenRefElement::generate()",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.LexerGrammar)",
"vars": {
"g": ["LexerGrammar"]
}
},
{
"method_signature": "antlr.Grammar::getSuperClass()",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.OneOrMoreBlock)",
"vars": {
"blk": ["OneOrMoreBlock"]
}
},
{
"method_signature": "antlr.CodeGenerator::extractIdOfAction(antlr.Token)",
"vars": {
"t": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.TokenManager::getTokenStringAt(int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::zeroOrMoreSubRule()",
"vars": {
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::refreshListeners()",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen()",
"vars": {
}
},
{
"method_signature": "antlr.Lookahead::containsEpsilon()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.LList::append(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::exceptionSpec()",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_18()",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::removeSemanticPredicateListener(antlr.debug.SemanticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.FileLineFormatter::getFormatString(java.lang.String, int, int)",
"vars": {
"fileName": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::mk_tokenSet_0()",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.RuleRefElement)",
"vars": {
"rr": ["RuleRefElement"]
}
},
{
"method_signature": "antlr.AlternativeBlock::generate()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::GenRuleInvocation(antlr.RuleRefElement)",
"vars": {
"rr": ["RuleRefElement"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mAST_CTOR_ELEMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
"vars": {
"tInfo": ["Null", "ActionTransInfo"],
"id": ["String", "Null"]
}
},
{
"method_signature": "antlr.JavaBlockFinishingInfo::<init>(java.lang.String, boolean, boolean, boolean)",
"vars": {
"ps": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mSTRING(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
"vars": {
"tInfo": ["Null", "ActionTransInfo"],
"id": ["String", "Null"]
}
},
{
"method_signature": "antlr.GrammarAtom::setASTNodeType(java.lang.String)",
"vars": {
"type": ["String", "Null"]
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mESC(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mRANGE(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.CharRangeElement)",
"vars": {
"r": ["CharRangeElement"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::addTraceListener(antlr.debug.TraceListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::match(java.lang.String)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.CharScanner::panic(java.lang.String)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.Parser::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.RuleRefElement::getArgs()",
"vars": {
}
},
{
"method_signature": "antlr.BaseAST::equalsTreePartial(antlr.collections.AST)",
"vars": {
"sub": []
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.RuleRefElement)",
"vars": {
"rr": ["RuleRefElement"]
}
},
{
"method_signature": "antlr.ANTLRStringBuffer::append(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::reportError(antlr.RecognitionException)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.Token::getText()",
"vars": {
}
},
{
"method_signature": "antlr.Tool::copyFile(java.lang.String, java.lang.String)",
"vars": {
"dest_name": ["String", "Null"],
"source_name": ["String"]
}
},
{
"method_signature": "antlr.StringUtils::stripBack(java.lang.String, char)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_3()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mTEXT_ARG(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingInputBuffer::<init>(antlr.InputBuffer)",
"vars": {
"buffer": []
}
},
{
"method_signature": "antlr.preprocessor.Grammar::getSuperGrammar()",
"vars": {
}
},
{
"method_signature": "antlr.ImportVocabTokenManager::define(java.lang.String, int)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genElementAST(antlr.AlternativeElement)",
"vars": {
"el": ["StringLiteralElement", "AlternativeBlock", "ZeroOrMoreBlock", "TokenRefElement", "RuleBlock", "SynPredBlock", "CharLiteralElement", "TokenRangeElement", "Null", "WildcardElement", "OneOrMoreBlock", "TreeElement"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genMatchUsingAtomText(antlr.GrammarAtom)",
"vars": {
"atom": ["StringLiteralElement", "Null", "TokenRefElement", "CharLiteralElement"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::addSemPred(java.lang.String)",
"vars": {
"predicate": ["String"]
}
},
{
"method_signature": "antlr.collections.impl.IndexedVector::<init>(int)",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::getASTCreateString(antlr.collections.impl.Vector)",
"vars": {
"v": ["Vector"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::OctalToUnicode(java.lang.String)",
"vars": {
"str": ["String", "Null"]
}
},
{
"method_signature": "antlr.BlockContext::currentElement()",
"vars": {
}
},
{
"method_signature": "antlr.Tool::toolError(java.lang.String)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.CharScanner::getColumn()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::toString(java.lang.String)",
"vars": {
"separator": ["String"]
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::<init>(antlr.InputBuffer)",
"vars": {
"ib": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.TreeElement)",
"vars": {
"t": ["TreeElement"]
}
},
{
"method_signature": "antlr.SemanticException::<init>(java.lang.String, java.lang.String, int, int)",
"vars": {
"fileName": ["String", "Null"],
"s": ["String"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genMatchUsingAtomTokenType(antlr.GrammarAtom)",
"vars": {
"atom": ["StringLiteralElement", "Null", "TokenRefElement", "CharLiteralElement"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_3()",
"vars": {
}
},
{
"method_signature": "antlr.SimpleTokenManager::mapToTokenSymbol(java.lang.String, antlr.TokenSymbol)",
"vars": {
"sym": ["Null", "StringLiteralSymbol", "TokenSymbol"],
"name": ["String", "Null"]
}
},
{
"method_signature": "antlr.FileCopyException::<init>(java.lang.String)",
"vars": {
"msg": ["String"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::fireEnterRule(int, int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserAdapter::enterRule(antlr.debug.TraceEvent)",
"vars": {
"e": ["Null", "TraceEvent"]
}
},
{
"method_signature": "antlr.MakeGrammar::endRule(java.lang.String)",
"vars": {
"rule": ["String", "Null"]
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": ["ZeroOrMoreBlock"]
}
},
{
"method_signature": "antlr.collections.impl.LList::elements()",
"vars": {
}
},
{
"method_signature": "antlr.CharStreamIOException::<init>(java.io.IOException)",
"vars": {
"io": []
}
},
{
"method_signature": "antlr.CodeGenerator::getFIRSTBitSet(java.lang.String, int)",
"vars": {
"ruleName": ["String", "Null"]
}
},
{
"method_signature": "antlr.ASTFactory::getASTNodeType(int)",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Grammar::setMemberAction(java.lang.String)",
"vars": {
"a": ["String", "Null"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getRangeExpression(int, int[])",
"vars": {
"elems": ["int[]"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genBody(antlr.ParserGrammar)",
"vars": {
"g": ["ParserGrammar"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_15()",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.StringLiteralElement)",
"vars": {
"atom": ["StringLiteralElement"]
}
},
{
"method_signature": "antlr.BaseAST::setVerboseStringConversion(boolean, java.lang.String[])",
"vars": {
"names": []
}
},
{
"method_signature": "antlr.build.StreamScarfer::run()",
"vars": {
}
},
{
"method_signature": "antlr.debug.TraceEvent::getRuleNum()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.VectorEnumerator::nextElement()",
"vars": {
}
},
{
"method_signature": "antlr.TokenSymbol::getTokenType()",
"vars": {
}
},
{
"method_signature": "antlr.Tool::reportProgress(java.lang.String)",
"vars": {
"message": ["String"]
}
},
{
"method_signature": "antlr.CharQueue::reset()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserReporter::parserMismatch(antlr.debug.ParserMatchEvent)",
"vars": {
"e": ["Null", "ParserMatchEvent"]
}
},
{
"method_signature": "antlr.preprocessor.Grammar::inherit(java.lang.String, antlr.preprocessor.Grammar)",
"vars": {
"memberAction": ["String", "Null"],
"superG": ["Null", "Grammar"]
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::goToSleep()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_17()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::reportError(java.lang.String)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.MakeGrammar::beginChildList()",
"vars": {
}
},
{
"method_signature": "antlr.NoViableAltForCharException::<init>(char, java.lang.String, int, int)",
"vars": {
"fileName": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_1()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::mk_tokenSet_5()",
"vars": {
}
},
{
"method_signature": "antlr.collections.ASTEnumeration::nextNode()",
"vars": {
}
},
{
"method_signature": "antlr.Parser::setASTNodeClass(java.lang.String)",
"vars": {
"cl": []
}
},
{
"method_signature": "antlr.ANTLRLexer::mARG_ACTION(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.RuleRefElement::<init>(antlr.Grammar, antlr.Token, int)",
"vars": {
"t": ["Null", "Token", "CommonToken"],
"g": ["LexerGrammar", "Null", "TreeWalkerGrammar", "ParserGrammar"]
}
},
{
"method_signature": "antlr.preprocessor.GrammarFile::setOptions(antlr.collections.impl.IndexedVector)",
"vars": {
"o": ["IndexedVector", "Null"]
}
},
{
"method_signature": "antlr.RuleEndElement::<init>(antlr.Grammar)",
"vars": {
"g": ["LexerGrammar", "Null", "TreeWalkerGrammar", "ParserGrammar"]
}
},
{
"method_signature": "antlr.Parser::addSyntacticPredicateListener(antlr.debug.SyntacticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.ActionElement)",
"vars": {
"action": ["ActionElement"]
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::matchNot(int)",
"vars": {
}
},
{
"method_signature": "antlr.TreeParser::getAST()",
"vars": {
}
},
{
"method_signature": "antlr.TreeParser::setASTFactory(antlr.ASTFactory)",
"vars": {
"f": []
}
},
{
"method_signature": "antlr.Parser::addSemanticPredicateListener(antlr.debug.SemanticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.Parser::traceIndent()",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mWS(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Option::setEnclosingGrammar(antlr.preprocessor.Grammar)",
"vars": {
"g": ["Null", "Grammar"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mINT_OR_FLOAT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::labelElement(antlr.AlternativeElement, antlr.Token)",
"vars": {
"el": ["StringLiteralElement", "Null", "AlternativeBlock", "ZeroOrMoreBlock", "TokenRefElement", "RuleBlock", "SynPredBlock", "CharLiteralElement", "RuleRefElement", "TokenRangeElement", "CharRangeElement", "WildcardElement", "OneOrMoreBlock", "TreeElement"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.TokenBuffer::syncConsume()",
"vars": {
}
},
{
"method_signature": "antlr.StringLiteralSymbol::setLabel(java.lang.String)",
"vars": {
"label": ["String", "Null"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::endOptions()",
"vars": {
}
},
{
"method_signature": "antlr.BaseAST::setNextSibling(antlr.collections.AST)",
"vars": {
"n": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.BaseAST::toString()",
"vars": {
}
},
{
"method_signature": "antlr.debug.InputBufferListener::inputBufferLA(antlr.debug.InputBufferEvent)",
"vars": {
"e": ["Null", "InputBufferEvent"]
}
},
{
"method_signature": "antlr.debug.ParserAdapter::syntacticPredicateSucceeded(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": ["Null", "SyntacticPredicateEvent"]
}
},
{
"method_signature": "antlr.collections.impl.IndexedVector::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_8()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refMemberAction(antlr.Token)",
"vars": {
"act": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.collections.AST::equalsListPartial(antlr.collections.AST)",
"vars": {
"t": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.Tool::panic()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::ruleOptionsSpec()",
"vars": {
}
},
{
"method_signature": "antlr.MismatchedCharException::getMessage()",
"vars": {
}
},
{
"method_signature": "antlr.OneOrMoreBlock::generate()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMatchNot(char, char, int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRStringBuffer::charAt(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::addParserMatchListener(antlr.debug.ParserMatchListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mSUBRULE_BLOCK(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::mWS(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.collections.List::includes(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.TokenRangeElement)",
"vars": {
"r": ["TokenRangeElement"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::match(antlr.collections.impl.BitSet)",
"vars": {
"b": ["BitSet"]
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::printSet(int, int, antlr.Lookahead)",
"vars": {
"lookahead": ["Lookahead", "Null"]
}
},
{
"method_signature": "antlr.CharScanner::panic()",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireDoneParsing()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refToken(antlr.Token, antlr.Token, antlr.Token, antlr.Token, boolean, int, boolean)",
"vars": {
"args": ["Null", "Token", "CommonToken"],
"t": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"],
"assignId": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.ActionElement)",
"vars": {
"action": ["ActionElement"]
}
},
{
"method_signature": "antlr.TokenQueue::<init>(int)",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Rule::toString()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_9()",
"vars": {
}
},
{
"method_signature": "antlr.ASTNULLType::equalsList(antlr.collections.AST)",
"vars": {
"t": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.CharRangeElement)",
"vars": {
"r": ["CharRangeElement"]
}
},
{
"method_signature": "antlr.Tool::setOutputDirectory(java.lang.String)",
"vars": {
"o": ["String", "Null"]
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.WildcardElement)",
"vars": {
"wc": ["WildcardElement"]
}
},
{
"method_signature": "antlr.Parser::getTokenNames()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::mk_tokenSet_2()",
"vars": {
}
},
{
"method_signature": "antlr.collections.AST::setFirstChild(antlr.collections.AST)",
"vars": {
"c": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.TokenManager::maxTokenType()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::setBlockElement()",
"vars": {
}
},
{
"method_signature": "antlr.debug.MessageListener::reportError(antlr.debug.MessageEvent)",
"vars": {
"e": ["Null", "MessageEvent"]
}
},
{
"method_signature": "antlr.build.ANTLR::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::LA(int)",
"vars": {
}
},
{
"method_signature": "antlr.RuleBlock::setOption(antlr.Token, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"key": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.Parser::mark()",
"vars": {
}
},
{
"method_signature": "antlr.GrammarElement::<init>(antlr.Grammar)",
"vars": {
"g": ["LexerGrammar", "Null", "TreeWalkerGrammar", "ParserGrammar"]
}
},
{
"method_signature": "antlr.Token::getLine()",
"vars": {
}
},
{
"method_signature": "antlr.TokenManager::setReadOnly(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserTokenEvent::setValues(int, int, int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserAdapter::refresh()",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingInputBuffer::getInputBufferListeners()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::_printAction(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.TokenManager::getTokenSymbolKeys()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::isInverse()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refTreeSpecifier(antlr.Token)",
"vars": {
"treeSpec": []
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_0()",
"vars": {
}
},
{
"method_signature": "antlr.Tool::reportException(java.lang.Exception, java.lang.String)",
"vars": {
"e": [],
"message": ["Null"]
}
},
{
"method_signature": "antlr.AlternativeBlock::removeTrackingOfRuleRefs(antlr.Grammar)",
"vars": {
"g": ["LexerGrammar", "TreeWalkerGrammar", "Null", "ParserGrammar"]
}
},
{
"method_signature": "antlr.debug.MessageEvent::toString()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mAST_CONSTRUCTOR(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mSTAR(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mML_COMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CommonToken::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::subruleOptionsSpec()",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::fireEnterRule(int, int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::optionValue()",
"vars": {
}
},
{
"method_signature": "antlr.collections.AST::getNumberOfChildren()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::clear(int)",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::reset()",
"vars": {
}
},
{
"method_signature": "antlr.SimpleTokenManager::tokenDefined(java.lang.String)",
"vars": {
"symbol": ["String", "Null"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::genCases(antlr.collections.impl.BitSet)",
"vars": {
"p": ["BitSet", "Null"]
}
},
{
"method_signature": "antlr.debug.InputBufferReporter::inputBufferMark(antlr.debug.InputBufferEvent)",
"vars": {
"e": ["Null", "InputBufferEvent"]
}
},
{
"method_signature": "antlr.debug.SemanticPredicateAdapter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": ["TraceEvent", "Null"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mID(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.OneOrMoreBlock)",
"vars": {
"blk": ["OneOrMoreBlock"]
}
},
{
"method_signature": "antlr.collections.impl.BitSet::setSize(int)",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genGenericBlock(antlr.AlternativeBlock, java.lang.String)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"],
"blkOp": ["String"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::removeSyntacticPredicateListener(antlr.debug.SyntacticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::lookaheadString(int)",
"vars": {
}
},
{
"method_signature": "antlr.CommonAST::setText(java.lang.String)",
"vars": {
"text_": ["String", "Null"]
}
},
{
"method_signature": "antlr.debug.GuessingEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.ANTLRParser::mk_tokenSet_2()",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::fireSyntacticPredicateSucceeded()",
"vars": {
}
},
{
"method_signature": "antlr.SimpleTokenManager::<init>(java.lang.String, antlr.Tool)",
"vars": {
"tool_": ["Tool", "Null"],
"name_": ["String", "Null"]
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::mk_tokenSet_5()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::refReturnAction(antlr.Token)",
"vars": {
"returnAction": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.OneOrMoreBlock::<init>(antlr.Grammar)",
"vars": {
"g": ["LexerGrammar", "TreeWalkerGrammar", "Null", "ParserGrammar"]
}
},
{
"method_signature": "antlr.preprocessor.Rule::setVisibility(java.lang.String)",
"vars": {
"v": ["Null", "String"]
}
},
{
"method_signature": "antlr.TokenStreamRecognitionException::toString()",
"vars": {
}
},
{
"method_signature": "antlr.Lookahead::nil()",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::removeSyntacticPredicateListener(antlr.debug.SyntacticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.ANTLRHashString::charAt(int)",
"vars": {
}
},
{
"method_signature": "antlr.collections.Stack::pop()",
"vars": {
}
},
{
"method_signature": "antlr.Parser::setFilename(java.lang.String)",
"vars": {
"f": ["String", "Null"]
}
},
{
"method_signature": "antlr.Token::setText(java.lang.String)",
"vars": {
"t": ["String", "Null"]
}
},
{
"method_signature": "antlr.debug.ParserReporter::reportError(antlr.debug.MessageEvent)",
"vars": {
"e": ["Null", "MessageEvent"]
}
},
{
"method_signature": "antlr.ASTNULLType::equals(antlr.collections.AST)",
"vars": {
"t": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.Tool::getLanguage(antlr.MakeGrammar)",
"vars": {
"behavior": ["MakeGrammar"]
}
},
{
"method_signature": "antlr.preprocessor.Rule::setArgs(java.lang.String)",
"vars": {
"a": ["String", "Null"]
}
},
{
"method_signature": "antlr.collections.AST::toStringList()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mTREE_BEGIN(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.Vector::removeElement(java.lang.Object)",
"vars": {
"o": ["String", "Null", "AlternativeBlock", "LLCell", "StringLiteralSymbol", "Token", "Integer", "Alternative", "BlockContext", "Rule", "StringLiteralElement", "Lookahead", "RuleSymbol", "Grammar", "RuleBlock", "TreeBlockContext", "OneOrMoreBlock", "ExceptionSpec", "ASTNULLType", "CommonToken", "CharLiteralElement", "ActionElement", "RuleEndElement", "TokenRangeElement", "RuleRefElement", "Object[]", "TreeElement", "TokenSymbol", "TokenRefElement", "BlockEndElement", "Lookahead[]", "IntRange", "Option", "ZeroOrMoreBlock", "GrammarFile", "SynPredBlock", "CharRangeElement", "ExceptionHandler", "WildcardElement"]
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::valueForPathChanged(javax.swing.tree.TreePath, java.lang.Object)",
"vars": {
"path": [],
"newValue": []
}
},
{
"method_signature": "antlr.debug.ParserReporter::parserLA(antlr.debug.ParserTokenEvent)",
"vars": {
"e": ["ParserTokenEvent", "Null"]
}
},
{
"method_signature": "antlr.NoViableAltForCharException::<init>(char, antlr.CharScanner)",
"vars": {
"scanner": []
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::getInputBufferListeners()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::<init>(antlr.TokenStream)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::getASTCreateString(java.lang.String)",
"vars": {
"astCtorArgs": ["String", "Null"]
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.TreeElement)",
"vars": {
"t": ["TreeElement"]
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.BlockEndElement)",
"vars": {
"end": ["RuleEndElement", "BlockEndElement"]
}
},
{
"method_signature": "antlr.preprocessor.Grammar::setOptions(antlr.collections.impl.IndexedVector)",
"vars": {
"options": ["IndexedVector", "Null"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::abortGrammar()",
"vars": {
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.CharLiteralElement)",
"vars": {
"atom": ["CharLiteralElement"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genBody(antlr.TreeWalkerGrammar)",
"vars": {
"g": ["TreeWalkerGrammar"]
}
},
{
"method_signature": "antlr.debug.ParserTokenEvent::getValue()",
"vars": {
}
},
{
"method_signature": "antlr.TreeSpecifierNode::getParent()",
"vars": {
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genCommonBlock(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::makeToken(int)",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::degree()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mAST_ITEM(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.StringLiteralElement)",
"vars": {
"atom": ["StringLiteralElement"]
}
},
{
"method_signature": "antlr.TokenStreamHiddenTokenFilter::hide(int)",
"vars": {
}
},
{
"method_signature": "antlr.RecognitionException::getColumn()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::mk_tokenSet_6()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genRule(antlr.RuleSymbol, boolean, int, java.lang.String)",
"vars": {
"s": ["Null", "RuleSymbol"],
"prefix": ["String"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genBlockInitAction(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genTokenTypes(antlr.TokenManager)",
"vars": {
"tm": ["Null"]
}
},
{
"method_signature": "antlr.TreeParser::matchNot(antlr.collections.AST, int)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_21()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ListenerBase::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": ["Null", "TraceEvent"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::synPred()",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingInputBuffer::consume()",
"vars": {
}
},
{
"method_signature": "antlr.Grammar::getDefaultErrorHandler()",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_7()",
"vars": {
}
},
{
"method_signature": "antlr.TokenManager::mapToTokenSymbol(java.lang.String, antlr.TokenSymbol)",
"vars": {
"sym": ["Null", "StringLiteralSymbol", "TokenSymbol"],
"name": ["String", "Null"]
}
},
{
"method_signature": "antlr.MakeGrammar::addElementToCurrentAlt(antlr.AlternativeElement)",
"vars": {
"e": ["Null", "ActionElement", "StringLiteralElement", "AlternativeBlock", "ZeroOrMoreBlock", "TokenRefElement", "RuleBlock", "CharLiteralElement", "SynPredBlock", "RuleRefElement", "TokenRangeElement", "CharRangeElement", "BlockEndElement", "WildcardElement", "RuleEndElement", "OneOrMoreBlock", "TreeElement"]
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genLookaheadSetForBlock(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.debug.ParserAdapter::parserMatchNot(antlr.debug.ParserMatchEvent)",
"vars": {
"e": ["Null", "ParserMatchEvent"]
}
},
{
"method_signature": "antlr.ANTLRParser::fileOptionsSpec()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::endGrammar()",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::removeTraceListener(antlr.debug.TraceListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refCharLiteral(antlr.Token, antlr.Token, boolean, int, boolean)",
"vars": {
"lit": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.AlternativeBlock::addAlternative(antlr.Alternative)",
"vars": {
"alt": ["Alternative"]
}
},
{
"method_signature": "antlr.NameSpace::getName()",
"vars": {
}
},
{
"method_signature": "antlr.Parser::addParserMatchListener(antlr.debug.ParserMatchListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.collections.impl.IndexedVector::elements()",
"vars": {
}
},
{
"method_signature": "antlr.BlockContext::addAlternativeElement(antlr.AlternativeElement)",
"vars": {
"e": ["Null", "ActionElement", "StringLiteralElement", "AlternativeBlock", "ZeroOrMoreBlock", "TokenRefElement", "RuleBlock", "CharLiteralElement", "SynPredBlock", "RuleRefElement", "TokenRangeElement", "CharRangeElement", "BlockEndElement", "WildcardElement", "RuleEndElement", "OneOrMoreBlock", "TreeElement"]
}
},
{
"method_signature": "antlr.RuleRefElement::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.LexerGrammar::setCharVocabulary(antlr.collections.impl.BitSet)",
"vars": {
"b": ["Null", "BitSet"]
}
},
{
"method_signature": "antlr.Tool::processArguments(java.lang.String[])",
"vars": {
"args": ["Null", "String[]"]
}
},
{
"method_signature": "antlr.MakeGrammar::refCharLiteral(antlr.Token, antlr.Token, boolean, int, boolean)",
"vars": {
"lit": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.debug.misc.ASTFrame::main(java.lang.String[])",
"vars": {
"args": []
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::mk_tokenSet_3()",
"vars": {
}
},
{
"method_signature": "antlr.Parser::traceIn(java.lang.String)",
"vars": {
"rname": []
}
},
{
"method_signature": "antlr.CharScanner::append(char)",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.OneOrMoreBlock)",
"vars": {
"blk": ["OneOrMoreBlock"]
}
},
{
"method_signature": "antlr.RuleBlock::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.TokenStreamRetryException::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::<init>(antlr.Tool, java.lang.String[], antlr.LLkAnalyzer)",
"vars": {
"analyzer_": ["LLkAnalyzer"],
"tool_": ["Tool"],
"args_": ["String[]"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::endExceptionSpec()",
"vars": {
}
},
{
"method_signature": "antlr.LexerGrammar::<init>(java.lang.String, antlr.Tool, java.lang.String)",
"vars": {
"tool_": ["Tool", "Null"],
"superClass": ["String", "Null"],
"className_": ["String", "Null"]
}
},
{
"method_signature": "antlr.Tool::doEverything(java.lang.String[])",
"vars": {
"args": ["String[]"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genAlt(antlr.Alternative, antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "Null", "AlternativeBlock", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"],
"alt": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::removeNewLineListener(antlr.debug.NewLineListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::<init>(java.io.Reader)",
"vars": {
"in": ["BufferedReader"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.Token::<init>(int, java.lang.String)",
"vars": {
"txt": ["String"]
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_7()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::processStringForASTConstructor(java.lang.String)",
"vars": {
"str": ["String", "Null"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::mangleLiteral(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.TokenSymbol::<init>(java.lang.String)",
"vars": {
"r": ["String", "Null"]
}
},
{
"method_signature": "antlr.Tool::warning(java.lang.String, java.lang.String, int, int)",
"vars": {
"s": ["String"],
"file": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRLexer::<init>(antlr.LexerSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.GrammarAtom::getLabel()",
"vars": {
}
},
{
"method_signature": "antlr.debug.GuessingEvent::setGuessing(int)",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::<init>(antlr.Tool, java.lang.String[], antlr.LLkAnalyzer)",
"vars": {
"analyzer_": ["LLkAnalyzer"],
"tool_": ["Tool"],
"args_": ["String[]"]
}
},
{
"method_signature": "antlr.debug.InputBufferEvent::setLookaheadAmount(int)",
"vars": {
}
},
{
"method_signature": "antlr.Parser::getTokenTypeToASTClassMap()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genInitFactory(antlr.Grammar)",
"vars": {
"g": ["Null", "LexerGrammar", "TreeWalkerGrammar", "ParserGrammar"]
}
},
{
"method_signature": "antlr.BaseAST::initialize(antlr.Token)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.debug.InputBufferEvent::setChar(char)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refTokensSpecElementOption(antlr.Token, antlr.Token, antlr.Token)",
"vars": {
"tok": ["Null", "Token", "CommonToken"],
"value": ["Null", "Token", "CommonToken"],
"option": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.CharRangeElement)",
"vars": {
"r": ["CharRangeElement"]
}
},
{
"method_signature": "antlr.AlternativeElement::<init>(antlr.Grammar, antlr.Token, int)",
"vars": {
"g": ["Null", "LexerGrammar", "TreeWalkerGrammar", "ParserGrammar"],
"start": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.AlternativeElement::setLabel(java.lang.String)",
"vars": {
"label": ["String", "Null"]
}
},
{
"method_signature": "antlr.debug.ParserAdapter::parserMismatchNot(antlr.debug.ParserMatchEvent)",
"vars": {
"e": ["Null", "ParserMatchEvent"]
}
},
{
"method_signature": "antlr.collections.impl.ASTArray::add(antlr.collections.AST)",
"vars": {
"node": []
}
},
{
"method_signature": "antlr.FileLineFormatter::getFormatter()",
"vars": {
}
},
{
"method_signature": "antlr.InputBuffer::rewind(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeNewLineListener(antlr.debug.NewLineListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.MessageAdapter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": ["Null", "TraceEvent"]
}
},
{
"method_signature": "antlr.CharScanner::makeToken(int)",
"vars": {
}
},
{
"method_signature": "antlr.ASTFactory::createUsingCtor(antlr.Token, java.lang.String)",
"vars": {
"className": [],
"token": []
}
},
{
"method_signature": "antlr.JavaCharFormatter::escapeChar(int, boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::reset()",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mID_ELEMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::exceptionSpecNoLabel()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genBitsetsHeader(antlr.collections.impl.Vector, int)",
"vars": {
"bitsetList": ["Vector", "Null"]
}
},
{
"method_signature": "antlr.build.Tool::antlr(java.lang.String)",
"vars": {
"fullyQualifiedFilename": ["String"]
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::mk_tokenSet_1()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserTokenEvent::<init>(java.lang.Object, int, int, int)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.BaseAST::encode(java.lang.String)",
"vars": {
"text": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refSemPred(antlr.Token)",
"vars": {
"pred": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.build.Tool::log(java.lang.String)",
"vars": {
"cmd": ["String"]
}
},
{
"method_signature": "antlr.LLkAnalyzer::removeCompetingPredictionSets(antlr.collections.impl.BitSet, antlr.AlternativeElement)",
"vars": {
"b": ["BitSet", "Null"],
"el": ["TokenRefElement", "CharLiteralElement"]
}
},
{
"method_signature": "antlr.CodeGenerator::_print(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.ASTFactory::getTokenTypeToASTClassMap()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mTEXT_ITEM(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.AlternativeElement::getAutoGenType()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::context()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_1()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.LList::push(java.lang.Object)",
"vars": {
"o": ["String", "Null", "AlternativeBlock", "StringLiteralSymbol", "Token", "Integer", "Alternative", "BlockContext", "Rule", "StringLiteralElement", "Lookahead", "RuleSymbol", "Grammar", "RuleBlock", "TreeBlockContext", "OneOrMoreBlock", "ExceptionSpec", "ASTNULLType", "CommonToken", "CharLiteralElement", "TokenRangeElement", "Object[]", "TreeElement", "TokenSymbol", "TokenRefElement", "Lookahead[]", "IntRange", "RuleRefElement", "Option", "ZeroOrMoreBlock", "GrammarFile", "SynPredBlock", "CharRangeElement", "ExceptionHandler", "WildcardElement"]
}
},
{
"method_signature": "antlr.RuleBlock::isLexerAutoGenRule()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.GrammarFile::getGrammars()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeParserTokenListener(antlr.debug.ParserTokenListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_2()",
"vars": {
}
},
{
"method_signature": "antlr.SimpleTokenManager::getTokenSymbolKeys()",
"vars": {
}
},
{
"method_signature": "antlr.Grammar::getClassName()",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::getText()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.IndexedVector::appendElement(java.lang.Object, java.lang.Object)",
"vars": {
"value": ["String", "Null", "AlternativeBlock", "Token", "StringLiteralSymbol", "Integer", "Alternative", "BlockContext", "Rule", "StringLiteralElement", "Lookahead", "RuleSymbol", "Grammar", "RuleBlock", "TreeBlockContext", "ExceptionSpec", "OneOrMoreBlock", "ASTNULLType", "CommonToken", "CharLiteralElement", "TokenRangeElement", "Object[]", "TreeElement", "TokenSymbol", "TokenRefElement", "Lookahead[]", "IntRange", "RuleRefElement", "Option", "ZeroOrMoreBlock", "GrammarFile", "SynPredBlock", "CharRangeElement", "ExceptionHandler", "WildcardElement"],
"key": ["String", "Null"]
}
},
{
"method_signature": "antlr.RuleBlock::getTestLiterals()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::mk_tokenSet_6()",
"vars": {
}
},
{
"method_signature": "antlr.ToolErrorHandler::warnAltAmbiguity(antlr.Grammar, antlr.AlternativeBlock, boolean, int, antlr.Lookahead[], int, int)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"],
"grammar": ["Null"],
"sets": ["Lookahead[]"]
}
},
{
"method_signature": "antlr.Parser::panic()",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mACTION(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genLiteralsTestForPartialToken()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRHashString::<init>(antlr.CharScanner)",
"vars": {
"lexer": ["ANTLRLexer", "ANTLRTokdefLexer", "PreprocessorLexer", "ActionLexer"]
}
},
{
"method_signature": "antlr.debug.GuessingEvent::<init>(java.lang.Object, int)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.MakeGrammar::refWildcard(antlr.Token, antlr.Token, int)",
"vars": {
"t": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.TokenSymbol::setTokenType(int)",
"vars": {
}
},
{
"method_signature": "antlr.RuleSymbol::isDefined()",
"vars": {
}
},
{
"method_signature": "antlr.CommonASTWithHiddenTokens::getHiddenBefore()",
"vars": {
}
},
{
"method_signature": "antlr.LLkParser::consume()",
"vars": {
}
},
{
"method_signature": "antlr.TreeWalkerGrammar::<init>(java.lang.String, antlr.Tool, java.lang.String)",
"vars": {
"tool_": ["Tool", "Null"],
"superClass": ["String", "Null"],
"className_": ["String", "Null"]
}
},
{
"method_signature": "antlr.WildcardElement::<init>(antlr.Grammar, antlr.Token, int)",
"vars": {
"t": ["Null", "Token", "CommonToken"],
"g": ["LexerGrammar", "TreeWalkerGrammar", "Null", "ParserGrammar"]
}
},
{
"method_signature": "antlr.MakeGrammar::setArgOfRuleRef(antlr.Token)",
"vars": {
"argAction": []
}
},
{
"method_signature": "antlr.ANTLRParser::alternative()",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::isDebugMode()",
"vars": {
}
},
{
"method_signature": "antlr.NoViableAltForCharException::getMessage()",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::matchNot(char)",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
"vars": {
"currentRule": [],
"tInfo": [],
"actionStr": []
}
},
{
"method_signature": "antlr.collections.impl.BitSet::and(antlr.collections.impl.BitSet)",
"vars": {
"a": ["BitSet", "Null"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::genMatch(antlr.collections.impl.BitSet)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::fireEvent(int, antlr.debug.ListenerBase)",
"vars": {
"l": ["Null"]
}
},
{
"method_signature": "antlr.debug.SemanticPredicateEvent::getResult()",
"vars": {
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genAlt(antlr.Alternative)",
"vars": {
"alt": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.debug.DebuggingInputBuffer::isDebugMode()",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.build.StreamScarfer::<init>(java.io.InputStream, java.lang.String, antlr.build.Tool)",
"vars": {
"is": [],
"type": ["String"],
"tool": ["Tool"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::zeroOrMoreSubRule()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::beginAlt(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.BaseAST::setText(java.lang.String)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_9()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_13()",
"vars": {
}
},
{
"method_signature": "antlr.debug.misc.#Anonymous.999067991::windowClosing(java.awt.event.WindowEvent)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.ASTFactory::create(antlr.Token, java.lang.String)",
"vars": {
"tok": [],
"className": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::noASTSubRule()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refPreambleAction(antlr.Token)",
"vars": {
"act": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.SimpleTokenManager::setName(java.lang.String)",
"vars": {
"name_": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_6()",
"vars": {
}
},
{
"method_signature": "antlr.debug.misc.JTreeASTModel::removeTreeModelListener(javax.swing.event.TreeModelListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_6()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Grammar::getRules()",
"vars": {
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genFollowSetForRuleBlock(antlr.RuleBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.AlternativeBlock::prepareForAnalysis()",
"vars": {
}
},
{
"method_signature": "antlr.TreeElement::generate()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_25()",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::consumeUntil(antlr.collections.impl.BitSet)",
"vars": {
"set": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::setGrammar(antlr.Grammar)",
"vars": {
"g": ["Null"]
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::deterministic(antlr.OneOrMoreBlock)",
"vars": {
"blk": ["OneOrMoreBlock"]
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateListener::syntacticPredicateSucceeded(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": ["Null", "SyntacticPredicateEvent"]
}
},
{
"method_signature": "antlr.preprocessor.GrammarFile::setExpanded(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CommonToken::setColumn(int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mML_COMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.TokenBuffer::fill(int)",
"vars": {
}
},
{
"method_signature": "antlr.TreeWalkerGrammar::generate()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mID_ELEMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.build.ANTLR::rootIsValidANTLRDir(antlr.build.Tool)",
"vars": {
"tool": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genSynPred(antlr.SynPredBlock, java.lang.String)",
"vars": {
"blk": ["Null", "SynPredBlock"],
"lookaheadExpr": ["String", "Null"]
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, java.lang.String)",
"vars": {
"rule": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.StringLiteralElement::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_2()",
"vars": {
}
},
{
"method_signature": "antlr.collections.List::append(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.RuleSymbol::getBlock()",
"vars": {
}
},
{
"method_signature": "antlr.debug.SemanticPredicateEvent::getCondition()",
"vars": {
}
},
{
"method_signature": "antlr.debug.GuessingEvent::getGuessing()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.WildcardElement)",
"vars": {
"wc": ["Null", "WildcardElement"]
}
},
{
"method_signature": "antlr.TreeParser::setASTNodeClass(java.lang.String)",
"vars": {
"nodeType": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genLineNo(antlr.GrammarElement)",
"vars": {
"el": ["ActionElement", "RuleBlock", "Null", "AlternativeBlock", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMatch(char, antlr.collections.impl.BitSet, int)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genCommonBlock(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "Null", "AlternativeBlock", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.debug.MessageEvent::setValues(int, java.lang.String)",
"vars": {
"text": []
}
},
{
"method_signature": "antlr.preprocessor.GrammarFile::toString()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::beginChildList()",
"vars": {
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.RuleBlock)",
"vars": {
"blk": ["RuleBlock", "Null"]
}
},
{
"method_signature": "antlr.collections.impl.Vector::capacity()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::setSubruleOption(antlr.Token, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"key": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::startLexer(java.lang.String, antlr.Token, java.lang.String, java.lang.String)",
"vars": {
"file": ["String", "Null"],
"superClass": ["String", "Null"],
"name": ["Null", "Token", "CommonToken"],
"doc": ["String", "Null"]
}
},
{
"method_signature": "antlr.build.#Anonymous.1959690207::accept(java.io.File, java.lang.String)",
"vars": {
"name": [],
"dir": []
}
},
{
"method_signature": "antlr.RuleRefElement::setLabel(java.lang.String)",
"vars": {
"label_": ["String", "Null"]
}
},
{
"method_signature": "antlr.AlternativeBlock::setAlternatives(antlr.collections.impl.Vector)",
"vars": {
"v": ["Vector", "Null"]
}
},
{
"method_signature": "antlr.ANTLRParser::reportError(antlr.RecognitionException)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.GrammarAtom::getText()",
"vars": {
}
},
{
"method_signature": "antlr.collections.AST::findAllPartial(antlr.collections.AST)",
"vars": {
"subtree": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_19()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::elementNoOptionSpec()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::mk_tokenSet_3()",
"vars": {
}
},
{
"method_signature": "antlr.Parser::consumeUntil(antlr.collections.impl.BitSet)",
"vars": {
"set": ["BitSet"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.OneOrMoreBlock)",
"vars": {
"blk": ["OneOrMoreBlock"]
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.ZeroOrMoreBlock)",
"vars": {
"blk": ["ZeroOrMoreBlock"]
}
},
{
"method_signature": "antlr.TokenManager::getTokenSymbolAt(int)",
"vars": {
}
},
{
"method_signature": "antlr.ASTIterator::next(antlr.collections.AST)",
"vars": {
"template": []
}
},
{
"method_signature": "antlr.TokenStreamHiddenTokenFilter::LA(int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mPLUS(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserTokenAdapter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": ["TraceEvent", "Null"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::endAlt()",
"vars": {
}
},
{
"method_signature": "antlr.TokenBuffer::consume()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Rule::setOptions(antlr.collections.impl.IndexedVector)",
"vars": {
"options": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mTREE_ELEMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.TokenStreamSelector::select(antlr.TokenStream)",
"vars": {
"stream": ["Null"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.BlockEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.MakeGrammar::optionalSubRule()",
"vars": {
}
},
{
"method_signature": "antlr.ASTNULLType::findAll(antlr.collections.AST)",
"vars": {
"tree": []
}
},
{
"method_signature": "antlr.collections.impl.IndexedVector::size()",
"vars": {
}
},
{
"method_signature": "antlr.debug.InputBufferEvent::setValues(int, char, int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserTokenAdapter::parserLA(antlr.debug.ParserTokenEvent)",
"vars": {
"e": ["ParserTokenEvent", "Null"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
"vars": {
"str": ["String", "Null"],
"atom": ["StringLiteralElement", "Null", "TokenRefElement", "CharLiteralElement", "WildcardElement"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
"vars": {
"astCtorArgs": ["String", "Null"],
"atom": ["StringLiteralElement", "Null", "TokenRefElement", "CharLiteralElement", "WildcardElement"]
}
},
{
"method_signature": "antlr.AlternativeBlock::setLabel(java.lang.String)",
"vars": {
"label_": ["String", "Null"]
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genFollowSetForRuleBlock(antlr.RuleBlock)",
"vars": {
"blk": ["RuleBlock", "Null"]
}
},
{
"method_signature": "antlr.Alternative::getTreeSpecifier()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.LexerGrammar::generate()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::<init>(java.lang.String, antlr.RuleBlock, antlr.CodeGenerator, antlr.ActionTransInfo)",
"vars": {
"currentRule": ["RuleBlock", "Null"],
"s": ["String", "Null"],
"transInfo": ["ActionTransInfo", "Null"],
"generator": []
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mACTION(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::setCaseSensitive(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.SemanticPredicateEvent::setCondition(int)",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::print(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.TreeWalkerGrammar)",
"vars": {
"g": ["TreeWalkerGrammar"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireSemanticPredicateEvaluated(int, int, boolean, int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingInputBuffer::addInputBufferListener(antlr.debug.InputBufferListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMismatchNot(int, int, java.lang.String, int)",
"vars": {
"text": ["String", "Null"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::setupOutput(java.lang.String)",
"vars": {
"className": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mCOMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mXDIGIT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ImportVocabTokenManager::<init>(antlr.Grammar, java.lang.String, java.lang.String, antlr.Tool)",
"vars": {
"tool_": ["Tool", "Null"],
"grammar": ["LexerGrammar", "TreeWalkerGrammar", "Null", "ParserGrammar"],
"filename_": ["String"],
"name_": ["String", "Null"]
}
},
{
"method_signature": "antlr.MakeGrammar::refTokensSpecElementOption(antlr.Token, antlr.Token, antlr.Token)",
"vars": {
"tok": ["Null", "Token", "CommonToken"],
"value": ["Null", "Token", "CommonToken"],
"option": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mSTUFF(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.NameSpace::emitClosures(java.io.PrintWriter)",
"vars": {
"out": ["Null", "PrintWriter"]
}
},
{
"method_signature": "antlr.TokenQueue::removeFirst()",
"vars": {
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::HTMLEncode(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.ImportVocabTokenManager::nextTokenType()",
"vars": {
}
},
{
"method_signature": "antlr.Tool::error(java.lang.String, java.lang.String, int, int)",
"vars": {
"s": ["String"],
"file": ["String", "Null"]
}
},
{
"method_signature": "antlr.debug.InputBufferEvent::getChar()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::class_def(java.lang.String, antlr.preprocessor.Hierarchy)",
"vars": {
"file": ["String", "Null"],
"hier": ["Hierarchy"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mML_COMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CharQueue::<init>(int)",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.LList::top()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mINT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genErrorCatchForElement(antlr.AlternativeElement)",
"vars": {
"el": ["RuleRefElement", "TokenRangeElement", "TokenRefElement"]
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateAdapter::doneParsing(antlr.debug.TraceEvent)",
"vars": {
"e": ["Null", "TraceEvent"]
}
},
{
"method_signature": "antlr.ANTLRParser::parserSpec(java.lang.String)",
"vars": {
"doc": ["String", "Null"]
}
},
{
"method_signature": "antlr.preprocessor.Rule::setReturnValue(java.lang.String)",
"vars": {
"ret": ["String", "Null"]
}
},
{
"method_signature": "antlr.ASTFactory::makeASTRoot(antlr.ASTPair, antlr.collections.AST)",
"vars": {
"root": [],
"currentAST": []
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mTEXT_ITEM(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
"vars": {
"tInfo": ["Null", "ActionTransInfo"],
"id": ["String", "Null"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::fireExitRule(int, int)",
"vars": {
}
},
{
"method_signature": "antlr.Tool::getGrammarReader()",
"vars": {
}
},
{
"method_signature": "antlr.GrammarAtom::setOption(antlr.Token, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"option": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.TokenStreamSelector::pop()",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.RuleRefElement)",
"vars": {
"rr": ["RuleRefElement"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genRule(antlr.RuleSymbol, boolean, int, antlr.TokenManager)",
"vars": {
"s": ["Null", "RuleSymbol"],
"tm": ["SimpleTokenManager", "Null", "ImportVocabTokenManager"]
}
},
{
"method_signature": "antlr.debug.InputBufferAdapter::inputBufferConsume(antlr.debug.InputBufferEvent)",
"vars": {
"e": ["Null", "InputBufferEvent"]
}
},
{
"method_signature": "antlr.Parser::rewind(int)",
"vars": {
}
},
{
"method_signature": "antlr.MismatchedTokenException::<init>(java.lang.String[], antlr.Token, antlr.collections.impl.BitSet, boolean, java.lang.String)",
"vars": {
"token_": ["Null", "Token", "CommonToken"],
"set_": [],
"fileName_": ["String", "Null"],
"tokenNames_": ["String[]", "Null"]
}
},
{
"method_signature": "antlr.TokenStreamException::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Option::toString()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genBitsets(antlr.collections.impl.Vector, int)",
"vars": {
"bitsetList": ["Vector", "Null"]
}
},
{
"method_signature": "antlr.preprocessor.Grammar::<init>(antlr.Tool, java.lang.String, java.lang.String, antlr.collections.impl.IndexedVector)",
"vars": {
"name": ["String", "Null"],
"rules": ["Null", "IndexedVector"],
"superGrammar": ["String", "Null"],
"tool": ["Tool", "Null"]
}
},
{
"method_signature": "antlr.preprocessor.Grammar::setType(java.lang.String)",
"vars": {
"t": ["String", "Null"]
}
},
{
"method_signature": "antlr.MakeGrammar::beginExceptionSpec(antlr.Token)",
"vars": {
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::declareSaveIndexVariableIfNeeded()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addNewLineListener(antlr.debug.NewLineListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genErrorHandler(antlr.ExceptionSpec)",
"vars": {
"ex": ["Null", "ExceptionSpec"]
}
},
{
"method_signature": "antlr.Lookahead::resetEpsilon()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::setRuleOption(antlr.Token, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"key": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_0()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::setCharVocabulary(antlr.collections.impl.BitSet)",
"vars": {
"b": ["Null", "BitSet"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refPreambleAction(antlr.Token)",
"vars": {
"act": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.ASTFactory::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.LLkAnalyzer::reset()",
"vars": {
}
},
{
"method_signature": "antlr.CharStreamException::<init>(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.Parser::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.collections.impl.Vector::appendElement(java.lang.Object)",
"vars": {
"o": ["String", "Null", "AlternativeBlock", "Token", "StringLiteralSymbol", "Integer", "Alternative", "BlockContext", "Rule", "StringLiteralElement", "Lookahead", "RuleSymbol", "Grammar", "RuleBlock", "TreeBlockContext", "ExceptionSpec", "OneOrMoreBlock", "ASTNULLType", "CommonToken", "CharLiteralElement", "TokenRangeElement", "Object[]", "TreeElement", "TokenSymbol", "TokenRefElement", "Lookahead[]", "IntRange", "RuleRefElement", "Option", "ZeroOrMoreBlock", "GrammarFile", "SynPredBlock", "CharRangeElement", "ExceptionHandler", "WildcardElement"]
}
},
{
"method_signature": "antlr.CharLiteralElement::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refHeaderAction(antlr.Token, antlr.Token)",
"vars": {
"act": ["Null", "Token", "CommonToken"],
"name": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.preprocessor.Tool::preprocess()",
"vars": {
}
},
{
"method_signature": "antlr.LexerGrammar::getSuperClass()",
"vars": {
}
},
{
"method_signature": "antlr.Token::setFilename(java.lang.String)",
"vars": {
"name": []
}
},
{
"method_signature": "antlr.TokenStreamSelector::addInputStream(antlr.TokenStream, java.lang.String)",
"vars": {
"stream": [],
"key": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::endSubRule()",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::setupDebugging(antlr.TokenBuffer)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.StringLiteralElement::<init>(antlr.Grammar, antlr.Token, int)",
"vars": {
"t": ["Null", "Token", "CommonToken"],
"g": ["LexerGrammar", "TreeWalkerGrammar", "Null", "ParserGrammar"]
}
},
{
"method_signature": "antlr.MakeGrammar::refMemberAction(antlr.Token)",
"vars": {
"act": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::mk_tokenSet_2()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_20()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::<init>(java.lang.String, antlr.RuleBlock, antlr.CodeGenerator, antlr.ActionTransInfo)",
"vars": {
"currentRule": ["RuleBlock", "Null"],
"s": ["String", "Null"],
"transInfo": ["Null", "ActionTransInfo"],
"generator": []
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::startTreeWalker(java.lang.String, antlr.Token, java.lang.String, java.lang.String)",
"vars": {
"file": ["String", "Null"],
"superClass": ["String", "Null"],
"name": ["Null", "Token", "CommonToken"],
"doc": ["String", "Null"]
}
},
{
"method_signature": "antlr.StringUtils::stripFront(java.lang.String, char)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.BlockEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.DefaultToolErrorHandler::warnAltExitAmbiguity(antlr.Grammar, antlr.BlockWithImpliedExitPath, boolean, int, antlr.Lookahead[], int)",
"vars": {
"blk": ["ZeroOrMoreBlock", "OneOrMoreBlock"],
"grammar": ["Null"],
"sets": ["Lookahead[]"]
}
},
{
"method_signature": "antlr.ANTLRLexer::mSTRING_LITERAL(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CharRangeElement::toString()",
"vars": {
}
},
{
"method_signature": "antlr.Parser::addMessageListener(antlr.debug.MessageListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CharScanner::LA(int)",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mINT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ToolErrorHandler::warnAltExitAmbiguity(antlr.Grammar, antlr.BlockWithImpliedExitPath, boolean, int, antlr.Lookahead[], int)",
"vars": {
"blk": ["ZeroOrMoreBlock", "OneOrMoreBlock"],
"grammar": ["Null"],
"sets": ["Lookahead[]"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genLiteralsTestForPartialToken()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String)",
"vars": {
"node_type": ["String", "Null"],
"el": ["Null", "AlternativeBlock", "StringLiteralElement", "RuleBlock", "OneOrMoreBlock", "CharLiteralElement", "TokenRangeElement", "TreeElement", "TokenRefElement", "RuleRefElement", "ZeroOrMoreBlock", "SynPredBlock", "CharRangeElement", "WildcardElement"]
}
},
{
"method_signature": "antlr.AlternativeBlock::getAlternatives()",
"vars": {
}
},
{
"method_signature": "antlr.TreeWalkerGrammar::setOption(java.lang.String, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"key": ["String", "Null"]
}
},
{
"method_signature": "antlr.preprocessor.Option::setName(java.lang.String)",
"vars": {
"n": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::getRangeExpression(int, int[])",
"vars": {
"elems": ["int[]"]
}
},
{
"method_signature": "antlr.Tool::getUpperCaseMangledLiterals()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.LList::height()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::setFileOption(antlr.Token, antlr.Token, java.lang.String)",
"vars": {
"filename": ["String", "Null"],
"value": ["Null", "Token", "CommonToken"],
"key": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genASTDeclaration(antlr.AlternativeElement)",
"vars": {
"el": ["Null", "AlternativeBlock", "StringLiteralElement", "RuleBlock", "OneOrMoreBlock", "CharLiteralElement", "TokenRangeElement", "TreeElement", "TokenRefElement", "RuleRefElement", "ZeroOrMoreBlock", "SynPredBlock", "CharRangeElement", "WildcardElement"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::mangleLiteral(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.Tool::openOutputFile(java.lang.String)",
"vars": {
"f": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRLexer::mNESTED_ARG_ACTION(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.AlternativeElement::<init>(antlr.Grammar)",
"vars": {
"g": ["Null", "LexerGrammar", "TreeWalkerGrammar", "ParserGrammar"]
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genHeader()",
"vars": {
}
},
{
"method_signature": "antlr.BaseAST::getFirstChild()",
"vars": {
}
},
{
"method_signature": "antlr.TokenStreamHiddenTokenFilter::getInitialHiddenToken()",
"vars": {
}
},
{
"method_signature": "antlr.build.ANTLR::getName()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::<init>(java.io.Reader)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.BaseAST::findAll(antlr.collections.AST)",
"vars": {
"target": []
}
},
{
"method_signature": "antlr.debug.DebuggingInputBuffer::rewind(int)",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.Vector::elementAt(int)",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getLookaheadTestTerm(int, antlr.collections.impl.BitSet)",
"vars": {
"p": ["BitSet", "Null"]
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateAdapter::syntacticPredicateSucceeded(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": ["Null", "SyntacticPredicateEvent"]
}
},
{
"method_signature": "antlr.MismatchedTokenException::<init>(java.lang.String[], antlr.collections.AST, antlr.collections.impl.BitSet, boolean)",
"vars": {
"set_": [],
"tokenNames_": ["Null"],
"node_": []
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mCHAR_LITERAL(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::mapTreeVariable(antlr.AlternativeElement, java.lang.String)",
"vars": {
"e": ["StringLiteralElement", "AlternativeBlock", "ZeroOrMoreBlock", "TokenRefElement", "RuleBlock", "SynPredBlock", "CharLiteralElement", "Null", "TokenRangeElement", "WildcardElement", "OneOrMoreBlock", "TreeElement"],
"name": ["String", "Null"]
}
},
{
"method_signature": "antlr.LLkParser::<init>(antlr.TokenStream, int)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.debug.DebuggingInputBuffer::mark()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genSemPred(java.lang.String, int)",
"vars": {
"pred": ["String", "Null"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::endAlt()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::mXDIGIT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.Lookahead::combineWith(antlr.Lookahead)",
"vars": {
"q": ["Lookahead", "Null"]
}
},
{
"method_signature": "antlr.ANTLRParser::range(antlr.Token)",
"vars": {
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_15()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::suitableForCaseExpression(antlr.Alternative)",
"vars": {
"a": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.Parser::removeSemanticPredicateListener(antlr.debug.SemanticPredicateListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::FOLLOW(int, antlr.RuleEndElement)",
"vars": {
"end": ["Null", "RuleEndElement"]
}
},
{
"method_signature": "antlr.debug.ParserMatchListener::parserMismatch(antlr.debug.ParserMatchEvent)",
"vars": {
"e": ["Null", "ParserMatchEvent"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.TokenRefElement)",
"vars": {
"atom": ["TokenRefElement"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireEnterRule(int, int, int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::rules()",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::getValueString(int)",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.TokenRangeElement)",
"vars": {
"r": ["TokenRangeElement"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeParserMatchListener(antlr.debug.ParserMatchListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.preprocessor.Tool::<init>(antlr.Tool, java.lang.String[])",
"vars": {
"args": ["String[]"],
"t": ["Tool"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mAST_CTOR_ELEMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.TreeParser::traceIn(java.lang.String, antlr.collections.AST)",
"vars": {
"rname": [],
"t": []
}
},
{
"method_signature": "antlr.ANTLRLexer::mk_tokenSet_3()",
"vars": {
}
},
{
"method_signature": "antlr.TokenSymbol::setASTNodeType(java.lang.String)",
"vars": {
"type": ["String", "Null"]
}
},
{
"method_signature": "antlr.collections.AST::getNextSibling()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::refreshListeners()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::reportError(antlr.RecognitionException)",
"vars": {
"e": []
}
},
{
"method_signature": "antlr.collections.impl.Vector::setElementAt(java.lang.Object, int)",
"vars": {
"obj": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::startTreeWalker(java.lang.String, antlr.Token, java.lang.String, java.lang.String)",
"vars": {
"file": ["String", "Null"],
"superClass": ["String", "Null"],
"name": ["Null", "Token", "CommonToken"],
"doc": ["String", "Null"]
}
},
{
"method_signature": "antlr.CommonToken::setText(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.collections.impl.BitSet::toString(java.lang.String, antlr.CharFormatter)",
"vars": {
"formatter": ["JavaCharFormatter"],
"separator": ["String"]
}
},
{
"method_signature": "antlr.TokenStreamBasicFilter::nextToken()",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.StringLiteralElement)",
"vars": {
"atom": ["StringLiteralElement"]
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::setTool(antlr.Tool)",
"vars": {
"tool": ["Tool", "Null"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.ActionElement)",
"vars": {
"action": ["ActionElement"]
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.TreeElement)",
"vars": {
"end": ["TreeElement"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mTEXT_ARG_ELEMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.GrammarElement::toString()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genBlockFinish(antlr.CppBlockFinishingInfo, java.lang.String)",
"vars": {
"noViableAction": ["String", "Null"],
"howToFinish": ["CppBlockFinishingInfo"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::setTool(antlr.Tool)",
"vars": {
"tool": ["Tool", "Null"]
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.ANTLRLexer::mWILDCARD(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genNextToken()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Option::getName()",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::uponEOF()",
"vars": {
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.GrammarAtom::setLabel(java.lang.String)",
"vars": {
"label_": ["String", "Null"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
"vars": {
"blk": ["RuleBlock", "Null", "AlternativeBlock", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.MakeGrammar::createOptionalRuleRef(java.lang.String, antlr.Token)",
"vars": {
"start": ["Null", "Token", "CommonToken"],
"rule": ["String", "Null"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::reportError(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.debug.SyntacticPredicateEvent::setValues(int, int)",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::gen()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
"vars": {
"currentRule": ["RuleBlock", "Null"],
"tInfo": ["Null", "ActionTransInfo"],
"actionStr": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::mINT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::checkForMissingEndRule(antlr.Token)",
"vars": {
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::_print(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.debug.ParserAdapter::parserMismatch(antlr.debug.ParserMatchEvent)",
"vars": {
"e": ["Null", "ParserMatchEvent"]
}
},
{
"method_signature": "antlr.LexerSharedInputState::<init>(java.io.Reader)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.MismatchedCharException::<init>(char, antlr.collections.impl.BitSet, boolean, antlr.CharScanner)",
"vars": {
"scanner_": ["ANTLRLexer", "ANTLRTokdefLexer", "PreprocessorLexer", "ActionLexer"],
"set_": ["BitSet"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::<init>(antlr.LexerSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.JavaCharFormatter::escapeString(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.GrammarAtom::toString()",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.TokenRefElement)",
"vars": {
"atom": ["TokenRefElement"]
}
},
{
"method_signature": "antlr.AlternativeBlock::setInitAction(java.lang.String)",
"vars": {
"initAction_": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::mID(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.BlockEndElement)",
"vars": {
"end": ["RuleEndElement", "BlockEndElement"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::getRangeExpression(int, int[])",
"vars": {
"elems": ["int[]"]
}
},
{
"method_signature": "antlr.debug.InputBufferAdapter::inputBufferRewind(antlr.debug.InputBufferEvent)",
"vars": {
"e": ["Null", "InputBufferEvent"]
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::getTool()",
"vars": {
}
},
{
"method_signature": "antlr.TreeSpecifierNode::getToken()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::setTarget(java.lang.Object)",
"vars": {
"target": ["String", "BitSet", "Integer", "Character"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::getLookaheadTestExpression(antlr.Lookahead[], int)",
"vars": {
"look": ["Null", "Lookahead[]"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.WildcardElement)",
"vars": {
"wc": ["Null", "WildcardElement"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_22()",
"vars": {
}
},
{
"method_signature": "antlr.CommonToken::toString()",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genTokenTypes(antlr.TokenManager)",
"vars": {
"tm": ["Null"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_0()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserTokenEvent::getAmount()",
"vars": {
}
},
{
"method_signature": "antlr.TreeParser::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::setGrammarOption(antlr.Token, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"key": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String)",
"vars": {
"node_type": ["String", "Null"],
"el": ["Null", "AlternativeBlock", "StringLiteralElement", "RuleBlock", "OneOrMoreBlock", "CharLiteralElement", "TokenRangeElement", "TreeElement", "TokenRefElement", "RuleRefElement", "ZeroOrMoreBlock", "SynPredBlock", "CharRangeElement", "WildcardElement"]
}
},
{
"method_signature": "antlr.ParserGrammar::processArguments(java.lang.String[])",
"vars": {
"args": ["Null", "String[]"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::endChildList()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mSEMI(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::getCaseSensitiveLiterals()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::mSL_COMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.Token::setType(int)",
"vars": {
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.RuleRefElement)",
"vars": {
"rr": ["RuleRefElement"]
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::FOLLOW(int, antlr.RuleEndElement)",
"vars": {
"end": ["Null", "RuleEndElement"]
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genCommonBlock(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mALT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::beginSubRule(antlr.Token, antlr.Token, boolean)",
"vars": {
"start": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
"vars": {
"str": ["String", "Null"],
"atom": ["Null"]
}
},
{
"method_signature": "antlr.SimpleTokenManager::getTokenStringAt(int)",
"vars": {
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.RuleRefElement)",
"vars": {
"rr": ["RuleRefElement"]
}
},
{
"method_signature": "antlr.Tool::parseSeparatedList(java.lang.String, char)",
"vars": {
"list": []
}
},
{
"method_signature": "antlr.debug.ParserTokenListener::parserConsume(antlr.debug.ParserTokenEvent)",
"vars": {
"e": ["ParserTokenEvent", "Null"]
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.LexerGrammar)",
"vars": {
"g": ["LexerGrammar"]
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.StringLiteralElement)",
"vars": {
"atom": ["StringLiteralElement"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::suitableForCaseExpression(antlr.Alternative)",
"vars": {
"a": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::setMatched(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mESC(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserMatchAdapter::refresh()",
"vars": {
}
},
{
"method_signature": "antlr.RecognitionException::getLine()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::mk_tokenSet_0()",
"vars": {
}
},
{
"method_signature": "antlr.debug.InputBufferAdapter::refresh()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserAdapter::parserLA(antlr.debug.ParserTokenEvent)",
"vars": {
"e": ["ParserTokenEvent", "Null"]
}
},
{
"method_signature": "antlr.CodeGenerator::extractTypeOfAction(antlr.Token)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genTokenTypes(antlr.TokenManager)",
"vars": {
"tm": ["Null"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::genInclude(antlr.TreeWalkerGrammar)",
"vars": {
"g": ["TreeWalkerGrammar"]
}
},
{
"method_signature": "antlr.collections.impl.BitSet::wordNumber(int)",
"vars": {
}
},
{
"method_signature": "antlr.CharRangeElement::generate()",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::<init>(antlr.TokenStream, int)",
"vars": {
"lexer": []
}
},
{
"method_signature": "antlr.collections.impl.BitSet::toArray()",
"vars": {
}
},
{
"method_signature": "antlr.Alternative::getAutoGen()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Rule::<init>(java.lang.String, java.lang.String, antlr.collections.impl.IndexedVector, antlr.preprocessor.Grammar)",
"vars": {
"b": ["String"],
"options": ["Null", "IndexedVector"],
"gr": ["Null", "Grammar"],
"n": ["String", "Null"]
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::getTool()",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mARG(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.GrammarFile::generateExpandedFile()",
"vars": {
}
},
{
"method_signature": "antlr.build.Tool::error(java.lang.String)",
"vars": {
"msg": ["String"]
}
},
{
"method_signature": "antlr.ANTLRParser::lexerSpec(java.lang.String)",
"vars": {
"doc": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRParser::ast_type_spec()",
"vars": {
}
},
{
"method_signature": "antlr.SimpleTokenManager::nextTokenType()",
"vars": {
}
},
{
"method_signature": "antlr.Lookahead::<init>(antlr.collections.impl.BitSet)",
"vars": {
"p": ["BitSet", "Null"]
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genTokenTypes(antlr.TokenManager)",
"vars": {
"tm": []
}
},
{
"method_signature": "antlr.debug.MessageEvent::<init>(java.lang.Object, int, java.lang.String)",
"vars": {
"source": [],
"text": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::<init>(java.io.Reader)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.BaseAST::removeChildren()",
"vars": {
}
},
{
"method_signature": "antlr.TokenManager::tokenDefined(java.lang.String)",
"vars": {
"symbol": ["String", "Null"]
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.BlockEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::genAlt(antlr.Alternative, antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"],
"alt": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mML_COMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ActionElement::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserReporter::parserMatchNot(antlr.debug.ParserMatchEvent)",
"vars": {
"e": ["Null", "ParserMatchEvent"]
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::toString()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.ParserGrammar)",
"vars": {
"g": ["ParserGrammar"]
}
},
{
"method_signature": "antlr.AlternativeBlock::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Grammar::setHierarchy(antlr.preprocessor.Hierarchy)",
"vars": {
"hier": ["Hierarchy"]
}
},
{
"method_signature": "antlr.preprocessor.Grammar::setFileName(java.lang.String)",
"vars": {
"f": ["String", "Null"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::reset()",
"vars": {
}
},
{
"method_signature": "antlr.Parser::getInputState()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genBitSet(antlr.collections.impl.BitSet, int)",
"vars": {
"p": ["Null"]
}
},
{
"method_signature": "antlr.GrammarAtom::<init>(antlr.Grammar, antlr.Token, int)",
"vars": {
"t": ["Null", "Token", "CommonToken"],
"g": ["LexerGrammar", "TreeWalkerGrammar", "Null", "ParserGrammar"]
}
},
{
"method_signature": "antlr.Alternative::<init>(antlr.AlternativeElement)",
"vars": {
"firstElement": ["RuleRefElement"]
}
},
{
"method_signature": "antlr.ANTLRLexer::mACTION(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::setGrammar(antlr.Grammar)",
"vars": {
"g": ["Null"]
}
},
{
"method_signature": "antlr.LLkParser::traceIn(java.lang.String)",
"vars": {
"rname": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::setupOutput(java.lang.String)",
"vars": {
"className": ["String", "Null"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::mapTreeVariable(antlr.AlternativeElement, java.lang.String)",
"vars": {
"e": ["StringLiteralElement", "AlternativeBlock", "ZeroOrMoreBlock", "TokenRefElement", "RuleBlock", "CharLiteralElement", "SynPredBlock", "Null", "TokenRangeElement", "WildcardElement", "OneOrMoreBlock", "TreeElement"],
"name": ["String", "Null"]
}
},
{
"method_signature": "antlr.CommonAST::getType()",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_4()",
"vars": {
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::addInputBufferListener(antlr.debug.InputBufferListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genMatch(antlr.GrammarAtom)",
"vars": {
"atom": ["StringLiteralElement", "Null", "TokenRefElement", "CharLiteralElement"]
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::addGrammarFile(antlr.preprocessor.GrammarFile)",
"vars": {
"gf": ["GrammarFile"]
}
},
{
"method_signature": "antlr.Tool::checkForInvalidArguments(java.lang.String[], antlr.collections.impl.BitSet)",
"vars": {
"args": ["Null", "String[]"],
"cmdLineArgValid": ["BitSet"]
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::getRuleName(int)",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mACTION(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.Parser::removeParserListener(antlr.debug.ParserListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.ListenerBase::refresh()",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::reverseLexerRuleName(java.lang.String)",
"vars": {
"id": ["String", "Null"]
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCharFormatter::literalChar(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.TraceEvent::setRuleNum(int)",
"vars": {
}
},
{
"method_signature": "antlr.RuleBlock::getIgnoreRule()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::toStringWithRanges(java.lang.String, antlr.CharFormatter)",
"vars": {
"formatter": ["JavaCharFormatter"],
"separator": ["String"]
}
},
{
"method_signature": "antlr.SimpleTokenManager::getTokenSymbol(java.lang.String)",
"vars": {
"sym": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRHashString::<init>(char[], int, antlr.CharScanner)",
"vars": {
"buf": [],
"lexer": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_25()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::beginTree(antlr.Token)",
"vars": {
"tok": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.ParserGrammar)",
"vars": {
"g": ["ParserGrammar"]
}
},
{
"method_signature": "antlr.collections.AST::equalsTreePartial(antlr.collections.AST)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.ANTLRHashString::setBuffer(char[], int)",
"vars": {
"buf": ["char[]", "Null"]
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::fireEvents(int, java.util.Vector)",
"vars": {
"listeners": ["Null", "Vector"]
}
},
{
"method_signature": "antlr.Grammar::setFilename(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::genASTDeclaration(antlr.AlternativeElement)",
"vars": {
"el": ["Null", "AlternativeBlock", "StringLiteralElement", "RuleBlock", "OneOrMoreBlock", "CharLiteralElement", "TokenRangeElement", "TreeElement", "TokenRefElement", "RuleRefElement", "ZeroOrMoreBlock", "SynPredBlock", "CharRangeElement", "WildcardElement"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::nextToken()",
"vars": {
}
},
{
"method_signature": "antlr.Tool::main(java.lang.String[])",
"vars": {
"args": []
}
},
{
"method_signature": "antlr.CSharpBlockFinishingInfo::<init>(java.lang.String, boolean, boolean, boolean)",
"vars": {
"ps": []
}
},
{
"method_signature": "antlr.MakeGrammar::setUserExceptions(java.lang.String)",
"vars": {
"thr": ["String", "Null"]
}
},
{
"method_signature": "antlr.BaseAST::getNextSibling()",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genLookaheadSetForAlt(antlr.Alternative)",
"vars": {
"alt": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.InputBuffer::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::optionSpec(antlr.preprocessor.Grammar)",
"vars": {
"gr": ["Null", "Grammar"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::addParserMatchListener(antlr.debug.ParserMatchListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.MismatchedTokenException::<init>(java.lang.String[], antlr.collections.AST, int, boolean)",
"vars": {
"tokenNames_": ["Null"],
"node_": []
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mAST_CONSTRUCTOR(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.IntRange::<init>(int, int)",
"vars": {
}
},
{
"method_signature": "antlr.Parser::reportError(antlr.RecognitionException)",
"vars": {
"ex": []
}
},
{
"method_signature": "antlr.collections.AST::initialize(antlr.collections.AST)",
"vars": {
"t": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.LLkParser::LA(int)",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::<init>(antlr.InputBuffer)",
"vars": {
"cb": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::removeParserMatchListener(antlr.debug.ParserMatchListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::oneOrMoreSubRule()",
"vars": {
}
},
{
"method_signature": "antlr.RuleSymbol::numReferences()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Option::setRHS(java.lang.String)",
"vars": {
"rhs": []
}
},
{
"method_signature": "antlr.Parser::getFilename()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::_refStringLiteral(antlr.Token, antlr.Token, int, boolean)",
"vars": {
"lit": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.TokenSymbol::getParaphrase()",
"vars": {
}
},
{
"method_signature": "antlr.ActionTransInfo::toString()",
"vars": {
}
},
{
"method_signature": "antlr.ASTNULLType::setFirstChild(antlr.collections.AST)",
"vars": {
"c": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::printHeaderAction(java.lang.String)",
"vars": {
"name": ["String"]
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::gen(antlr.CharRangeElement)",
"vars": {
"r": ["CharRangeElement"]
}
},
{
"method_signature": "antlr.CharScanner::getLine()",
"vars": {
}
},
{
"method_signature": "antlr.NoViableAltForCharException::<init>(char, java.lang.String, int)",
"vars": {
"fileName": []
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.RuleRefElement)",
"vars": {
"rr": ["RuleRefElement"]
}
},
{
"method_signature": "antlr.collections.List::length()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::notInPlace()",
"vars": {
}
},
{
"method_signature": "antlr.build.Tool::system(java.lang.String)",
"vars": {
"cmd": ["String"]
}
},
{
"method_signature": "antlr.TokenManager::getTokenSymbol(java.lang.String)",
"vars": {
"sym": ["String", "Null"]
}
},
{
"method_signature": "antlr.ANTLRParser::tokensSpecOptions(antlr.Token)",
"vars": {
"t": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.collections.AST::setNextSibling(antlr.collections.AST)",
"vars": {
"n": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMatch(char, int)",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.ActionElement)",
"vars": {
"action": ["ActionElement"]
}
},
{
"method_signature": "antlr.ANTLRLexer::mTOKEN_REF(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ASTNULLType::setType(int)",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mTEXT_ARG_ELEMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.TraceEvent::toString()",
"vars": {
}
},
{
"method_signature": "antlr.TreeSpecifierNode::getNextSibling()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::endChildList()",
"vars": {
}
},
{
"method_signature": "antlr.debug.Event::setValues(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::fireConsume(char)",
"vars": {
}
},
{
"method_signature": "antlr.Parser::consumeUntil(int)",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::QuoteForId(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.collections.List::add(java.lang.Object)",
"vars": {
"o": []
}
},
{
"method_signature": "antlr.ZeroOrMoreBlock::<init>(antlr.Grammar, antlr.Token)",
"vars": {
"g": [],
"start": []
}
},
{
"method_signature": "antlr.LLkAnalyzer::deterministic(antlr.OneOrMoreBlock)",
"vars": {
"blk": ["OneOrMoreBlock"]
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.LexerGrammar)",
"vars": {
"g": ["LexerGrammar"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.TokenStreamException::<init>(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.TokenStreamHiddenTokenFilter::hide(antlr.collections.impl.BitSet)",
"vars": {
"mask": []
}
},
{
"method_signature": "antlr.ANTLRParser::elementOptionSpec()",
"vars": {
}
},
{
"method_signature": "antlr.TokenRangeElement::setLabel(java.lang.String)",
"vars": {
"label_": ["String", "Null"]
}
},
{
"method_signature": "antlr.Token::setLine(int)",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::mapTreeId(java.lang.String, antlr.ActionTransInfo)",
"vars": {
"transInfo": ["Null", "ActionTransInfo"],
"idParam": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_13()",
"vars": {
}
},
{
"method_signature": "antlr.NameSpace::emitDeclarations(java.io.PrintWriter)",
"vars": {
"out": ["Null", "PrintWriter"]
}
},
{
"method_signature": "antlr.TokenBuffer::reset()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Option::<init>(java.lang.String, java.lang.String, antlr.preprocessor.Grammar)",
"vars": {
"gr": ["Null", "Grammar"],
"rhs": ["String", "Null"],
"n": ["String", "Null"]
}
},
{
"method_signature": "antlr.BlockWithImpliedExitPath::<init>(antlr.Grammar, antlr.Token)",
"vars": {
"g": [],
"start": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_23()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::<init>(java.io.InputStream)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::wakeUp()",
"vars": {
}
},
{
"method_signature": "antlr.TokenStreamHiddenTokenFilter::nextToken()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::add(int)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mINTERNAL_RULE_REF(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.Grammar::setGrammarAnalyzer(antlr.LLkGrammarAnalyzer)",
"vars": {
"a": ["Null", "LLkAnalyzer"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mTEXT_ARG(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::traceOut(java.lang.String)",
"vars": {
"rname": []
}
},
{
"method_signature": "antlr.StringLiteralElement::generate()",
"vars": {
}
},
{
"method_signature": "antlr.RuleBlock::<init>(antlr.Grammar, java.lang.String, int, boolean)",
"vars": {
"r": ["String", "Null"],
"g": ["LexerGrammar", "TreeWalkerGrammar", "Null", "ParserGrammar"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::endExceptionSpec()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserController::checkBreak()",
"vars": {
}
},
{
"method_signature": "antlr.debug.Tracer::exitRule(antlr.debug.TraceEvent)",
"vars": {
"e": ["Null", "TraceEvent"]
}
},
{
"method_signature": "antlr.GrammarSymbol::<init>(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.collections.List::elements()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeDoneListener(antlr.debug.ListenerBase)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::addTraceListener(antlr.debug.TraceListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_10()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::removeMessageListener(antlr.debug.MessageListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.Token::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpNameSpace::<init>(java.lang.String)",
"vars": {
"name": ["String", "Null"]
}
},
{
"method_signature": "antlr.StringLiteralSymbol::getLabel()",
"vars": {
}
},
{
"method_signature": "antlr.Lookahead::<init>(java.lang.String)",
"vars": {
"c": ["String", "Null"]
}
},
{
"method_signature": "antlr.BaseAST::xmlSerialize(java.io.Writer)",
"vars": {
"out": []
}
},
{
"method_signature": "antlr.build.Tool::main(java.lang.String[])",
"vars": {
"args": []
}
},
{
"method_signature": "antlr.CharRangeElement::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::processStringForASTConstructor(java.lang.String)",
"vars": {
"str": ["String", "Null"]
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::goToSleep()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mk_tokenSet_2()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::_println(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.Grammar::isDefined(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.Tool::panic(java.lang.String)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.debug.ParserController::setParserEventSupport(antlr.debug.ParserEventSupport)",
"vars": {
"p": ["ParserEventSupport"]
}
},
{
"method_signature": "antlr.collections.Enumerator::valid()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::<init>(antlr.TokenBuffer, antlr.ANTLRGrammarParseBehavior, antlr.Tool)",
"vars": {
"tool_": ["Tool"],
"behavior_": ["MakeGrammar"],
"tokenBuf": ["TokenBuffer"]
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::match(antlr.collections.impl.BitSet)",
"vars": {
"b": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::removeParserMatchListener(antlr.debug.ParserMatchListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::getRuleName(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserReporter::syntacticPredicateFailed(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": ["Null", "SyntacticPredicateEvent"]
}
},
{
"method_signature": "antlr.TokenStreamHiddenTokenFilter::<init>(antlr.TokenStream)",
"vars": {
"input": []
}
},
{
"method_signature": "antlr.BaseAST::equalsList(antlr.collections.AST)",
"vars": {
"t": ["Null", "ASTNULLType"]
}
},
{
"method_signature": "antlr.LLkAnalyzer::removeCompetingPredictionSetsFromWildcard(antlr.Lookahead[], antlr.AlternativeElement, int)",
"vars": {
"el": [],
"look": []
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::nextToken()",
"vars": {
}
},
{
"method_signature": "antlr.Tool::help()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserReporter::parserMismatchNot(antlr.debug.ParserMatchEvent)",
"vars": {
"e": ["Null", "ParserMatchEvent"]
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genLookaheadSetForBlock(antlr.AlternativeBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.WildcardElement::look(int)",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genLineNo2()",
"vars": {
}
},
{
"method_signature": "antlr.SimpleTokenManager::define(antlr.TokenSymbol)",
"vars": {
"ts": ["Null", "StringLiteralSymbol", "TokenSymbol"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::<init>(java.io.InputStream)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::newline()",
"vars": {
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.ZeroOrMoreBlock)",
"vars": {
"blk": ["ZeroOrMoreBlock"]
}
},
{
"method_signature": "antlr.RuleRefElement::setArgs(java.lang.String)",
"vars": {
"a": ["String", "Null"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireEvent(int, antlr.debug.ListenerBase)",
"vars": {
"l": ["Null"]
}
},
{
"method_signature": "antlr.MismatchedCharException::<init>(char, char, char, boolean, antlr.CharScanner)",
"vars": {
"scanner_": ["ANTLRLexer", "ANTLRTokdefLexer", "PreprocessorLexer", "ActionLexer"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.RuleRefElement)",
"vars": {
"rr": ["RuleRefElement"]
}
},
{
"method_signature": "antlr.TokenBuffer::LA(int)",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genSemPred(java.lang.String, int)",
"vars": {
"pred": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_10()",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::processActionForSpecialSymbols(java.lang.String, int, antlr.RuleBlock, antlr.ActionTransInfo)",
"vars": {
"currentRule": [],
"tInfo": [],
"actionStr": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getBitsetName(int)",
"vars": {
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.CharLiteralElement)",
"vars": {
"atom": ["CharLiteralElement"]
}
},
{
"method_signature": "antlr.RuleSymbol::addReference(antlr.RuleRefElement)",
"vars": {
"e": ["RuleRefElement", "Null"]
}
},
{
"method_signature": "antlr.LexerSharedInputState::<init>(java.io.InputStream)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.debug.ParserAdapter::exitRule(antlr.debug.TraceEvent)",
"vars": {
"e": ["Null", "TraceEvent"]
}
},
{
"method_signature": "antlr.collections.impl.BitSet::or(antlr.collections.impl.BitSet)",
"vars": {
"a": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::<init>(antlr.LexerSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.debug.InputBufferEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.Tool::getGenHashLines()",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::setColumn(int)",
"vars": {
}
},
{
"method_signature": "antlr.LLkAnalyzer::subruleCanBeInverted(antlr.AlternativeBlock, boolean)",
"vars": {
"blk": ["Null", "AlternativeBlock", "RuleBlock", "OneOrMoreBlock", "TreeElement", "ZeroOrMoreBlock", "SynPredBlock"]
}
},
{
"method_signature": "antlr.collections.impl.ASTArray::<init>(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::setupDebugging(antlr.TokenStream, antlr.TokenBuffer)",
"vars": {
"lexer": ["Null"],
"tokenBuf": ["Null"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::optionalSubRule()",
"vars": {
}
},
{
"method_signature": "antlr.ASTNULLType::getText()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::mk_tokenSet_1()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::getGrammar(java.lang.String)",
"vars": {
"gr": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::reportWarning(java.lang.String)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.Grammar::setOption(java.lang.String, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"key": ["String", "Null"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getTokenTypesClassName()",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingParser::getRuleName(int)",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mVAR_ASSIGN(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genElementAST(antlr.AlternativeElement)",
"vars": {
"el": ["StringLiteralElement", "AlternativeBlock", "ZeroOrMoreBlock", "TokenRefElement", "RuleBlock", "CharLiteralElement", "SynPredBlock", "TokenRangeElement", "Null", "WildcardElement", "OneOrMoreBlock", "TreeElement"]
}
},
{
"method_signature": "antlr.Tool::warning(java.lang.String[], java.lang.String, int, int)",
"vars": {
"s": ["String[]"],
"file": ["String", "Null"]
}
},
{
"method_signature": "antlr.TokenStreamSelector::nextToken()",
"vars": {
}
},
{
"method_signature": "antlr.GrammarAtom::getType()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::setValue(int)",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::nextToken()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mCOMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::removeParserTokenListener(antlr.debug.ParserTokenListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refWildcard(antlr.Token, antlr.Token, int)",
"vars": {
"t": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::mk_tokenSet_3()",
"vars": {
}
},
{
"method_signature": "antlr.ASTFactory::create(antlr.collections.AST)",
"vars": {
"tr": []
}
},
{
"method_signature": "antlr.debug.GuessingEvent::setValues(int, int)",
"vars": {
}
},
{
"method_signature": "antlr.CommonToken::getText()",
"vars": {
}
},
{
"method_signature": "antlr.CharScanner::setTabSize(int)",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.IndexedVector::getElement(java.lang.Object)",
"vars": {
"key": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mTREE(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserReporter::reportWarning(antlr.debug.MessageEvent)",
"vars": {
"e": ["Null", "MessageEvent"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_13()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.VectorEnumeration::hasMoreElements()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::abortGrammar()",
"vars": {
}
},
{
"method_signature": "antlr.debug.MessageListener::reportWarning(antlr.debug.MessageEvent)",
"vars": {
"e": ["Null", "MessageEvent"]
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::getASTCreateString(antlr.GrammarAtom, java.lang.String)",
"vars": {
"str": ["String", "Null"],
"atom": ["Null"]
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::genBlockPreamble(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "Null", "AlternativeBlock", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.CodeGenerator::elementsAreRange(int[])",
"vars": {
"elems": ["int[]"]
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::<init>(java.lang.Object)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::removeParserListener(antlr.debug.ParserListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.CppCodeGenerator::gen(antlr.ParserGrammar)",
"vars": {
"g": ["ParserGrammar"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_3()",
"vars": {
}
},
{
"method_signature": "antlr.debug.InputBufferEvent::<init>(java.lang.Object, int, char, int)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String, java.lang.String)",
"vars": {
"node_type": ["String", "Null"],
"el": ["Null", "AlternativeBlock", "StringLiteralElement", "RuleBlock", "OneOrMoreBlock", "CharLiteralElement", "TokenRangeElement", "TreeElement", "TokenRefElement", "RuleRefElement", "ZeroOrMoreBlock", "SynPredBlock", "CharRangeElement", "WildcardElement"],
"var_name": ["String", "Null"]
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genMatch(antlr.GrammarAtom)",
"vars": {
"atom": ["StringLiteralElement", "Null", "TokenRefElement", "CharLiteralElement"]
}
},
{
"method_signature": "antlr.SimpleTokenManager::getTokenSymbolAt(int)",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genErrorTryForElement(antlr.AlternativeElement)",
"vars": {
"el": ["RuleRefElement", "TokenRangeElement", "TokenRefElement"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genBlockInitAction(antlr.AlternativeBlock)",
"vars": {
"blk": ["RuleBlock", "AlternativeBlock", "Null", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.SynPredBlock::generate()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::tokenTypeForCharLiteral(java.lang.String)",
"vars": {
"lit": ["String", "Null"]
}
},
{
"method_signature": "antlr.CharQueue::append(char)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRParser::id()",
"vars": {
}
},
{
"method_signature": "antlr.Tool::fatalError(java.lang.String)",
"vars": {
"message": ["String"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::beginAlt(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.GrammarSymbol::setId(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.CharLiteralElement)",
"vars": {
"atom": ["CharLiteralElement"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::<init>(java.io.InputStream)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.debug.DebuggingCharScanner::LA(int)",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::synPred()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genErrorTryForElement(antlr.AlternativeElement)",
"vars": {
"el": ["RuleRefElement", "TokenRangeElement", "TokenRefElement"]
}
},
{
"method_signature": "antlr.preprocessor.Grammar::getSuperGrammarName()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refStringLiteral(antlr.Token, antlr.Token, int, boolean)",
"vars": {
"lit": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.TokenRangeElement::<init>(antlr.Grammar, antlr.Token, antlr.Token, int)",
"vars": {
"g": ["LexerGrammar", "TreeWalkerGrammar", "Null", "ParserGrammar"],
"t1": ["Null", "Token", "CommonToken"],
"t2": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.debug.SemanticPredicateEvent::setValues(int, int, boolean, int)",
"vars": {
}
},
{
"method_signature": "antlr.ImportVocabTokenManager::isReadOnly()",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genFollowSetForRuleBlock(antlr.RuleBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::<init>(java.io.InputStream)",
"vars": {
"in": []
}
},
{
"method_signature": "antlr.collections.impl.BitSet::toStringOfHalfWords()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::getLookaheadTestExpression(antlr.Alternative, int)",
"vars": {
"alt": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refArgAction(antlr.Token)",
"vars": {
"action": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::beginExceptionSpec(antlr.Token)",
"vars": {
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::beginExceptionGroup()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::mDIGIT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::exitIfError()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::setRuleOption(antlr.Token, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"key": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::refRule(antlr.Token, antlr.Token, antlr.Token, antlr.Token, int)",
"vars": {
"r": ["Null", "Token", "CommonToken"],
"idAssign": ["Null", "Token", "CommonToken"],
"arg": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.RuleEndElement::toString()",
"vars": {
}
},
{
"method_signature": "antlr.BaseAST::setType(int)",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::refElementOption(antlr.Token, antlr.Token)",
"vars": {
"value": ["Null", "Token", "CommonToken"],
"option": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.SynPredBlock::toString()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserTokenAdapter::refresh()",
"vars": {
}
},
{
"method_signature": "antlr.debug.TraceEvent::getData()",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.Preprocessor::reportWarning(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.MakeGrammar::refInitAction(antlr.Token)",
"vars": {
"action": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CodeGenerator::setAnalyzer(antlr.LLkGrammarAnalyzer)",
"vars": {
"analyzer_": ["LLkAnalyzer"]
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.BlockEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.TokenSymbol::getASTNodeType()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::synPred()",
"vars": {
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen(antlr.TreeWalkerGrammar)",
"vars": {
"g": ["TreeWalkerGrammar"]
}
},
{
"method_signature": "antlr.preprocessor.Tool::main(java.lang.String[])",
"vars": {
"args": []
}
},
{
"method_signature": "antlr.Parser::isDebugMode()",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::printTabs()",
"vars": {
}
},
{
"method_signature": "antlr.CharBuffer::<init>(java.io.Reader)",
"vars": {
"input_": ["BufferedReader", "Null", "InputStreamReader"]
}
},
{
"method_signature": "antlr.ANTLRHashString::equals(java.lang.Object)",
"vars": {
"o": ["String"]
}
},
{
"method_signature": "antlr.CharScanner::newline()",
"vars": {
}
},
{
"method_signature": "antlr.DocBookCodeGenerator::genSynPred(antlr.SynPredBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.ASTFactory::addASTChild(antlr.ASTPair, antlr.collections.AST)",
"vars": {
"currentAST": [],
"child": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::genNextToken()",
"vars": {
}
},
{
"method_signature": "antlr.CharRangeElement::getLabel()",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::getLookaheadTestExpression(antlr.Alternative, int)",
"vars": {
"alt": ["Null", "Alternative"]
}
},
{
"method_signature": "antlr.ANTLRError::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genHeader(java.lang.String)",
"vars": {
"fileName": ["String", "Null"]
}
},
{
"method_signature": "antlr.Grammar::setTokenManager(antlr.TokenManager)",
"vars": {
"tokenManager_": ["SimpleTokenManager", "Null", "ImportVocabTokenManager"]
}
},
{
"method_signature": "antlr.AlternativeBlock::<init>(antlr.Grammar)",
"vars": {
"g": ["LexerGrammar", "Null", "TreeWalkerGrammar", "ParserGrammar"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_16()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::getValue()",
"vars": {
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::gen(antlr.TokenRefElement)",
"vars": {
"atom": ["TokenRefElement"]
}
},
{
"method_signature": "antlr.CppCodeGenerator::genCommonBlock(antlr.AlternativeBlock, boolean)",
"vars": {
"blk": ["RuleBlock", "Null", "AlternativeBlock", "ZeroOrMoreBlock", "OneOrMoreBlock", "TreeElement", "SynPredBlock"]
}
},
{
"method_signature": "antlr.ANTLRLexer::mSEMI(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::gen(antlr.TokenRangeElement)",
"vars": {
"r": ["TokenRangeElement"]
}
},
{
"method_signature": "antlr.debug.InputBufferEventSupport::removeInputBufferListener(antlr.debug.InputBufferListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.ANTLRParser::throwsSpec()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_26()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRTokdefParser::line(antlr.ImportVocabTokenManager)",
"vars": {
"tm": ["ImportVocabTokenManager"]
}
},
{
"method_signature": "antlr.Lookahead::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mSL_COMMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.DiagnosticCodeGenerator::gen(antlr.TreeElement)",
"vars": {
"t": ["TreeElement"]
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_12()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::<init>(antlr.LexerSharedInputState)",
"vars": {
"state": []
}
},
{
"method_signature": "antlr.CSharpNameSpace::emitClosures(java.io.PrintWriter)",
"vars": {
"out": ["Null", "PrintWriter"]
}
},
{
"method_signature": "antlr.ASTVisitor::visit(antlr.collections.AST)",
"vars": {
"node": []
}
},
{
"method_signature": "antlr.CharScanner::setCommitToPath(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.TokenStreamHiddenTokenFilter::getDiscardMask()",
"vars": {
}
},
{
"method_signature": "antlr.SimpleTokenManager::getTokenSymbolElements()",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refCharLiteral(antlr.Token, antlr.Token, boolean, int, boolean)",
"vars": {
"lit": ["Null", "Token", "CommonToken"],
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.GrammarAtom::getASTNodeType()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::mASSIGN(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mRULE_BLOCK(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genRule(antlr.RuleSymbol)",
"vars": {
"s": ["Null", "RuleSymbol"]
}
},
{
"method_signature": "antlr.ZeroOrMoreBlock::toString()",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::setCharVocabulary(antlr.collections.impl.BitSet)",
"vars": {
"b": ["Null", "BitSet"]
}
},
{
"method_signature": "antlr.CharScanner::setTokenObjectClass(java.lang.String)",
"vars": {
"cl": ["String"]
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::refCharRange(antlr.Token, antlr.Token, antlr.Token, int, boolean)",
"vars": {
"label": ["Null", "Token", "CommonToken"],
"t1": ["Null", "Token", "CommonToken"],
"t2": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.ANTLRParser::ebnf(antlr.Token, boolean)",
"vars": {
"label": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.Parser::defaultDebuggingSetup(antlr.TokenStream, antlr.TokenBuffer)",
"vars": {
"tokBuf": [],
"lexer": []
}
},
{
"method_signature": "antlr.Tool::<init>()",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mTEXT_ARG_ID_ELEMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRLexer::<init>(java.io.Reader)",
"vars": {
"in": ["Null", "InputStreamReader", "BufferedReader"]
}
},
{
"method_signature": "antlr.CommonToken::setLine(int)",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mAST_CTOR_ELEMENT(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.debug.SemanticPredicateListener::semanticPredicateEvaluated(antlr.debug.SemanticPredicateEvent)",
"vars": {
"e": ["Null", "SemanticPredicateEvent"]
}
},
{
"method_signature": "antlr.debug.TraceEvent::<init>(java.lang.Object, int, int, int, int)",
"vars": {
"source": []
}
},
{
"method_signature": "antlr.CSharpCodeGenerator::genBitsets(antlr.collections.impl.Vector, int)",
"vars": {
"bitsetList": ["Vector", "Null"]
}
},
{
"method_signature": "antlr.TokenRefElement::<init>(antlr.Grammar, antlr.Token, boolean, int)",
"vars": {
"t": ["Null", "Token", "CommonToken"],
"g": ["LexerGrammar", "TreeWalkerGrammar", "Null", "ParserGrammar"]
}
},
{
"method_signature": "antlr.debug.Tracer::enterRule(antlr.debug.TraceEvent)",
"vars": {
"e": ["Null", "TraceEvent"]
}
},
{
"method_signature": "antlr.CharScanner::setLine(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMismatch(char, java.lang.String, int)",
"vars": {
"target": ["String"]
}
},
{
"method_signature": "antlr.collections.impl.BitSet::subtractInPlace(antlr.collections.impl.BitSet)",
"vars": {
"a": ["BitSet", "Null"]
}
},
{
"method_signature": "antlr.Parser::match(int)",
"vars": {
}
},
{
"method_signature": "antlr.DefineGrammarSymbols::setFileOption(antlr.Token, antlr.Token, java.lang.String)",
"vars": {
"filename": ["String", "Null"],
"value": ["Null", "Token", "CommonToken"],
"key": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.ParserGrammar::<init>(java.lang.String, antlr.Tool, java.lang.String)",
"vars": {
"tool_": ["Tool", "Null"],
"superClass": ["String", "Null"],
"className_": ["String", "Null"]
}
},
{
"method_signature": "antlr.CommonAST::<init>(antlr.Token)",
"vars": {
"tok": []
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_8()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::equals(java.lang.Object)",
"vars": {
"obj": ["String", "Null", "BitSet", "AlternativeBlock", "Token", "StringLiteralSymbol", "Integer", "Alternative", "BlockContext", "Rule", "StringLiteralElement", "Lookahead", "RuleSymbol", "Grammar", "RuleBlock", "TreeBlockContext", "ExceptionSpec", "OneOrMoreBlock", "ASTNULLType", "CommonToken", "CharLiteralElement", "TokenRangeElement", "Object[]", "TreeElement", "TokenSymbol", "TokenRefElement", "Lookahead[]", "IntRange", "RuleRefElement", "Option", "ZeroOrMoreBlock", "GrammarFile", "SynPredBlock", "CharRangeElement", "ExceptionHandler", "WildcardElement"]
}
},
{
"method_signature": "antlr.ANTLRLexer::mRCURLY(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.TokenStream::nextToken()",
"vars": {
}
},
{
"method_signature": "antlr.actions.cpp.ActionLexer::mk_tokenSet_7()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.BitSet::not()",
"vars": {
}
},
{
"method_signature": "antlr.LLkAnalyzer::look(int, antlr.ActionElement)",
"vars": {
"action": ["ActionElement"]
}
},
{
"method_signature": "antlr.CharScanner::consume()",
"vars": {
}
},
{
"method_signature": "antlr.InputBuffer::commit()",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.ParserGrammar)",
"vars": {
"g": ["ParserGrammar"]
}
},
{
"method_signature": "antlr.WildcardElement::toString()",
"vars": {
}
},
{
"method_signature": "antlr.Grammar::getIntegerOption(java.lang.String)",
"vars": {
"key": ["String"]
}
},
{
"method_signature": "antlr.debug.ParserAdapter::reportError(antlr.debug.MessageEvent)",
"vars": {
"e": ["Null", "MessageEvent"]
}
},
{
"method_signature": "antlr.TokenManager::setName(java.lang.String)",
"vars": {
"n": ["String", "Null"]
}
},
{
"method_signature": "antlr.HTMLCodeGenerator::genSynPred(antlr.SynPredBlock)",
"vars": {
"blk": []
}
},
{
"method_signature": "antlr.CSharpCharFormatter::escapeString(java.lang.String)",
"vars": {
"s": ["String", "Null"]
}
},
{
"method_signature": "antlr.LLkGrammarAnalyzer::look(int, antlr.ActionElement)",
"vars": {
"action": ["ActionElement"]
}
},
{
"method_signature": "antlr.ANTLRParser::<init>(antlr.TokenBuffer)",
"vars": {
"tokenBuf": []
}
},
{
"method_signature": "antlr.CharScanner::append(java.lang.String)",
"vars": {
"s": []
}
},
{
"method_signature": "antlr.debug.ParserMatchEvent::getText()",
"vars": {
}
},
{
"method_signature": "antlr.InputBuffer::fill(int)",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mTEXT_ITEM(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.ANTLRGrammarParseBehavior::startLexer(java.lang.String, antlr.Token, java.lang.String, java.lang.String)",
"vars": {
"file": ["String", "Null"],
"superClass": ["String", "Null"],
"name": ["Null", "Token", "CommonToken"],
"doc": ["String", "Null"]
}
},
{
"method_signature": "antlr.collections.Stack::top()",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.BlockEndElement)",
"vars": {
"end": []
}
},
{
"method_signature": "antlr.RuleBlock::getDefaultErrorHandler()",
"vars": {
}
},
{
"method_signature": "antlr.debug.InputBufferReporter::inputBufferRewind(antlr.debug.InputBufferEvent)",
"vars": {
"e": ["Null", "InputBufferEvent"]
}
},
{
"method_signature": "antlr.ANTLRTokdefLexer::mESC(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.Parser::getTokenName(int)",
"vars": {
}
},
{
"method_signature": "antlr.debug.LLkDebuggingParser::addMessageListener(antlr.debug.MessageListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.debug.SemanticPredicateEvent::toString()",
"vars": {
}
},
{
"method_signature": "antlr.TokenStreamBasicFilter::<init>(antlr.TokenStream)",
"vars": {
"input": []
}
},
{
"method_signature": "antlr.TokenBuffer::getInput()",
"vars": {
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::setLineOffset(int)",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.LList::insertHead(java.lang.Object)",
"vars": {
"o": ["String", "Null", "AlternativeBlock", "StringLiteralSymbol", "Token", "Integer", "Alternative", "BlockContext", "Rule", "StringLiteralElement", "Lookahead", "RuleSymbol", "Grammar", "RuleBlock", "TreeBlockContext", "OneOrMoreBlock", "ExceptionSpec", "ASTNULLType", "CommonToken", "CharLiteralElement", "TokenRangeElement", "Object[]", "TreeElement", "TokenSymbol", "TokenRefElement", "Lookahead[]", "IntRange", "RuleRefElement", "Option", "ZeroOrMoreBlock", "GrammarFile", "SynPredBlock", "CharRangeElement", "ExceptionHandler", "WildcardElement"]
}
},
{
"method_signature": "antlr.CharScanner::getTabSize()",
"vars": {
}
},
{
"method_signature": "antlr.CodeGenerator::genTokenInterchange(antlr.TokenManager)",
"vars": {
"tm": ["Null"]
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.TokenRangeElement)",
"vars": {
"r": ["TokenRangeElement"]
}
},
{
"method_signature": "antlr.TokenStreamSelector::retry()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserAdapter::syntacticPredicateStarted(antlr.debug.SyntacticPredicateEvent)",
"vars": {
"e": ["Null", "SyntacticPredicateEvent"]
}
},
{
"method_signature": "antlr.Alternative::addElement(antlr.AlternativeElement)",
"vars": {
"e": ["Null", "AlternativeBlock", "ActionElement", "ZeroOrMoreBlock", "CharLiteralElement", "RuleRefElement", "RuleBlock", "BlockEndElement", "WildcardElement", "RuleEndElement", "StringLiteralElement", "TokenRefElement", "SynPredBlock", "TokenRangeElement", "CharRangeElement", "OneOrMoreBlock", "TreeElement"]
}
},
{
"method_signature": "antlr.TokenStreamHiddenTokenFilter::getHideMask()",
"vars": {
}
},
{
"method_signature": "antlr.MakeGrammar::refPreambleAction(antlr.Token)",
"vars": {
"act": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.CodeGenerator::gen(antlr.TokenRefElement)",
"vars": {
"atom": ["TokenRefElement"]
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireMatch(java.lang.String, int)",
"vars": {
"s": ["String"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mk_tokenSet_11()",
"vars": {
}
},
{
"method_signature": "antlr.ASTFactory::setASTNodeType(java.lang.String)",
"vars": {
"t": []
}
},
{
"method_signature": "antlr.preprocessor.Grammar::setPreambleAction(java.lang.String)",
"vars": {
"a": ["String", "Null"]
}
},
{
"method_signature": "antlr.actions.java.ActionLexer::mSTRING(boolean)",
"vars": {
}
},
{
"method_signature": "antlr.CppCodeGenerator::genASTDeclaration(antlr.AlternativeElement, java.lang.String, java.lang.String)",
"vars": {
"node_type": ["String", "Null"],
"el": ["Null", "AlternativeBlock", "StringLiteralElement", "RuleBlock", "OneOrMoreBlock", "CharLiteralElement", "TokenRangeElement", "TreeElement", "TokenRefElement", "RuleRefElement", "ZeroOrMoreBlock", "SynPredBlock", "CharRangeElement", "WildcardElement"],
"var_name": ["String", "Null"]
}
},
{
"method_signature": "antlr.preprocessor.Hierarchy::verifyThatHierarchyIsComplete()",
"vars": {
}
},
{
"method_signature": "antlr.Lookahead::toString()",
"vars": {
}
},
{
"method_signature": "antlr.debug.DebuggingInputBuffer::removeInputBufferListener(antlr.debug.InputBufferListener)",
"vars": {
"l": []
}
},
{
"method_signature": "antlr.JavaCodeGenerator::gen()",
"vars": {
}
},
{
"method_signature": "antlr.TokenQueue::expand()",
"vars": {
}
},
{
"method_signature": "antlr.debug.ParserEventSupport::fireExitRule(int, int, int)",
"vars": {
}
},
{
"method_signature": "antlr.Grammar::processArguments(java.lang.String[])",
"vars": {
"args": ["Null", "String[]"]
}
},
{
"method_signature": "antlr.RecognitionException::<init>(java.lang.String, java.lang.String, int)",
"vars": {
"s": [],
"fileName_": []
}
},
{
"method_signature": "antlr.TreeElement::<init>(antlr.Grammar, antlr.Token)",
"vars": {
"g": ["LexerGrammar", "TreeWalkerGrammar", "Null", "ParserGrammar"],
"start": ["Null", "Token", "CommonToken"]
}
},
{
"method_signature": "antlr.debug.ParserTokenEvent::setValue(int)",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.Vector::ensureCapacity(int)",
"vars": {
}
},
{
"method_signature": "antlr.preprocessor.PreprocessorLexer::mk_tokenSet_6()",
"vars": {
}
},
{
"method_signature": "antlr.collections.impl.LList::elementAt(int)",
"vars": {
}
},
{
"method_signature": "antlr.actions.csharp.ActionLexer::mk_tokenSet_16()",
"vars": {
}
}
]
