/* Copyright (c) 2023, ExtendJ Committers
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Private interface methods are allowed in Java 9
 */
aspect Java9Modifiers{

  refine Java8Modifiers eq MethodDecl.isAbstract() =
      getModifiers().isAbstract() || (hostType().isInterfaceDecl() && !isStatic() && !isDefault() && !isPrivate());

  refine Modifiers eq MethodDecl.isPublic() =
      getModifiers().isPublic() || (hostType().isInterfaceDecl() && !isPrivate());

  refine Java8Modifiers eq MethodDecl.modifierProblems() {
    Collection<Problem> problems = refined();
    if (hostType().isInterfaceDecl()) {
      // Filter the Java 8 errors to remove the error about interface methods being private.
      Collection<Problem> filtered = new LinkedList<Problem>();
      for (Problem problem : problems) {
        if (!problem.message().contains("cannot be private")) {
          filtered.add(problem);
        }
      }
      // Add new Java 9 error message:
      if (getModifiers().isAbstract()) {
        filtered.add(errorf("Interface method %s in %s cannot be both abstract and private.",
            signature(), hostType().typeName()));
      }
      return filtered;
    } else {
      return problems;
    }
  }
}
