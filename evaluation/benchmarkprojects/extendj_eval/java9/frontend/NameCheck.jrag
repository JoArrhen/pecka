/* Copyright (c) 2023, ExtendJ Committers
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.

* Tests needed for when the methods refined here have contents and when they don't
*/


/**
 * In Java 9 underscore can not be used as an identifier
 */

aspect Java9NameCheck{
  refine Java8NameCheck eq VariableDeclarator.nameProblems() {
    Collection<Problem> problems = NameCheck.VariableDeclarator.nameProblems();
    if (name().equals("_")) {
      problems.add(error("As of Java 9, '_' is a keyword, and may not be used as a variable identifier."));
    }
    return problems;
  }

  refine NameCheck eq FieldDeclarator.nameProblems() {
    Collection<Problem> problems = NameCheck.FieldDeclarator.nameProblems();
    if (name().equals("_")) {
      if (problems.size() == 0) { // Needed otherwise the list is immutable
        problems = new LinkedList<Problem>();
      }
      problems.add(error("As of Java 9, '_' is a keyword, and may not be used as a field identifier."));
    }
    return problems;
  }

  refine NameCheck eq MethodDecl.nameProblems() {
    Collection<Problem> problems = NameCheck.MethodDecl.nameProblems();
    if (name().equals("_")) {
      problems.add(error("As of Java 9, '_' is a keyword, and may not be used as a method identifier."));
    }
    return problems;
  }

  refine NameCheck eq ConstructorDecl.nameProblems() {
      Collection<Problem> problems = NameCheck.ConstructorDecl.nameProblems();
      if (name().equals("_")) {
          problems.add(error("As of Java 9, '_' is a keyword, and may not be used as a constructor identifier."));
      }
      return problems;
  }

  refine NameCheck eq TypeDecl.nameProblems() {
    Collection<Problem> problems = NameCheck.TypeDecl.nameProblems();
    if (name().equals("_")) {
        problems.add(error("As of Java 9, '_' is a keyword, and may not be used as an type identifier."));
    }
    return problems;
  }

  refine NameCheck eq ClassDecl.nameProblems() {
    Collection<Problem> problems = NameCheck.ClassDecl.nameProblems();
    if (name().equals("_")) {
      problems.add(error("As of Java 9, '_' is a keyword, and may not be used as an class identifier."));
    }
    return problems;
  }

  refine Java8NameCheck eq ParameterDeclaration.nameProblems() {
    Collection<Problem> problems = NameCheck.ParameterDeclaration.nameProblems();
    if (name().equals("_")) {
      problems.add(error("As of Java 9, '_' is a keyword, and may not be used as an parameter identifier."));
    }
    return problems;
  }

  refine GenericTypeVariables eq TypeVariable.nameProblems() {
    Collection<Problem> problems = GenericTypeVariables.TypeVariable.nameProblems();
    if (name().equals("_")) {
      if (problems.size() == 0) { // Needed otherwise the list is immutable
        problems = new LinkedList<Problem>();
      }
      problems.add(error("As of Java 9, '_' is a keyword, and may not be used as a type variable identifier."));
    }
    return problems;
  }
}
