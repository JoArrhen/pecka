/* Copyright (c) 2023, ExtendJ Committers
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect Java9CreateBCode {

  /**
   * Refined in Java 9 for private interface methods
   */
  refine GenericsCodegen
  public void MethodAccess.createBCode(CodeGeneration gen) {
    if (transformed() != this) {
      // Ensure bytecode is generated for the transformed access.
      transformed().createBCode(gen);
      return;
    }
    MethodDecl decl = decl().erasedMethod();
    createLoadQualifier(gen);

    if (program().options().hasOption("-debug")) {
      printDiagnosticMessages();
    }

    // Perform method invocation conversions.
    for (int i = 0; i < getNumArg(); ++i) {
      getArg(i).createBCode(gen);
      // The cast or boxing/unboxing operation must know the bound rather than the erased type.
      getArg(i).emitCastTo(gen, decl.paramType(i)); // Invocation conversion.
    }
    // This if statement was changed in Java 9
    if (!decl.isStatic() && isQualified() && prevExpr().isSuperAccess()
        || isSuperAccessor || !decl.isStatic() && decl.isPrivate() && decl.hostType().isInterfaceDecl()) {
      decl.emitInvokeSpecialMethod(gen, methodQualifierType());
    } else {
      decl.emitInvokeMethod(gen, methodQualifierType());
    }
  }

  refine CodeGeneration
  public void MethodDecl.emitInvokeSpecialMethod(CodeGeneration gen, TypeDecl hostType) {
    String classname = hostType.constantPoolName();
    String desc = descName();
    String name = name();
    int index;
    if (hostType.isInterfaceDecl() && isPrivate()) { // From Java 9 onwards, we can have concrete private methods in our interfaces.
      index = gen.constantPool().addInterfaceMethodref(classname, name, desc);
    } else {
      index = gen.constantPool().addMethodref(classname, name, desc);
    }
    int numArg = 1 + getNumParameter();
    gen.INVOKESPECIAL(index, numArg, type());
  }
}
