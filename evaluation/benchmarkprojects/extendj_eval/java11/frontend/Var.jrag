/* Copyright (c) 2023, ExtendJ Committers
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * The var identifier can be used for lamba expressions in Java 11
 */
aspect Var {
  /**
   * Returns true if the parameter list contains 'var'-declared parameters.
   */
  syn boolean DeclaredLambdaParameters.hasVarParameters() =
      numParameters() > 0 && getParameter(0).getTypeAccess() != null && getParameter(0).getTypeAccess().isVar();

  refine LambdaToClass protected List<ParameterDeclaration> DeclaredLambdaParameters.toParameterList() {
    if (hasVarParameters()) {
      List<ParameterDeclaration> paramList = new List<ParameterDeclaration>();
      FunctionDescriptor fd = enclosingLambda().targetInterface().functionDescriptor();
      if (fd.method.hasValue()) {
        MethodDecl targetMethod = fd.method.get();
        int i = 0;
        for (ParameterDeclaration Decl : getParameterList()) {
          ParameterDeclaration funcDecl = targetMethod.getParameter(i);
          paramList.add(new ParameterDeclaration(funcDecl.type().createQualifiedAccess(), Decl.name()));
          i += 1;
        }
      }
      return paramList;
    }
    return getParameterList().treeCopyNoTransform();
  }

  inh lazy TypeDecl ParameterDeclaration.inferredType();
  eq Program.getChild().inferredType() = unknownType();

  eq DeclaredLambdaParameters.getParameter(int i).inferredType() {
    if (enclosingLambda().targetInterface() == null) {
      return unknownType();
    }
    InterfaceDecl iDecl = (InterfaceDecl) enclosingLambda().targetInterface();
    if (!iDecl.isFunctional()) {
      return unknownType();
    } else {
      FunctionDescriptor fd = iDecl.functionDescriptor();
      if (fd.method.hasValue()) {
        MethodDecl targetMethod = fd.method.get();
        if (targetMethod.getNumParameter() < i + 1) {
          return unknownType();
        } else {
          // The target functional interface matches this lambda.
          return targetMethod.getParameter(i).type();
        }
      } else {
        // No target method.
        return unknownType();
      }
    }
  }

  eq ParameterDeclaration.getTypeAccess().varType() = inferredType();

  refine LambdaExpr eq DeclaredLambdaParameters.congruentTo(FunctionDescriptor fd) {
    if (fd.method.hasValue()) {
      MethodDecl targetMethod = fd.method.get();
      if (numParameters() != targetMethod.getNumParameter()) {
        return false;
      }
      if (hasVarParameters()) {
        return true; // If a parameter is declared using "var" treat all parameters as var, mixing is not allowed.
      }
      for (int i = 0; i < numParameters(); i++) {
        // Lambdas cannot declare type variables so that doesn't need to be taken into account.
        if (getParameter(i).type() != targetMethod.getParameter(i).type()
            && getParameter(i).type() != targetMethod.getParameter(i).type().erasure()) {
          return false;
        }
      }
      return true;
    } else {
      return false;
    }
  }

  syn boolean LambdaParameters.mixesVarAndTypes() = false;

  eq DeclaredLambdaParameters.mixesVarAndTypes() {
    boolean atLeastOneVar = false;
    boolean allVar = true;
    for (int i = 0; i < getNumParameter(); i++) {
      if (getParameter(i).getTypeAccess() != null && getParameter(i).getTypeAccess().isVar()) {
        atLeastOneVar = true;
      } else {
        allVar = false;
      }
    }
    return atLeastOneVar && !allVar;
  }

  refine TypeCheck eq LambdaExpr.typeProblems() {
    // Additional check added in Java 11 to make sure var cannot be mixed with other types.
    if (getLambdaParameters().mixesVarAndTypes()) {
      Collection<Problem> problems = new LinkedList<Problem>();
      problems.add(error("Cannot mix types with var declarations in lambda expressions."));
      return problems;
    }

    return TypeCheck.LambdaExpr.typeProblems();
  }

}
