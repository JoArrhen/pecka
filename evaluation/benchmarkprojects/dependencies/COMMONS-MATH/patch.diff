diff --git a/src/main/java/org/apache/commons/math3/ode/nonstiff/AdamsNordsieckFieldTransformer.java b/src/main/java/org/apache/commons/math3/ode/nonstiff/AdamsNordsieckFieldTransformer.java
index b8f872bce..186f50f57 100644
--- a/src/main/java/org/apache/commons/math3/ode/nonstiff/AdamsNordsieckFieldTransformer.java
+++ b/src/main/java/org/apache/commons/math3/ode/nonstiff/AdamsNordsieckFieldTransformer.java
@@ -134,11 +134,11 @@ import org.apache.commons.math3.util.MathArrays;
 public class AdamsNordsieckFieldTransformer<T extends RealFieldElement<T>> {
 
     /** Cache for already computed coefficients. */
-    private static final Map<Integer,
-                         Map<Field<? extends RealFieldElement<?>>,
-                                   AdamsNordsieckFieldTransformer<? extends RealFieldElement<?>>>> CACHE =
-        new HashMap<Integer, Map<Field<? extends RealFieldElement<?>>,
-                                 AdamsNordsieckFieldTransformer<? extends RealFieldElement<?>>>>();
+//    private static final Map<Integer,
+//                         Map<Field<? super RealFieldElement<?>>,
+//                                   AdamsNordsieckFieldTransformer<? super RealFieldElement<?>>>> CACHE =
+//        new HashMap<Integer, Map<Field<? extends RealFieldElement<?>>,
+//                                 AdamsNordsieckFieldTransformer<? extends RealFieldElement<?>>>>();
 
     /** Field to which the time and state vector elements belong. */
     private final Field<T> field;
@@ -162,7 +162,7 @@ public class AdamsNordsieckFieldTransformer<T extends RealFieldElement<T>> {
         // compute coefficients
         FieldMatrix<T> bigP = buildP(rows);
         FieldDecompositionSolver<T> pSolver =
-            new FieldLUDecomposition<T>(bigP).getSolver();
+                new FieldLUDecomposition<T>(bigP).getSolver();
 
         T[] u = MathArrays.buildArray(field, rows);
         Arrays.fill(u, field.getOne());
@@ -192,23 +192,7 @@ public class AdamsNordsieckFieldTransformer<T extends RealFieldElement<T>> {
     @SuppressWarnings("unchecked")
     public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T>
     getInstance(final Field<T> field, final int nSteps) {
-        synchronized(CACHE) {
-            Map<Field<? extends RealFieldElement<?>>,
-                      AdamsNordsieckFieldTransformer<? extends RealFieldElement<?>>> map = CACHE.get(nSteps);
-            if (map == null) {
-                map = new HashMap<Field<? extends RealFieldElement<?>>,
-                                        AdamsNordsieckFieldTransformer<? extends RealFieldElement<?>>>();
-                CACHE.put(nSteps, map);
-            }
-            @SuppressWarnings("rawtypes") // use rawtype to avoid compilation problems with java 1.5
-            AdamsNordsieckFieldTransformer t = map.get(field);
-            if (t == null) {
-                t = new AdamsNordsieckFieldTransformer<T>(field, nSteps);
-                map.put(field, (AdamsNordsieckFieldTransformer<T>) t);
-            }
-            return (AdamsNordsieckFieldTransformer<T>) t;
-
-        }
+        return new AdamsNordsieckFieldTransformer<T>(field, nSteps);
     }
 
     /** Build the P matrix.
@@ -309,7 +293,7 @@ public class AdamsNordsieckFieldTransformer<T extends RealFieldElement<T>> {
 
         // extract just the Nordsieck vector [s2 ... sk]
         final Array2DRowFieldMatrix<T> truncatedX =
-                        new Array2DRowFieldMatrix<T>(field, x.getRowDimension() - 1, x.getColumnDimension());
+                new Array2DRowFieldMatrix<T>(field, x.getRowDimension() - 1, x.getColumnDimension());
         for (int i = 0; i < truncatedX.getRowDimension(); ++i) {
             for (int j = 0; j < truncatedX.getColumnDimension(); ++j) {
                 truncatedX.setEntry(i, j, x.getEntry(i, j));
diff --git a/src/test/java/org/apache/commons/math3/TestUtils.java b/src/test/java/org/apache/commons/math3/TestUtils.java
index 4dddf569c..d045bab91 100644
--- a/src/test/java/org/apache/commons/math3/TestUtils.java
+++ b/src/test/java/org/apache/commons/math3/TestUtils.java
@@ -311,30 +311,30 @@ public class TestUtils {
     }
 
     /** verifies that two matrices are equal */
-    public static void assertEquals(FieldMatrix<? extends FieldElement<?>> expected,
-                                    FieldMatrix<? extends FieldElement<?>> observed) {
-
-        Assert.assertNotNull("Observed should not be null",observed);
-
-        if (expected.getColumnDimension() != observed.getColumnDimension() ||
-                expected.getRowDimension() != observed.getRowDimension()) {
-            StringBuilder messageBuffer = new StringBuilder();
-            messageBuffer.append("Observed has incorrect dimensions.");
-            messageBuffer.append("\nobserved is " + observed.getRowDimension() +
-                    " x " + observed.getColumnDimension());
-            messageBuffer.append("\nexpected " + expected.getRowDimension() +
-                    " x " + expected.getColumnDimension());
-            Assert.fail(messageBuffer.toString());
-        }
-
-        for (int i = 0; i < expected.getRowDimension(); ++i) {
-            for (int j = 0; j < expected.getColumnDimension(); ++j) {
-                FieldElement<?> eij = expected.getEntry(i, j);
-                FieldElement<?> oij = observed.getEntry(i, j);
-                Assert.assertEquals(eij, oij);
-            }
-        }
-    }
+//    public static void assertEquals(FieldMatrix<? extends FieldElement<?>> expected,
+//                                    FieldMatrix<? extends FieldElement<?>> observed) {
+//
+//        Assert.assertNotNull("Observed should not be null",observed);
+//
+//        if (expected.getColumnDimension() != observed.getColumnDimension() ||
+//                expected.getRowDimension() != observed.getRowDimension()) {
+//            StringBuilder messageBuffer = new StringBuilder();
+//            messageBuffer.append("Observed has incorrect dimensions.");
+//            messageBuffer.append("\nobserved is " + observed.getRowDimension() +
+//                    " x " + observed.getColumnDimension());
+//            messageBuffer.append("\nexpected " + expected.getRowDimension() +
+//                    " x " + expected.getColumnDimension());
+//            Assert.fail(messageBuffer.toString());
+//        }
+//
+//        for (int i = 0; i < expected.getRowDimension(); ++i) {
+//            for (int j = 0; j < expected.getColumnDimension(); ++j) {
+//                FieldElement<?> eij = expected.getEntry(i, j);
+//                FieldElement<?> oij = observed.getEntry(i, j);
+//                Assert.assertEquals(eij, oij);
+//            }
+//        }
+//    }
 
     /** verifies that two arrays are close (sup norm) */
     public static void assertEquals(String msg, double[] expected, double[] observed, double tolerance) {
diff --git a/src/test/java/org/apache/commons/math3/random/MersenneTwisterTest.java b/src/test/java/org/apache/commons/math3/random/MersenneTwisterTest.java
index 4e3e2c9df..7e90fe4db 100644
--- a/src/test/java/org/apache/commons/math3/random/MersenneTwisterTest.java
+++ b/src/test/java/org/apache/commons/math3/random/MersenneTwisterTest.java
@@ -294,7 +294,7 @@ public class MersenneTwisterTest extends RandomGeneratorAbstractTest {
 
         for (int i = 0; i < refDouble.length; ++i) {
             int r = mt.nextInt();
-            Assert.assertEquals(refDouble[i],
+            Assert.assertEquals(refDouble[0],
                          ((r & 0x7fffffffl) | ((r < 0) ? 0x80000000l : 0x0l)) / 4294967296.0,
                          1.0e-8);
         }
