/* Copyright (c) 2014-2023, ExtendJ Committers
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect Java8Modifiers {
  syn boolean Modifiers.isDefault() = hasModifier("default");

  syn boolean MethodDecl.isDefault() = getModifiers().isDefault();

  refine Modifiers
  eq MethodDecl.isAbstract() {
    return getModifiers().isAbstract() || (hostType().isInterfaceDecl() && !isStatic() && !isDefault());
  }


  // 8.4.3
  refine Enums eq MethodDecl.modifierProblems() {
    Collection<Problem> problems = refined(); // Reuse Java 5 modifer problems with some changes.
    Collection<Problem> filtered = new LinkedList<Problem>();
    if (hostType().isClassDecl()) {
      filtered.addAll(problems);
      if (isDefault()) {
        filtered.add(error("The default modifier cannot be used for non-interface methods."));
      }
    } else if (hostType().isInterfaceDecl()) {
      // Filter out old errors that don't apply to Java 8:
      for (Problem problem : problems) {
        if (!problem.message().contains("cannot be static")
            && !problem.message().contains("cannot be strictfp")) {
          filtered.add(problem);
        }
      }
      // Add additional Java 8 errors:
      if (getModifiers().isAbstract()) {
        if (isStatic()) {
          filtered.add(errorf("Interface method %s in %s cannot be both abstract and static.",
              signature(), hostType().typeName()));
        }
        if (isDefault()) {
          filtered.add(errorf("Interface method %s in %s cannot be both abstract and default.",
              signature(), hostType().typeName()));
        }
        if (isStrictfp()) {
          filtered.add(errorf("Interface method %s in %s cannot be both abstract and strictfp.",
              signature(), hostType().typeName()));
        }
      }
      if (isStatic() && isDefault()) {
        filtered.add(errorf("Interface method %s in %s cannot be both static and default.",
            signature(), hostType().typeName()));
      }
    } else {
      filtered.addAll(problems);
    }
    return filtered;
  }

  refine Modifiers eq TypeDecl.modifierProblems() {
    Collection<Problem> problems = refined();
    if (getModifiers().hasModifier("default")) {
      problems.add(error("The default modifier cannot be used outside of interface method declarations."));
    }
    return problems;
  }

  // 8.4.3
  refine Modifiers eq Modifiers.modifierProblems() {
    Collection<Problem> problems = refined();
    if (numModifier("default") > 1) {
      problems.add(error("Only one default modifier allowed."));
    }
    return problems;
  }
}
