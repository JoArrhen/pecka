/* Copyright (c) 2023, ExtendJ Committers
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect Java9TryWithResources{

  ResourceUse contributes each typeProblems() to CompilationUnit.problems();

  /**
   * Type checking for ResourceUse in TWR.
   */
  syn Collection<Problem> ResourceUse.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    TypeDecl typeAutoCloseable = lookupType("java.lang", "AutoCloseable");
    if (typeAutoCloseable.isUnknown()) {
      problems.add(error("java.lang.AutoCloseable not found"));
    } else if (type() != null && !type().subtype(typeAutoCloseable)) {
      problems.add(error("Resource specification must declare an AutoCloseable resource"));
    }
    if (getAccess().varDecl() !=null) {
      if(!getAccess().varDecl().isEffectivelyFinal()) {
        problems.add(error("Resource must be final or effectively final"));
      }
      if(!getAccess().varDecl().isLocalVariable()
          &&!getAccess().varDecl().isField()
          && !getAccess().varDecl().isMethodParameter()
          && !getAccess().varDecl().isConstructorParameter()){ // TODO more types?
        problems.add(error("Resource must be a field or a local variable"));
      }
    }
    return problems;
  }

  eq ResourceUse.getModifiers() = getAccess().varDecl().getModifiers();

  eq ResourceUse.declaresVariable(String name) = false;

  eq ResourceUse.getAccess().nameType() = NameType.EXPRESSION_NAME;

  eq ResourceUse.type() {
    if (getAccess().varDecl() != null) {
      return getAccess().varDecl().type();
    } else {
      return null;
    }
  }

  eq ResourceUse.getID() {
    if(getAccess().varDecl() != null) {
      return getAccess().varDecl().name();
    } else {
      return null;
    }
  }

  eq ResourceUse.getDimsList() = new List<Dims>();

  eq ResourceUse.assignedAfter(Variable v) = assignedBefore(v);

  eq ResourceUse.modifiedInScope(Variable var) = false;

  eq ResourceUse.name(){
    if (getAccess().varDecl() != null) {
      return getAccess().varDecl().name();
    } else {
      return null;
    }
  }

  /**
    * ResourceUse does not declare a variable,
    * use on a resource together with declaresVariable() to avoid null pointer exception
    */
  eq ResourceUse.getDeclarator() = null;
}
