/* Copyright (c) 2023, ExtendJ Committers
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * In Java 9 we allow the diamond operator to be used with anonymous generic classes if the inferred type is denotable
 */
aspect Java9Diamond{

    /**
   * If this DiamondAccess node constitutes a legal use of
   * the diamond operator, the inferred generic type for the
   * enclosing class instance expression is returned.
   */
  refine Diamond eq DiamondAccess.type() {
    TypeDecl accessType = getTypeAccess().type();

    // In Java 9 we allow the diamond operator to be used with anonymous generic classes if the inferred type is denotable
    if (isAnonymousDecl() && !(accessType.isPrimitiveType() || accessType.isClassDecl() || accessType.isInterfaceDecl())) {
      return accessType;
    }

    if (getClassInstanceExpr() == null) {
      // It is an error if the DiamondAccess does not occurr
      // within a class instance creation expression, but this
      // error is handled in typeCheck.
      return accessType;
    }

    if (!(accessType instanceof ParClassDecl)) {
      // It is an error if the TypeDecl of a DiamondAccess is not
      // a generic type, but this error is handled in typeCheck.
      return accessType;
    }

    SimpleSet<MethodDecl> maxSpecific = chooseConstructor();

    if (maxSpecific.isEmpty()) {
      return getTypeAccess().type();
    }

    MethodDecl constructor = maxSpecific.iterator().next();
    return constructor.type();
  }

  refine Diamond eq DiamondAccess.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    // If diamond access is used with an anonymous class and the inferred type is non-denotable
    if (isAnonymousDecl() && !(type().isPrimitiveType() || type().isClassDecl() || type().isInterfaceDecl())) {
      problems.add(error("the diamond operator cannot be used with anonymous classes if the inferred type is non denotable"));
    }
    if (isExplicitGenericConstructorAccess()) {
        problems.add(error("the diamond operator may not be used with generic constructors with explicit type parameters"));
    }
    if (getClassInstanceExpr() == null) {
        problems.add(error("the diamond operator can only be used in class instance expressions"));
    }
    if (!(getTypeAccess().type() instanceof ParClassDecl)) {
        problems.add(error("the diamond operator can only be used to instantiate generic classes"));
    }
    return problems;
  }

}
